{"version":3,"file":"665.fdfb195afab71249.js","mappings":"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","names":["i0","HealthCheckComponent_div_6_ng_container_4_Template","HealthCheckComponent_div_6_ng_template_5_Template","_c0","status_r1","error_r2","ctx_r2","healthCheckService","lastCheck$","HealthCheckComponent_tr_28_ng_container_5_Template","HealthCheckComponent_tr_28_ng_template_6_Template","row_r4","key","result","status","down_r5","message","HealthCheckComponent","constructor","this","static","t","i1","core","VBU","selectors","decls","vars","consts","template","rf","ctx","HealthCheckComponent_div_6_Template","refresh","HealthCheckComponent_tr_28_Template","status$","details$","ctx_r0","job","progress","JobStateLabelComponent","iconShape","state","JobState","COMPLETED","FAILED","CANCELLED","PENDING","RETRYING","RUNNING","colorType","inputs","JobStateLabelComponent_span_4_Template","item_r1","name","JobListComponent_ng_template_40_ng_container_0_Template","JobListComponent_ng_template_40_ng_template_1_Template","others_r2","job_r3","id","job_r4","createdAt","job_r5","queueName","job_r6","data","JobListComponent_ng_template_57_vdr_dropdown_0_Template","job_r7","attempts","retries","JobListComponent_ng_template_60_div_1_Template","JobListComponent_ng_template_60_div_2_Template","job_r8","duration","job_r9","error","_r10","item","ctx_r10","cancelJob","JobListComponent_ng_template_66_vdr_dropdown_0_Template","JobListComponent_ng_template_66_vdr_dropdown_1_Template","JobListComponent_ng_template_66_vdr_dropdown_2_Template","hasResult","isSettled","JobListComponent","BaseListComponent","dataService","router","route","super","liveUpdate","FormControl","queueFilter","stateFilter","setQueryFn","args","settings","getAllJobs","jobs","skip","take","value","eq","options","filter","sort","SortOrder","DESC","ngOnInit","timer","pipe","takeUntil","destroy$","subscribe","queues$","getJobQueues","mapStream","res","jobQueues","map","queues","running","Object","keys","length","i2","features","JobListComponent_ng_template_40_Template","$event","setPageNumber","setItemsPerPage","JobListComponent_ng_template_48_Template","JobListComponent_ng_template_51_Template","JobListComponent_ng_template_54_Template","JobListComponent_ng_template_57_Template","JobListComponent_ng_template_60_Template","JobListComponent_ng_template_63_Template","JobListComponent_ng_template_66_Template","items$","itemsPerPage$","totalItems$","currentPage$","systemRoutes","path","component","breadcrumb","_","SystemModule","$C","G2t","SharedModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/lib/system/src/components/health-check/health-check.component.html","./src/lib/system/src/components/health-check/health-check.component.ts","./src/lib/system/src/components/job-state-label/job-state-label.component.html","./src/lib/system/src/components/job-state-label/job-state-label.component.ts","./src/lib/system/src/components/job-list/job-list.component.html","./src/lib/system/src/components/job-list/job-list.component.ts","./src/lib/system/src/system.routes.ts","./src/lib/system/src/system.module.ts"],"sourcesContent":["<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n                    <div class=\"status-icon\">\r\n                        <clr-icon\r\n                            [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                            [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                            size=\"48\"\r\n                        ></clr-icon>\r\n                    </div>\r\n                    <div class=\"status-detail\">\r\n                        <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                            {{ 'system.health-all-systems-up' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #error>\r\n                            {{ 'system.health-error' | translate }}\r\n                        </ng-template>\r\n                        <div class=\"last-checked\">\r\n                            {{ 'system.health-last-checked' | translate }}:\r\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n                <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n                    <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n                </button>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"left\">\r\n                        {{ 'common.name' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-status' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-message' | translate }}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n                    <td class=\"align-middle left\">{{ row.key }}</td>\r\n                    <td class=\"align-middle left\">\r\n                        <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                            <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                                <clr-icon shape=\"check-circle\"></clr-icon>\r\n                                {{ 'system.health-status-up' | translate }}\r\n                            </ng-container>\r\n                            <ng-template #down>\r\n                                <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                                {{ 'system.health-status-down' | translate }}\r\n                            </ng-template>\r\n                        </vdr-chip>\r\n                    </td>\r\n                    <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { HealthCheckService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-health-check',\r\n    templateUrl: './health-check.component.html',\r\n    styleUrls: ['./health-check.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HealthCheckComponent {\r\n    constructor(public healthCheckService: HealthCheckService) {}\r\n}\r\n","<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JobInfoFragment, JobState } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-job-state-label',\n    templateUrl: './job-state-label.component.html',\n    styleUrls: ['./job-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobStateLabelComponent {\n    @Input()\n    job: JobInfoFragment;\n\n    get iconShape(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'check-circle';\n            case JobState.FAILED:\n                return 'exclamation-circle';\n            case JobState.CANCELLED:\n                return 'ban';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return 'hourglass';\n            case JobState.RUNNING:\n                return 'sync';\n        }\n    }\n\n    get colorType(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'success';\n            case JobState.FAILED:\n            case JobState.CANCELLED:\n                return 'error';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return '';\n            case JobState.RUNNING:\n                return 'warning';\n        }\n    }\n}\n","<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <clr-checkbox-wrapper class=\"mr-2\">\r\n                    <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\" />\r\n                    <label>{{ 'common.live-update' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n                <ng-select\r\n                    class=\"mr-2\"\r\n                    [addTag]=\"false\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    [formControl]=\"stateFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-option [value]=\"''\">\r\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'PENDING'\">\r\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'RUNNING'\">\r\n                        <vdr-chip colorType=\"warning\">{{ 'system.job-state-running' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'COMPLETED'\">\r\n                        <vdr-chip colorType=\"success\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'FAILED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'CANCELLED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                </ng-select>\r\n                <ng-select\r\n                    [addTag]=\"false\"\r\n                    [items]=\"queues$ | async\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    bindValue=\"name\"\r\n                    [formControl]=\"queueFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                        <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\r\n                        </ng-container>\r\n                        <ng-template #others>\r\n                            <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n\r\n    <vdr-data-table-2\r\n        id=\"job-list\"\r\n        [items]=\"items$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        [currentPage]=\"currentPage$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.createdAt | timeAgo }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-queue-name' | translate\" id=\"job-queue-name\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-data' | translate\" id=\"job-data\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"job.data\">\r\n                    <button\r\n                        class=\"button-small\"\r\n                        vdrDropdownTrigger\r\n                        [title]=\"'system.job-data' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-state' | translate\" id=\"job-state\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n                <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">after {{ job.attempts }} attempts</div>\r\n                <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\" class=\"retry-info\">\r\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-duration' | translate\" id=\"job-duration\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.duration | duration }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-result' | translate\" id=\"job-result\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                    <button class=\"button-small mr-1\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                        {{ 'system.job-result' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"job.error\">\r\n                    <button class=\"button-small\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.job-error' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            {{ job.error }}\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"cancelJob(job.id)\"\r\n                            [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.cancel' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAllJobsQuery,\r\n    GetJobQueueListQuery,\r\n    ItemOf,\r\n    JobState,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable, timer } from 'rxjs';\r\nimport { filter, map, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-job-list',\r\n    templateUrl: './job-list.component.html',\r\n    styleUrls: ['./job-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class JobListComponent\r\n    extends BaseListComponent<GetAllJobsQuery, ItemOf<GetAllJobsQuery, 'jobs'>>\r\n    implements OnInit\r\n{\r\n    queues$: Observable<GetJobQueueListQuery['jobQueues']>;\r\n    liveUpdate = new FormControl(true);\r\n    queueFilter = new FormControl('all');\r\n    stateFilter = new FormControl<JobState | string>('');\r\n\r\n    constructor(private dataService: DataService, router: Router, route: ActivatedRoute) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getAllJobs(...args),\r\n            data => data.jobs,\r\n            (skip, take) => {\r\n                const queueFilter =\r\n                    this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\r\n                const stateFilter = this.stateFilter.value;\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        filter: {\r\n                            ...queueFilter,\r\n                            ...(stateFilter ? { state: { eq: stateFilter } } : {}),\r\n                        },\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        timer(5000, 2000)\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                filter(() => !!this.liveUpdate.value),\r\n            )\r\n            .subscribe(() => {\r\n                this.refresh();\r\n            });\r\n        this.queues$ = this.dataService.settings\r\n            .getJobQueues()\r\n            .mapStream(res => res.jobQueues)\r\n            .pipe(map(queues => [{ name: 'all', running: true }, ...queues]));\r\n    }\r\n\r\n    hasResult(job: ItemOf<GetAllJobsQuery, 'jobs'>): boolean {\r\n        const result = job.result;\r\n        if (result == null) {\r\n            return false;\r\n        }\r\n        if (typeof result === 'object') {\r\n            return Object.keys(result).length > 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    cancelJob(id: string) {\r\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\n\r\nexport const systemRoutes: Route[] = [\r\n    {\r\n        path: 'jobs',\r\n        component: JobListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.job-queue'),\r\n        },\r\n    },\r\n    {\r\n        path: 'system-status',\r\n        component: HealthCheckComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.system-status'),\r\n        },\r\n    },\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\nimport { JobStateLabelComponent } from './components/job-state-label/job-state-label.component';\r\nimport { systemRoutes } from './system.routes';\r\n\r\n@NgModule({\r\n    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\r\n    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\r\n})\r\nexport class SystemModule {}\r\n"],"x_google_ignoreList":[]}