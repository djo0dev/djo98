{"version":3,"file":"832.a2ec9853f3eea5fc.js","mappings":"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","names":["i0","ctx_r0","imageCreatorUrl","imageCreator","imageUnsplashUrl","imageLocation","imageUrl","LoginComponent","constructor","authService","router","httpClient","localizationService","this","username","password","rememberMe","version","ADMIN_UI_VERSION","brand","getAppConfig","hideVendureBranding","customImageUrl","loginImageUrl","loadImage","ngOnInit","direction$","logIn","errorMessage","undefined","subscribe","result","__typename","redirect","getRedirectRoute","navigateByUrl","message","get","toPromise","then","res","updateImage","user","location","urls","regular","name","links","html","redirectTo","re","RegExp","AUTH_REDIRECT_PARAM","redirectToParam","window","search","match","length","atob","decodeURIComponent","static","t","i1","i2","i3","core","VBU","selectors","decls","vars","consts","template","rf","ctx","LoginComponent_p_9_Template","LoginComponent_p_10_Template","LoginComponent_img_11_Template","$event","LoginComponent_img_35_Template","_c0","LoginGuard","canActivate","route","checkAuthenticatedStatus","pipe","map","authenticated","navigate","jDH","factory","Éµfac","providedIn","loginRoutes","path","component","pathMatch","LoginModule","$C","G2t","SharedModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/lib/login/src/components/login/login.component.html","./src/lib/login/src/components/login/login.component.ts","./src/lib/login/src/providers/login.guard.ts","./src/lib/login/src/login.routes.ts","./src/lib/login/src/login.module.ts"],"sourcesContent":["<div class=\"login-wrapper\" [dir]=\"direction$ | async\">\r\n    <div class=\"login-wrapper-inner\">\r\n        <div class=\"login-wrapper-image\">\r\n            <div class=\"login-wrapper-image-content\">\r\n                <div class=\"login-wrapper-image-title\">\r\n                    {{ 'common.login-image-title' | translate }}\r\n                </div>\r\n                <div class=\"login-wrapper-image-copyright\">\r\n                    <p *ngIf=\"imageCreator\" class=\"creator\">\r\n                        Photo by <a [href]=\"imageCreatorUrl\" target=\"_blank\">{{ imageCreator }}</a> on\r\n                        <a [href]=\"imageUnsplashUrl\" target=\"_blank\">Unsplash</a>\r\n                    </p>\r\n                    <p *ngIf=\"imageLocation\" class=\"location\">{{ imageLocation }}</p>\r\n                </div>\r\n            </div>\r\n            <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" [alt]=\"imageUrl\" />\r\n        </div>\r\n        <div class=\"login-wrapper-form\">\r\n            <p class=\"login-title\">\r\n                {{ 'common.login-title' | translate : { brand: hideVendureBranding ? brand : 'Vendure' } }}\r\n            </p>\r\n            <form class=\"login-form\">\r\n                <div class=\"login-group\">\r\n                    <input\r\n                        class=\"username\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        id=\"login_username\"\r\n                        [(ngModel)]=\"username\"\r\n                        [placeholder]=\"'common.username' | translate\"\r\n                    />\r\n                    <input\r\n                        class=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        id=\"login_password\"\r\n                        [(ngModel)]=\"password\"\r\n                        [placeholder]=\"'common.password' | translate\"\r\n                    />\r\n                    <clr-alert\r\n                        [clrAlertType]=\"'danger'\"\r\n                        [clrAlertClosable]=\"false\"\r\n                        [class.visible]=\"errorMessage\"\r\n                        class=\"login-error\"\r\n                    >\r\n                        <clr-alert-item>\r\n                            <span class=\"alert-text\">\r\n                                {{ errorMessage }}\r\n                            </span>\r\n                        </clr-alert-item>\r\n                    </clr-alert>\r\n                    <clr-checkbox-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            id=\"rememberme\"\r\n                            name=\"rememberme\"\r\n                            [(ngModel)]=\"rememberMe\"\r\n                        />\r\n                        <label>{{ 'common.remember-me' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                    <div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            class=\"button primary login-button\"\r\n                            (click)=\"logIn()\"\r\n                            [disabled]=\"!username || !password\"\r\n                        >\r\n                            {{ 'common.login' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <img class=\"login-wrapper-logo\" src=\"assets/logo-login.webp\" *ngIf=\"!hideVendureBranding\" />\r\n    </div>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    ADMIN_UI_VERSION,\r\n    AuthService,\r\n    AUTH_REDIRECT_PARAM,\r\n    getAppConfig,\r\n    LocalizationDirectionType,\r\n    LocalizationService,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    direction$: LocalizationDirectionType;\r\n\r\n    username = '';\r\n    password = '';\r\n    rememberMe = false;\r\n    version = ADMIN_UI_VERSION;\r\n    errorMessage: string | undefined;\r\n    brand = getAppConfig().brand;\r\n    hideVendureBranding = getAppConfig().hideVendureBranding;\r\n    customImageUrl = getAppConfig().loginImageUrl;\r\n    imageUrl = '';\r\n    imageUnsplashUrl = '';\r\n    imageLocation = '';\r\n    imageCreator = '';\r\n    imageCreatorUrl = '';\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private httpClient: HttpClient,\r\n        private localizationService: LocalizationService,\r\n    ) {\r\n        if (this.customImageUrl) {\r\n            this.imageUrl = this.customImageUrl;\r\n        } else {\r\n            this.loadImage();\r\n        }\r\n    }\r\n    ngOnInit(): void {\r\n        this.direction$ = this.localizationService.direction$;\r\n    }\r\n\r\n    logIn(): void {\r\n        this.errorMessage = undefined;\r\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\r\n            switch (result.__typename) {\r\n                case 'CurrentUser':\r\n                    const redirect = this.getRedirectRoute();\r\n                    this.router.navigateByUrl(redirect ? redirect : '/');\r\n                    break;\r\n                case 'InvalidCredentialsError':\r\n                case 'NativeAuthStrategyError':\r\n                    this.errorMessage = result.message;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    loadImage() {\r\n        this.httpClient\r\n            .get('https://login-image.vendure.io')\r\n            .toPromise()\r\n            .then(res => {\r\n                this.updateImage(res);\r\n            });\r\n    }\r\n\r\n    updateImage(res: any) {\r\n        const user: any = (res as any).user;\r\n        const location: any = (res as any).location;\r\n\r\n        this.imageUrl = res.urls.regular + '?utm_source=Vendure+Login+Image&utm_medium=referral';\r\n        this.imageCreator = user.name;\r\n        this.imageLocation = location.name;\r\n        this.imageCreatorUrl = user.links.html + '?utm_source=Vendure+Login+Image&utm_medium=referral';\r\n        this.imageUnsplashUrl = res.links.html;\r\n    }\r\n\r\n    /**\r\n     * Attempts to read a redirect param from the current url and parse it into a\r\n     * route from which the user was redirected after a 401 error.\r\n     */\r\n    private getRedirectRoute(): string | undefined {\r\n        let redirectTo: string | undefined;\r\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\r\n        try {\r\n            const redirectToParam = window.location.search.match(re);\r\n            if (redirectToParam && 1 < redirectToParam.length) {\r\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\r\n            }\r\n        } catch (e: any) {\r\n            // ignore\r\n        }\r\n        return redirectTo;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * This guard prevents loggen-in users from navigating to the login screen.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoginGuard  {\r\n    constructor(private router: Router, private authService: AuthService) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n        return this.authService.checkAuthenticatedStatus().pipe(\r\n            map(authenticated => {\r\n                if (authenticated) {\r\n                    this.router.navigate(['/']);\r\n                }\r\n                return !authenticated;\r\n            }),\r\n        );\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { LoginGuard } from './providers/login.guard';\r\n\r\nexport const loginRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent,\r\n        pathMatch: 'full',\r\n        canActivate: [LoginGuard],\r\n    },\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { loginRoutes } from './login.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\r\n    exports: [],\r\n    declarations: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n"],"x_google_ignoreList":[]}