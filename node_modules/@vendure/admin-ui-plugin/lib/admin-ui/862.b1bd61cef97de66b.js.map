{"version":3,"file":"862.b1bd61cef97de66b.js","mappings":"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","names":["replaceLast","target","search","replace","lastIndex","lastIndexOf","substr","ProductDetailService","constructor","dataService","this","getTaxCategories","settings","mapSingle","data","taxCategories","items","pipe","shareReplay","createProductWithVariants","input","createVariantsConfig","languageCode","createProduct$","product","createProduct","nonEmptyOptionGroups","groups","filter","g","values","length","createOptionGroups$","createProductOptionGroups","forkJoin","mergeMap","optionGroups","map","optionGroup","addOptionGroupToProduct","productId","id","optionGroupId","of","variants","v","optionIds","optionValues","optionName","index","option","options","find","o","name","Error","og","reduce","flat","createProductVariants","stockLocationId","c","code","normalizeString","translations","createProductOptionGroup","variantData","notNullOrUndefined","join","price","sku","stockLevels","stockOnHand","stock","updateProduct","updateOptions","autoUpdate","productInput","variantsInput","updateOperations","updateVariantsInput","getProductVariantsForProduct","productVariants","push","productOldName","findTranslation","productNewName","variant","currentVariantName","variantInput","existingVariantInput","i","variantTranslation","updateProductVariants","updateProductOptions","inputs","autoUpdateProductNames","updateProductVariantNames$","replacementMap","Map","newOptionName","oldOptionName","includes","set","variantsToUpdate","size","oldOptionNames","Array","from","keys","variantName","some","updatedVariantName","get","updateProductOption","deleteProductVariant","switchMap","result","DeletionResult","DELETED","getProduct","single$","throwError","message","static","t","i0","i1","core","jDH","factory","ɵfac","providedIn","_r1","ctx_r1","save","detailForm","pristine","invalid","optionGroupCustomFields","optionGroup_r3","updatePermission","optionControl_r5","value","optionControl_r6","createdAt","optionControl_r7","updatedAt","optionControl_r8","optionControl_r9","optionCustomFields","optionControl_r10","$event","_r4","$implicit","paginationSettings","currentPage","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_3_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_6_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_9_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_12_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_15_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_ng_template_18_Template","options_r11","itemsPerPage","ProductOptionsEditorComponent_form_22_vdr_card_2_ng_container_11_Template","ProductOptionsEditorComponent_form_22_vdr_card_2_vdr_data_table_2_12_Template","i_r12","getOptions","ProductOptionsEditorComponent_form_22_vdr_card_2_Template","getOptionGroups","ProductOptionsEditorComponent","BaseDetailComponent","route","router","serverConfigService","permissionsService","productDetailService","formBuilder","changeDetector","notificationService","super","autoUpdateVariantNames","Permission","UpdateCatalog","UpdateProduct","getCustomFieldConfig","ngOnInit","optionGroups$","snapshot","entity","tap","group","UntypedFormGroup","UntypedFormArray","init","controls","$product","combineLatest","entity$","languageCode$","take","updatedProductOptionInputs","optionGroupForm","dirty","optionGroupEntity","getUpdatedOptionGroup","updateProductOptionGroup","optionForm","getUpdatedOption","subscribe","markAsPristine","markForCheck","success","_","err","error","optionGroupFormGroup","createUpdatedTranslatable","translatable","updatedFields","customFieldConfig","defaultTranslation","optionFormGroup","setFormValues","groupsForm","groupTranslation","groupForm","setOptionGroupForm","setCustomFieldsForm","optionsForm","array","addControl","optionTranslation","setOptionForm","customFields","formGroup","currentTranslation","customValueFieldsGroup","hash","field","setCustomFieldFormValues","control","setValue","i2","i3","i4","VBU","selectors","features","decls","vars","consts","template","rf","ctx","setLanguage","ProductOptionsEditorComponent_button_20_Template","ProductOptionsEditorComponent_form_22_Template","availableLanguages$","cancel","confirm","form","CreateProductOptionGroupDialogComponent","Validators","required","updateCode","nameControl","codeControl","resolveWith","CreateProductOptionGroupDialogComponent_ng_template_0_Template","CreateProductOptionGroupDialogComponent_ng_template_8_Template","optionGroup_r1","existingVariant","_r3","CreateProductVariantDialogComponent","record","currencyCode","FormControl","valueChanges","Object","every","entries","groupCode","optionId","groupId","getGroupIdFromCode","Number","getGroupCodeFromId","CreateProductVariantDialogComponent_ng_template_0_Template","CreateProductVariantDialogComponent_vdr_form_field_3_Template","CreateProductVariantDialogComponent_clr_alert_4_Template","CreateProductVariantDialogComponent_div_5_Template","CreateProductVariantDialogComponent_ng_template_16_Template","option_r4","ctx_r4","removeOption","i_r6","updateOption","cancelBubble","editName","isLast_r7","lastSelected","locked","groupName","editingIndex","OptionValueInputComponent_div_1_vdr_chip_1_Template","OPTION_VALUE_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","OptionValueInputComponent","multi","formValue","add","EventEmitter","remove","edit","disabled","isFocussed","registerOnChange","fn","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","isDisabled","writeValue","obj","focus","textArea","nativeElement","event","optionValue","nameInputs","setTimeout","newName","emit","handleKey","key","addOptionValue","preventDefault","removeLastOption","handleBlur","parseInputIntoOptions","unique","split","s","trim","viewQuery","ElementRef","textArea_r2","OptionValueInputComponent_div_1_Template","group_r2","i_r3","ctx_r3","addOption","removeOptionGroup","isNew","variant_r5","variant_r6","variant_r7","variant_r8","variant_r9","optionGroup_r11","option_r10","_r12","variant_r13","item","setOptionToAddToVariant","addOptionToVariant","optionsToAddToVariant","ProductVariantsEditorComponent_vdr_dt2_column_33_ng_template_1_vdr_chip_0_Template","ProductVariantsEditorComponent_vdr_dt2_column_33_ng_template_1_ng_template_1_Template","getOption","selectOption_r14","ProductVariantsEditorComponent_vdr_dt2_column_33_ng_template_1_Template","variant_r15","variant_r16","priceWithTax","variant_r18","_r17","deleteVariant","GeneratedVariant","config","ProductVariantsEditorComponent","modalService","formValueChanged","optionsChanged","searchTermControl","selectionManager","SelectionManager","multiSelect","itemsAreEqual","a","b","additiveMode","refresh$","Subject","paramMap","getDefaultUiLanguage","getActiveChannel","activeChannel","defaultCurrencyCode","product$","getProductVariantsOptions","parent","startWith","variants$","term","toLowerCase","totalItems$","p","allUsedOptionIds","allUsedOptionGroupIds","setItemsPerPage","setPageNumber","page","onFormChanged","variantInfo","enabled","canDeactivate","addOptionGroup","fromComponent","locals","EMPTY","next","usedByVariantsCount","dialog","title","body","translationVars","count","buttons","type","label","returnValue","val","removeOptionGroupFromProduct","force","__typename","addOptionToGroup","productOptionGroupId","createProductOption","deleteProductOption","variantId","response","createNewVariant","ProductVariantsEditorComponent_div_2_Template","ProductVariantsEditorComponent_ng_template_20_Template","ProductVariantsEditorComponent_ng_template_23_Template","ProductVariantsEditorComponent_ng_template_26_Template","ProductVariantsEditorComponent_ng_template_29_Template","ProductVariantsEditorComponent_ng_template_32_Template","ProductVariantsEditorComponent_vdr_dt2_column_33_Template","ProductVariantsEditorComponent_ng_template_37_Template","ProductVariantsEditorComponent_ng_template_40_Template","ProductVariantsEditorComponent_ng_template_43_Template","ProductVariantsResolver","BaseEntityResolver","mapStream","createRoutes","pageService","path","component","PageComponent","locationId","breadcrumb","children","getPageTabRoutes","redirectTo","link","CanDeactivateDetailGuard","resolve","inject","DataService","params","createResolveData","productOptionsEditorBreadcrumb","selectValues","selectedValues","ApplyFacetDialogComponent","ngAfterViewInit","selector","FacetValueSelectorComponent","ApplyFacetDialogComponent_ng_template_0_Template","ApplyFacetDialogComponent_ng_template_2_Template","ASSET_DETAIL_QUERY","gql","ASSET_FRAGMENT","TAG_FRAGMENT","AssetDetailComponent","TypedBaseDetailComponent","FormGroup","tags","getCustomFieldsDefaults","ngOnDestroy","destroy","onAssetChange","markAsDirty","updateAsset","AssetDetailComponent_button_5_Template","_c0","AssetListComponent","BaseListComponent","searchTerm$","BehaviorSubject","undefined","filterByTags$","uploading","setQueryFn","args","getAssetList","refetchOnChannelChange","assets","skip","searchTerm","contains","sort","SortOrder","DESC","tagsOperator","LogicalOperator","AND","paginationConfig$","itemsPerPage$","currentPage$","totalItems","debounceTime","takeUntil","destroy$","refresh","allTags$","getTagList","filesSelected","files","createAssets","finalize","successCount","deleteAssets","showModalAndDelete","r","assetIds","res","items$","_c1","AssignProductsToChannelDialogComponent_ng_template_0_ng_container_0_Template","AssignProductsToChannelDialogComponent_ng_template_0_ng_template_1_Template","isProductVariantMode","productModeTitle_r1","selectedChannel","row_r3","pricePreview","AssignProductsToChannelDialogComponent_tr_33_ng_template_7_Template","AssignProductsToChannelDialogComponent_tr_33_ng_template_8_Template","currentChannel","noChannelSelected_r4","_r5","assign","AssignProductsToChannelDialogComponent_ng_template_35_ng_template_4_Template","AssignProductsToChannelDialogComponent_ng_template_35_ng_template_5_Template","noSelection_r6","AssignProductsToChannelDialogComponent","productVariantIds","priceFactorControl","UntypedFormControl","selectedChannelIdControl","activeChannelId$","client","userStatus","activeChannelId","allChannels$","getChannels","channels","availableChannels","ids","selectChannel","variantsPreview$","getTopVariants","factor","channelIds","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","_this","_asyncToGenerator","lastValueFrom","getProductVariants","filterOperator","OR","in","AssignProductsToChannelDialogComponent_ng_template_0_Template","AssignProductsToChannelDialogComponent_ng_template_29_Template","AssignProductsToChannelDialogComponent_ng_template_30_Template","AssignProductsToChannelDialogComponent_tr_33_Template","AssignProductsToChannelDialogComponent_ng_template_35_Template","currentChannelIds","noSelection_r7","GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS","GET_VARIANTS_WITH_FACET_VALUES_BY_IDS","UPDATE_PRODUCTS_BULK","UPDATE_VARIANTS_BULK","item_r2","facetValue_r4","removeFacetValue","BulkAddFacetValuesDialogComponent_table_7_tr_2_div_4_Template","BulkAddFacetValuesDialogComponent_table_7_tr_2_vdr_facet_value_chip_6_Template","facetValues","BulkAddFacetValuesDialogComponent_table_7_tr_2_Template","_r6","addFacetValues","facetValuesRemoved","BulkAddFacetValuesDialogComponent","changeDetectorRef","mode","state","fetchData$","query","products","subscription","unsubscribe","facetValueId","fv","selectedFacetValueIds","sv","mutate","facetValueIds","BulkAddFacetValuesDialogComponent_ng_template_0_Template","BulkAddFacetValuesDialogComponent_table_7_Template","BulkAddFacetValuesDialogComponent_ng_template_8_Template","BulkAddFacetValuesDialogComponent_ng_template_10_Template","placeholder_r7","variant_r1","variant_r2","variant_r3","variant_r4","CollectionContentsComponent","previewUpdatedFilters","filterTermControl","isLoading","collectionIdChange$","parentIdChange$","filterChanges$","inheritFiltersChanges$","contentsCurrentPage$","queryParamMap","qpm","distinctUntilChanged","contentsItemsPerPage$","perPage","filterTerm$","setContentsPageNumber","asObservable","inheritFilters","collection$","parentId","filterTerm","filters","filterClause","collection","previewCollectionVariants","catchError","getCollectionContents","contents$","contentsTotalItems$","ngOnChanges","changes","collectionId","currentValue","updatedFilters","complete","setParam","setContentsItemsPerPage","navigate","relativeTo","queryParams","n","queryParamsHandling","replaceUrl","contentQueries","dirIndex","TemplateRef","CollectionContentsComponent_ng_container_3_Template","CollectionContentsComponent_ng_template_14_Template","CollectionContentsComponent_ng_template_17_Template","CollectionContentsComponent_ng_template_20_Template","CollectionContentsComponent_ng_template_23_Template","CollectionContentsComponent_ng_template_26_Template","headerTemplate","onToggleAllClick","areAllCurrentItemsSelected","sort_r5","sortOrder","ngIf","toggleSortOrder","CollectionDataTableComponent_th_8_div_5_clr_icon_2_Template","CollectionDataTableComponent_th_8_div_5_clr_icon_3_Template","CollectionDataTableComponent_th_8_div_5_clr_icon_4_Template","CollectionDataTableComponent_th_8_div_5_div_5_Template","CollectionDataTableComponent_th_8_div_5_Template","column_r6","expand","align","heading","activeFilter_r8","CollectionDataTableComponent_tr_13_ng_container_8_vdr_data_table_filters_2_Template","CollectionDataTableComponent_tr_13_ng_container_8_vdr_data_table_filters_3_Template","activeFilters","_r7","toggleSearchFilterRow","CollectionDataTableComponent_tr_13_ng_container_6_Template","CollectionDataTableComponent_tr_13_ng_container_7_Template","CollectionDataTableComponent_tr_13_ng_container_8_Template","showSearchFilterRow","searchComponent","customSearchTemplate","collectionRowTmp_r11","_c4","item_r9","i_r10","emptyStateLabel","itemsPerPageChange","_c5","currentStart","currentEnd","_r13","pageChange","_r14","item_r15","onRowClick","activeIndex","absoluteIndex","isSelected","CollectionDataTableComponent_ng_template_23_td_3_ng_container_2_ng_container_1_Template","componentConfig_r16","_c7","injector","CollectionDataTableComponent_ng_template_23_td_3_ng_template_3_ng_container_0_Template","column_r17","_c8","depth_r19","CollectionDataTableComponent_ng_template_23_td_3_ng_container_2_Template","CollectionDataTableComponent_ng_template_23_td_3_ng_template_3_Template","customComponents","defaultComponent_r20","CollectionDataTableComponent_ng_template_23_ng_container_5_ng_container_1_Template","subCollection_r21","CollectionDataTableComponent_ng_template_23_td_2_Template","CollectionDataTableComponent_ng_template_23_td_3_Template","CollectionDataTableComponent_ng_template_23_ng_container_5_Template","_c6","visibleSortedColumns","getSubcollections","CollectionDataTableComponent","DataTable2Component","changeOrder","dragRefs","sortPredicate","dropList","getSortedItems","subCollections","allCollections","subCollectionMatches","forEach","collectionRowList","removeItem","ref","toArray","dropContainer","_dragRef","_withDropContainer","_dropListRef","addItem","onDrop","isTopLevel","breadcrumbs","pageIndexOffset","parentIndex","findIndex","adjustedIndex","currentIndex","splice","previousIndex","adjustedPreviousIndex","CdkDropList","CdkDrag","CollectionDataTableComponent_vdr_data_table_filter_presets_0_Template","CollectionDataTableComponent_th_7_Template","CollectionDataTableComponent_th_8_Template","onColumnReorder","onColumnsReset","CollectionDataTableComponent_tr_13_Template","CollectionDataTableComponent_ng_container_15_Template","CollectionDataTableComponent_tr_18_Template","CollectionDataTableComponent_vdr_items_per_page_controls_20_Template","CollectionDataTableComponent_div_21_Template","CollectionDataTableComponent_vdr_pagination_controls_22_Template","CollectionDataTableComponent_ng_template_23_Template","disableSelect","selection","uiLanguage$","sortedColumns","_c3","trackByFn","_r2","ctx_r2","create","assetsChanged","CollectionDetailComponent_ng_template_11_button_0_Template","entity_r5","_c2","breadcrumb_r6","CollectionDetailComponent_vdr_page_block_29_li_3_a_1_Template","CollectionDetailComponent_vdr_page_block_29_li_3_a_2_Template","CollectionDetailComponent_vdr_page_block_29_li_3_ng_container_3_Template","isFirst_r7","isLast_r8","CollectionDetailComponent_vdr_page_block_29_li_3_Template","entity_r9","i_r11","_r10","removeFilter","filter_r12","getFilterDefinition","filter_r14","addFilter","description","CollectionDetailComponent_div_65_button_9_Template","allFilters","_r15","toggleLivePreview","count_r16","tmp_7_0","tmp_9_0","livePreview","COLLECTION_DETAIL_QUERY","COLLECTION_FRAGMENT","CollectionDetailComponent","localStorageService","slug","unicodePatternValidator","visible","assetChanges","UpdateCollection","filterRemoved$","getCollectionFilters","collectionFilters","filtersFormArray","inheritFiltersControl","inheritFilters$","updatedFilters$","merge","statusChanges","touched","mapOperationsToInputs","_filter","arg","arguments","parentId$","pm","f","updateSlug","nameValue","slugControl","currentSlugIsEmpty","collectionFilter","filtersArray","argsHash","output","getConfigArgValue","removeAt","markAsTouched","getUpdatedCollection","isPrivate","featuredAsset","createCollection","category","updateCollection","contentsComponent","JSON","stringify","patchValue","formArray","clear","featuredAssetId","operations","formValueOperations","j","encodeConfigArgValue","CollectionDetailComponent_button_9_Template","CollectionDetailComponent_ng_template_11_Template","CollectionDetailComponent_ng_container_24_Template","CollectionDetailComponent_ng_template_25_Template","CollectionDetailComponent_vdr_card_27_Template","CollectionDetailComponent_vdr_page_block_29_Template","CollectionDetailComponent_vdr_card_47_Template","CollectionDetailComponent_ng_container_60_Template","CollectionDetailComponent_ng_template_61_Template","CollectionDetailComponent_ng_container_64_Template","CollectionDetailComponent_div_65_Template","CollectionDetailComponent_ng_template_73_Template","isNew$","updateButton_r17","private_r18","noInherit_r19","CollectionBreadcrumbPipe","transform","slice","EJ8","pure","collection_r1","depth_r3","collection_r5","ctx_r5","toggleExpanded","MoveCollectionsDialogComponent_ng_template_14_button_2_clr_icon_1_Template","MoveCollectionsDialogComponent_ng_template_14_button_2_clr_icon_2_Template","expandedIds","MoveCollectionsDialogComponent_ng_template_14_clr_icon_1_Template","MoveCollectionsDialogComponent_ng_template_14_button_2_Template","MoveCollectionsDialogComponent_ng_template_14_button_3_Template","item_r7","MoveCollectionsDialogComponent_ng_template_17_ng_container_1_ng_container_1_div_1_Template","breadcrumbs_r8","MoveCollectionsDialogComponent_ng_template_17_ng_container_1_ng_container_1_Template","MoveCollectionsDialogComponent_ng_template_17_ng_container_1_span_2_Template","MoveCollectionsDialogComponent_ng_template_17_ng_container_1_Template","collection_r9","collection_r10","MoveCollectionsDialogComponent","i18nService","expandedIds$","getCollectionsResult","getCollections","topLevelOnly","refetch","rootCollectionId$","collections","rootCollectionId","translate","position","subCollections$","MoveCollectionsDialogComponent_ng_template_0_Template","MoveCollectionsDialogComponent_ng_template_11_Template","MoveCollectionsDialogComponent_ng_template_14_Template","MoveCollectionsDialogComponent_ng_template_17_Template","MoveCollectionsDialogComponent_ng_template_20_Template","deleteCollectionsBulkAction","createBulkDeleteAction","location","requiresPermission","userPermissions","DeleteCollection","DeleteCatalog","getItemName","bulkDelete","deleteCollections","moveCollectionsBulkAction","icon","onClick","hostComponent","clearSelection","ModalService","NotificationService","closable","moveCollection","assignCollectionsToChannelBulkAction","createBulkAssignToChannelAction","bulkAssignToChannel","collectionIds","assignCollectionsToChannel","removeCollectionsFromChannelBulkAction","createBulkRemoveFromChannelAction","bulkRemoveFromChannel","removeCollectionsFromChannel","duplicateCollectionsBulkAction","DuplicateEntityDialogComponent","entities","entityName","getEntityName","collection_r3","collection_r4","collection_r6","depth_r7","_r8","CollectionListComponent_ng_template_12_ng_template_24_button_2_clr_icon_1_Template","CollectionListComponent_ng_template_12_ng_template_24_button_2_clr_icon_2_Template","CollectionListComponent_ng_template_12_ng_template_24_clr_icon_1_Template","CollectionListComponent_ng_template_12_ng_template_24_button_2_Template","item_r10","CollectionListComponent_ng_template_12_ng_template_27_ng_container_1_ng_container_1_div_1_Template","breadcrumbs_r11","CollectionListComponent_ng_template_12_ng_template_27_ng_container_1_ng_container_1_Template","CollectionListComponent_ng_template_12_ng_template_27_ng_container_1_span_2_Template","CollectionListComponent_ng_template_12_ng_template_27_ng_container_1_Template","collection_r12","collection_r13","CollectionListComponent_ng_template_12_ng_template_33_vdr_chip_0_Template","CollectionListComponent_ng_template_12_ng_template_33_vdr_chip_1_Template","collection_r14","collection_r15","customField_r16","sorts","onRearrange","setVisibleColumns","CollectionListComponent_ng_template_12_ng_template_12_Template","CollectionListComponent_ng_template_12_ng_template_15_Template","CollectionListComponent_ng_template_12_ng_template_18_Template","CollectionListComponent_ng_template_12_ng_template_21_Template","CollectionListComponent_ng_template_12_ng_template_24_Template","CollectionListComponent_ng_template_12_ng_template_27_Template","CollectionListComponent_ng_template_12_ng_template_30_Template","CollectionListComponent_ng_template_12_ng_template_33_Template","CollectionListComponent_ng_template_12_ng_template_36_Template","CollectionListComponent_ng_template_12_vdr_dt2_custom_field_column_37_Template","dataTableListId","activeCollectionIndex$","activeCollectionId$","CollectionListComponent_ng_template_13_ng_container_0_Template","CollectionListComponent","TypedBaseListComponent","createFilterCollection","addIdFilter","addDateFilters","kind","filterField","toFilterInput","eq","addCustomFieldFilters","connectToRoute","createSortCollection","defaultSort","addSort","addCustomFieldSorts","configure","document","GetCollectionListDocument","getItems","setVariables","_take","createFilterInput","createSortInput","refreshListOnChanges","activeCollectionTitle$","match","closeContents","contents","setContentLanguage","expanded","CollectionListComponent_a_8_Template","CollectionListComponent_ng_template_12_Template","CollectionListComponent_ng_template_13_Template","contentLanguage$","CollectionTreeService","allMoveListItems","_rearrange$","_delete$","rearrange$","delete$","setCollectionTree","tree","collectionTree","resetMoveList","getMoveListItems","calculateAllMoveListItems","ancestorIdPath","has","newParentId","container","onMove","onDelete","visit","node","parentPath","concat","child","Set","CollectionTreeNodeComponent_div_3_button_5_clr_icon_1_Template","CollectionTreeNodeComponent_div_3_button_5_clr_icon_2_Template","expandAll","_r9","move","hasUpdatePermission$","activeCollectionId","toggleSelection","CollectionTreeNodeComponent_div_3_button_5_Template","CollectionTreeNodeComponent_div_3_ng_template_6_Template","CollectionTreeNodeComponent_div_3_vdr_chip_10_Template","CollectionTreeNodeComponent_div_3_div_19_Template","CollectionTreeNodeComponent_div_3_a_24_Template","i_r7","moveUp","ctx_r7","moveDown","CollectionTreeNodeComponent_div_3_button_39_Template","delete","CollectionTreeNodeComponent_div_3_vdr_collection_tree_node_46_Template","depth","folderSpacer_r11","moveListItems","hasDeletePermission$","CollectionTreeNodeComponent","collectionTreeService","parentName","permissions$","permissions","perms","selectionChanges$","expandAllChange","previousValue","drop","moveItemInArray","CollectionTreeNodeComponent_div_3_Template","i5","i14","styles","changeDetection","arrayToTree","nodes","currentState","topLevelNodes","mappedArr","currentStateMap","treeToMap","nodeMap","hasOwnProperty","mappedElem","ctx_r0","CollectionTreeComponent","rearrange","deleteCollection","outputs","CollectionTreeComponent_vdr_collection_tree_node_0_Template","ConfirmVariantDeletionDialogComponent","ConfirmVariantDeletionDialogComponent_ng_template_0_Template","ConfirmVariantDeletionDialogComponent_li_4_Template","ConfirmVariantDeletionDialogComponent_ng_template_5_Template","CreateFacetValueDialogComponent","facetId","CreateFacetValueDialogComponent_ng_template_0_Template","CreateFacetValueDialogComponent_ng_template_8_Template","FacetDetailComponent_ng_template_11_button_0_Template","filterControl","customValueFields","value_r8","updateValueCode","FacetDetailComponent_vdr_card_43_ng_container_3_tr_14_td_8_Template","deleteFacetValue","FacetDetailComponent_vdr_card_43_ng_container_3_ng_container_11_Template","FacetDetailComponent_vdr_card_43_ng_container_3_tr_14_Template","setCurrentPage","filteredValues_r9","addFacetValue","FacetDetailComponent_vdr_card_43_ng_template_2_Template","FacetDetailComponent_vdr_card_43_ng_container_3_Template","FacetDetailComponent_vdr_card_43_button_6_Template","values$","FACET_DETAIL_QUERY","FACET_WITH_VALUE_LIST_FRAGMENT","FacetDetailComponent","facet","UpdateFacet","fetchFacetValues","currentCode","valueId","customValueFieldIsSet","createFacetValues","facetForm","newFacet","getUpdatedFacet","createFacet","valuesFormRecord","updatedFacetInput","updateFacet","updatedValues","getUpdatedFacetValues","updateFacetValues","deleted","GetFacetDetailDocument","deleteFacetValues","newPage","facetValueListOptions","valueList","setFacetValueFormValues","currentValuesFormGroup","valueTranslation","valueControl","fieldDef","fieldValue","facetFormGroup","valuesFormGroup","FacetDetailComponent_button_9_Template","FacetDetailComponent_ng_template_11_Template","FacetDetailComponent_ng_container_24_Template","FacetDetailComponent_ng_template_25_Template","FacetDetailComponent_vdr_page_entity_info_28_Template","FacetDetailComponent_vdr_card_41_Template","FacetDetailComponent_vdr_card_43_Template","updateButton_r11","private_r12","deleteFacetsBulkAction","DeleteFacet","shouldRetryItem","retrying","deleteFacets","assignFacetsToChannelBulkAction","facetIds","assignFacetsToChannel","removeFacetsFromChannelBulkAction","removeFacetsFromChannel","isErrorResult","removeFacetsFromChannelBulkAction2","getTranslationVars","getChannelCodeFromUserStatus","iconClass","isVisible","currentChannelIsNotDefault","res2","removedCount","errors","errorIds","result2","notRemovedCount","then","channelCode","duplicateFacetsBulkAction","facet_r1","facet_r2","facet_r3","facet_r4","facet_r5","FacetListComponent_ng_template_35_vdr_chip_0_Template","FacetListComponent_ng_template_35_vdr_chip_1_Template","facet_r6","value_r7","facet_r8","ctx_r9","initialLimit","toggleDisplayLimit","FacetListComponent_ng_template_38_button_4_ng_container_1_Template","FacetListComponent_ng_template_38_button_4_ng_template_2_Template","displayLimit","collapse_r11","FacetListComponent_ng_template_38_vdr_facet_value_chip_1_Template","FacetListComponent_ng_template_38_vdr_chip_3_Template","FacetListComponent_ng_template_38_button_4_Template","customField_r12","FACET_LIST_QUERY","FacetListComponent","GetFacetListDocument","facets","FacetListComponent_a_8_Template","FacetListComponent_ng_template_20_Template","FacetListComponent_ng_template_23_Template","FacetListComponent_ng_template_26_Template","FacetListComponent_ng_template_29_Template","FacetListComponent_ng_template_32_Template","FacetListComponent_ng_template_35_Template","FacetListComponent_ng_template_38_Template","FacetListComponent_vdr_dt2_custom_field_column_39_Template","optionValueInputComponent_r3","handleEnter","generateVariants","location_r6","selectedStockLocationId","GenerateProductVariantsComponent_ng_container_5_vdr_form_field_3_option_3_Template","stockLocations_r7","GenerateProductVariantsComponent_ng_container_5_div_4_tr_15_td_1_Template","GenerateProductVariantsComponent_ng_container_5_div_4_tr_15_td_2_Template","variantFormValues","GenerateProductVariantsComponent_ng_container_5_div_4_th_4_Template","GenerateProductVariantsComponent_ng_container_5_div_4_th_5_Template","GenerateProductVariantsComponent_ng_container_5_div_4_tr_15_Template","GenerateProductVariantsComponent_ng_container_5_clr_alert_1_Template","GenerateProductVariantsComponent_ng_container_5_vdr_form_field_3_Template","GenerateProductVariantsComponent_ng_container_5_div_4_Template","DEFAULT_VARIANT_CODE","GenerateProductVariantsComponent","variantsChange","stockLocations$","GetStockLocationListDocument","stockLocations","onFormChange","groupNameInputs","sum","generateAllCombinations","nonNullable","copyFromDefault","copyValuesToPristine","optionValueInputComponent","stopPropagation","formControl","correspondingFormControl","emitEvent","variantsToCreate","prop","GenerateProductVariantsComponent_div_0_Template","GenerateProductVariantsComponent_ng_container_5_Template","asset_r6","ProductVariantListComponent_ng_template_20_img_1_Template","ProductVariantListComponent_ng_template_20_ng_template_2_Template","imagePlaceholder_r8","variant_r10","ProductVariantListComponent_ng_template_29_vdr_chip_0_Template","ProductVariantListComponent_ng_template_29_vdr_chip_1_Template","variant_r11","variant_r12","stockLevel_r14","stockAllocated","ProductVariantListComponent_ng_template_38_vdr_chip_0_span_4_Template","stockLocation","ProductVariantListComponent_ng_template_38_vdr_chip_0_Template","field_r16","ProductVariantListComponent","hideLanguageSelect","addFilters","inputType","addSorts","ProductVariantListQueryDocument","filterParam","_and","filterInput","_or","dataTableId","ProductVariantListComponent_vdr_page_block_0_Template","ProductVariantListComponent_ng_template_11_Template","ProductVariantListComponent_ng_template_14_Template","ProductVariantListComponent_ng_template_17_Template","ProductVariantListComponent_ng_template_20_Template","ProductVariantListComponent_ng_template_23_Template","ProductVariantListComponent_ng_template_26_Template","ProductVariantListComponent_ng_template_29_Template","ProductVariantListComponent_ng_template_32_Template","ProductVariantListComponent_ng_template_35_Template","ProductVariantListComponent_ng_template_38_Template","ProductVariantListComponent_vdr_dt2_custom_field_column_39_Template","ProductDetailComponent_ng_template_12_button_0_Template","updatePermissions","channel_r7","removeFromChannel","ProductDetailComponent_ng_container_22_vdr_card_1_vdr_form_item_2_ng_container_3_vdr_chip_1_Template","isDefaultChannel","ProductDetailComponent_ng_container_22_vdr_card_1_vdr_form_item_2_ng_container_3_Template","assignToChannel","productChannels$","ProductDetailComponent_ng_container_22_vdr_card_1_vdr_form_item_2_Template","ProductDetailComponent_ng_container_22_vdr_card_1_Template","optionGroup_r8","ProductDetailComponent_vdr_card_24_vdr_chip_3_Template","ProductDetailComponent_vdr_card_24_a_6_Template","facetValue_r10","removeProductFacetValue","_r11","selectProductFacetValue","entity_r12","GET_PRODUCT_DETAIL","PRODUCT_DETAIL_FRAGMENT","ProductDetailComponent","productFacetValues$","formFacetValueIdChanges$","getFacetValues","facetValues$","DEFAULT_CHANNEL_CODE","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","removeVariantsFromChannel","displayFacetValueModal","productGroup","currentFacetValueIds","newProduct","getUpdatedProduct","console","updateSlugAfterSave","productFormGroup","results","firstResult","isUpdateMutation","ProductDetailComponent_button_10_Template","ProductDetailComponent_ng_template_12_Template","ProductDetailComponent_clr_toggle_wrapper_21_Template","ProductDetailComponent_ng_container_22_Template","ProductDetailComponent_vdr_card_24_Template","ProductDetailComponent_vdr_facet_value_chip_28_Template","ProductDetailComponent_button_31_Template","ProductDetailComponent_vdr_card_32_Template","ProductDetailComponent_div_43_Template","ProductDetailComponent_vdr_card_55_Template","ProductDetailComponent_div_63_Template","ProductDetailComponent_ng_template_65_Template","ProductDetailComponent_div_67_Template","updateButton_r14","tmp_18_0","variantList_r15","deleteProductsBulkAction","DeleteProduct","deleteProducts","assignProductsToChannelBulkAction","isMultiChannel","removeProductsFromChannelBulkAction","assignFacetValuesToProductsBulkAction","duplicateProductsBulkAction","product_r1","product_r2","product_r3","asset_r4","ProductListComponent_ng_template_33_img_1_Template","ProductListComponent_ng_template_33_ng_template_2_Template","product_r5","imagePlaceholder_r6","product_r7","product_r8","ProductListComponent_ng_template_42_vdr_chip_0_Template","ProductListComponent_ng_template_42_vdr_chip_1_Template","product_r9","product_r10","variantList","customField_r11","ctx_r11","ProductListComponent","jobQueueService","pendingSearchIndexUpdates","pageLocationId","FacetValueFormInputComponent","serializeValue","deserializeValue","getLabel","ProductListQueryDocument","rebuildSearchIndex","reindex","info","addJob","job","JobState","COMPLETED","time","Intl","NumberFormat","format","duration","indexedItemCount","deleteProduct","delay","ProductListComponent_a_8_Template","ProductListComponent_ng_template_24_Template","ProductListComponent_ng_template_27_Template","ProductListComponent_ng_template_30_Template","ProductListComponent_ng_template_33_Template","ProductListComponent_ng_template_36_Template","ProductListComponent_ng_template_39_Template","ProductListComponent_ng_template_42_Template","ProductListComponent_ng_template_45_Template","ProductListComponent_vdr_dt2_custom_field_column_46_Template","taxRate$","grossPrice$","VariantPriceDetailComponent","priceChange$","taxCategoryIdChange$","taxRates$","getTaxRatesSimple","taxRates","activeChannel$","taxCategoryId","defaultTaxZone","applicableRate","taxRate","zone","Math","round","priceIncludesTax","VariantPriceDetailComponent_div_3_Template","VariantPriceDetailComponent_div_4_Template","VariantPriceStrategyDetailComponent","calculatedPriceDiffersFromInputPrice","defaultPrice","prices","channelDefaultCurrencyCode","channelPriceIncludesTax","VariantPriceStrategyDetailComponent_div_0_Template","item_r3","selectedVariantId","onSelect","ProductVariantQuickJumpComponent_ng_select_0_ng_template_3_Template","searchFn","ProductVariantQuickJumpComponent","GetProductVariantsQuickJumpDocument","ProductVariantQuickJumpComponent_ng_select_0_Template","tmp_0_0","availableLanguages_r3","ProductVariantDetailComponent_ng_container_4_vdr_language_selector_1_Template","stockLevelsForm","pricesForm","optionGroupCode","option_r6","ProductVariantDetailComponent_form_11_vdr_card_7_vdr_chip_3_Template","ProductVariantDetailComponent_form_11_vdr_card_7_a_6_Template","facetValue_r9","selectFacetValue","entity_r11","taxCategory_r12","price_r14","toggleDeletePrice","ProductVariantDetailComponent_form_11_div_43_div_7_Template","channelPriceIncludesTax$","currencyCode_r16","addPriceInCurrency","ProductVariantDetailComponent_form_11_ng_container_46_div_1_button_8_Template","unusedCurrencyCodes_r17","ProductVariantDetailComponent_form_11_ng_container_46_div_1_Template","stockLevel_r18","tmp_5_0","tmp_6_0","tmp_10_0","stockLocation_r20","_r19","addStockLocation","ProductVariantDetailComponent_form_11_ng_container_77_div_1_button_8_Template","unusedStockLocations_r21","ProductVariantDetailComponent_form_11_ng_container_77_div_1_Template","ProductVariantDetailComponent_form_11_clr_toggle_wrapper_6_Template","ProductVariantDetailComponent_form_11_vdr_card_7_Template","ProductVariantDetailComponent_form_11_vdr_facet_value_chip_11_Template","ProductVariantDetailComponent_form_11_button_14_Template","ProductVariantDetailComponent_form_11_vdr_page_entity_info_16_Template","ProductVariantDetailComponent_form_11_vdr_card_30_Template","ProductVariantDetailComponent_form_11_option_41_Template","ProductVariantDetailComponent_form_11_div_43_Template","ProductVariantDetailComponent_form_11_ng_container_46_Template","ProductVariantDetailComponent_form_11_div_76_Template","ProductVariantDetailComponent_form_11_ng_container_77_Template","taxCategories$","unusedCurrencyCodes$","GlobalFlag","TRUE","FALSE","INHERIT","tmp_42_0","inventoryIsNotTracked","globalOutOfStockThreshold","unusedStockLocation$","ProductVariantDetailComponent","customOptionFields","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","getGlobalSettings","globalSettings","globalTrackInventory","result$","availableCurrencyCodes$","availableCurrencyCodes","currencyCodes","usedIds","l","pricesIncludeTax","stockLevels$","switchMapTo","innerObservable","resultSelector","isFunction","deleteFormControl","stockLocationName","pick","getUpdatedVariant","ProductVariantUpdateMutationDocument","taxCategory","stockLevel","variantFormGroup","ProductVariantDetailComponent_ng_container_4_Template","ProductVariantDetailComponent_button_9_Template","ProductVariantDetailComponent_form_11_Template","assignProductVariantsToChannelBulkAction","removeProductVariantsFromChannelBulkAction","removeProductVariantsFromChannel","deleteProductVariantsBulkAction","deleteProductVariants","assignFacetValuesToProductVariantsBulkAction","featuredAsset_r2","optionGroupName","option_r3","formGroup_r4","ProductVariantsTableComponent_tr_22_ng_container_1_img_4_Template","ProductVariantsTableComponent_tr_22_ng_container_1_ng_template_5_Template","ProductVariantsTableComponent_tr_22_ng_container_1_ng_container_17_Template","ProductVariantsTableComponent_tr_22_ng_container_1_vdr_currency_input_21_Template","ProductVariantsTableComponent_tr_22_ng_container_1_vdr_currency_input_22_Template","getFeaturedAsset","ProductVariantsTableComponent_tr_22_ng_container_1_Template","formGroupMap","ProductVariantsTableComponent","buildFormGroupMap","pendingAssetChanges","controlGroup","None","paginationConfig","ProductVariantsTableComponent_ng_container_10_Template","ProductVariantsTableComponent_tr_22_Template","customFieldsForm","update","nameInput_r4","codeInput_r5","UpdateProductOptionDialogComponent","updateVariantName","codeInputTouched","productOption","activeLanguage","cfCurrentTranslation","UpdateProductOptionDialogComponent_ng_template_0_Template","UpdateProductOptionDialogComponent_section_14_Template","UpdateProductOptionDialogComponent_ng_template_15_Template","CatalogModule","hasRegisteredTabsAndBulkActions","bulkActionRegistryService","registerBulkAction","registerPageTab","priority","tab","detailComponentWithResolver","GetProductDetailDocument","entityKey","getBreadcrumbs","GetProductVariantDetailDocument","variables","CollectionDetailQueryDocument","AssetDetailQueryDocument","$C","G2t","ROUTES","useFactory","deps","PageService","imports","SharedModule","RouterModule","forChild","PRODUCT_LIST_QUERY_PRODUCT_FRAGMENT","PRODUCT_LIST_QUERY","PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT","PRODUCT_VARIANT_DETAIL_QUERY","PRODUCT_VARIANT_UPDATE_MUTATION","PRODUCT_VARIANT_LIST_QUERY_PRODUCT_VARIANT_FRAGMENT","PRODUCT_VARIANT_LIST_QUERY","AdjustmentType","AssetType","CurrencyCode","ErrorCode","HistoryEntryType","LanguageCode","MetricInterval","MetricType","OrderType","StockMovementType","DISTRIBUTED_ORDER_PROMOTION","OTHER","PROMOTION","BINARY","IMAGE","VIDEO","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYN","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VES","VND","VUV","WST","XAF","XCD","XOF","XPF","YER","ZAR","ZMW","ZWL","NOT_DELETED","ALREADY_REFUNDED_ERROR","CANCEL_ACTIVE_ORDER_ERROR","CANCEL_PAYMENT_ERROR","CHANNEL_DEFAULT_LANGUAGE_ERROR","COUPON_CODE_EXPIRED_ERROR","COUPON_CODE_INVALID_ERROR","COUPON_CODE_LIMIT_ERROR","CREATE_FULFILLMENT_ERROR","DUPLICATE_ENTITY_ERROR","EMAIL_ADDRESS_CONFLICT_ERROR","EMPTY_ORDER_LINE_SELECTION_ERROR","FACET_IN_USE_ERROR","FULFILLMENT_STATE_TRANSITION_ERROR","GUEST_CHECKOUT_ERROR","INELIGIBLE_SHIPPING_METHOD_ERROR","INSUFFICIENT_STOCK_ERROR","INSUFFICIENT_STOCK_ON_HAND_ERROR","INVALID_CREDENTIALS_ERROR","INVALID_FULFILLMENT_HANDLER_ERROR","ITEMS_ALREADY_FULFILLED_ERROR","LANGUAGE_NOT_AVAILABLE_ERROR","MANUAL_PAYMENT_STATE_ERROR","MIME_TYPE_ERROR","MISSING_CONDITIONS_ERROR","MULTIPLE_ORDER_ERROR","NATIVE_AUTH_STRATEGY_ERROR","NEGATIVE_QUANTITY_ERROR","NOTHING_TO_REFUND_ERROR","NO_ACTIVE_ORDER_ERROR","NO_CHANGES_SPECIFIED_ERROR","ORDER_LIMIT_ERROR","ORDER_MODIFICATION_ERROR","ORDER_MODIFICATION_STATE_ERROR","ORDER_STATE_TRANSITION_ERROR","PAYMENT_METHOD_MISSING_ERROR","PAYMENT_ORDER_MISMATCH_ERROR","PAYMENT_STATE_TRANSITION_ERROR","PRODUCT_OPTION_IN_USE_ERROR","QUANTITY_TOO_GREAT_ERROR","REFUND_AMOUNT_ERROR","REFUND_ORDER_STATE_ERROR","REFUND_PAYMENT_ID_MISSING_ERROR","REFUND_STATE_TRANSITION_ERROR","SETTLE_PAYMENT_ERROR","UNKNOWN_ERROR","CUSTOMER_ADDED_TO_GROUP","CUSTOMER_ADDRESS_CREATED","CUSTOMER_ADDRESS_DELETED","CUSTOMER_ADDRESS_UPDATED","CUSTOMER_DETAIL_UPDATED","CUSTOMER_EMAIL_UPDATE_REQUESTED","CUSTOMER_EMAIL_UPDATE_VERIFIED","CUSTOMER_NOTE","CUSTOMER_PASSWORD_RESET_REQUESTED","CUSTOMER_PASSWORD_RESET_VERIFIED","CUSTOMER_PASSWORD_UPDATED","CUSTOMER_REGISTERED","CUSTOMER_REMOVED_FROM_GROUP","CUSTOMER_VERIFIED","ORDER_CANCELLATION","ORDER_COUPON_APPLIED","ORDER_COUPON_REMOVED","ORDER_CUSTOMER_UPDATED","ORDER_FULFILLMENT","ORDER_FULFILLMENT_TRANSITION","ORDER_MODIFIED","ORDER_NOTE","ORDER_PAYMENT_TRANSITION","ORDER_REFUND_TRANSITION","ORDER_STATE_TRANSITION","CANCELLED","FAILED","PENDING","RETRYING","RUNNING","af","ak","am","ar","as","az","be","bg","bm","bn","bo","br","bs","ca","ce","co","cs","cu","cy","da","de","de_AT","de_CH","dz","ee","el","en","en_AU","en_CA","en_GB","en_US","eo","es","es_ES","es_MX","et","eu","fa","fa_AF","ff","fi","fo","fr","fr_CA","fr_CH","fy","ga","gd","gl","gu","gv","ha","he","hi","hr","ht","hu","hy","ia","ig","ii","is","it","ja","jv","ka","ki","kk","kl","km","kn","ko","ks","ku","kw","ky","la","lb","lg","ln","lo","lt","lu","lv","mg","mi","mk","ml","mn","mr","ms","mt","my","nb","nd","ne","nl","nl_BE","nn","ny","om","or","os","pa","pl","ps","pt","pt_BR","pt_PT","qu","rm","rn","ro","ro_MD","ru","rw","sa","sd","se","sg","si","sk","sl","sm","sn","so","sq","sr","st","su","sw","sw_CD","ta","te","tg","th","ti","tk","to","tr","tt","ug","uk","ur","uz","vi","vo","wo","xh","yi","yo","zh","zh_Hans","zh_Hant","zu","Daily","AverageOrderValue","OrderCount","OrderTotal","Aggregate","Regular","Seller","Authenticated","CreateAdministrator","CreateAsset","CreateCatalog","CreateChannel","CreateCollection","CreateCountry","CreateCustomer","CreateCustomerGroup","CreateFacet","CreateOrder","CreatePaymentMethod","CreateProduct","CreatePromotion","CreateSeller","CreateSettings","CreateShippingMethod","CreateStockLocation","CreateSystem","CreateTag","CreateTaxCategory","CreateTaxRate","CreateZone","DeleteAdministrator","DeleteAsset","DeleteChannel","DeleteCountry","DeleteCustomer","DeleteCustomerGroup","DeleteOrder","DeletePaymentMethod","DeletePromotion","DeleteSeller","DeleteSettings","DeleteShippingMethod","DeleteStockLocation","DeleteSystem","DeleteTag","DeleteTaxCategory","DeleteTaxRate","DeleteZone","Owner","Public","ReadAdministrator","ReadAsset","ReadCatalog","ReadChannel","ReadCollection","ReadCountry","ReadCustomer","ReadCustomerGroup","ReadFacet","ReadOrder","ReadPaymentMethod","ReadProduct","ReadPromotion","ReadSeller","ReadSettings","ReadShippingMethod","ReadStockLocation","ReadSystem","ReadTag","ReadTaxCategory","ReadTaxRate","ReadZone","SuperAdmin","UpdateAdministrator","UpdateAsset","UpdateChannel","UpdateCountry","UpdateCustomer","UpdateCustomerGroup","UpdateGlobalSettings","UpdateOrder","UpdatePaymentMethod","UpdatePromotion","UpdateSeller","UpdateSettings","UpdateShippingMethod","UpdateStockLocation","UpdateSystem","UpdateTag","UpdateTaxCategory","UpdateTaxRate","UpdateZone","ASC","exports","ADJUSTMENT","ALLOCATION","CANCELLATION","RELEASE","RETURN","SALE"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/lib/catalog/src/providers/product-detail/replace-last.ts","./src/lib/catalog/src/providers/product-detail/product-detail.service.ts","./src/lib/catalog/src/components/product-options-editor/product-options-editor.component.html","./src/lib/catalog/src/components/product-options-editor/product-options-editor.component.ts","./src/lib/catalog/src/components/create-product-option-group-dialog/create-product-option-group-dialog.component.html","./src/lib/catalog/src/components/create-product-option-group-dialog/create-product-option-group-dialog.component.ts","./src/lib/catalog/src/components/create-product-variant-dialog/create-product-variant-dialog.component.html","./src/lib/catalog/src/components/create-product-variant-dialog/create-product-variant-dialog.component.ts","./src/lib/catalog/src/components/option-value-input/option-value-input.component.html","./src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","./src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","./src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","./src/lib/catalog/src/providers/routing/product-variants-resolver.ts","./src/lib/catalog/src/catalog.routes.ts","./src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","./src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","./src/lib/catalog/src/components/asset-detail/asset-detail.component.html","./src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","./src/lib/catalog/src/components/asset-list/asset-list.component.ts","./src/lib/catalog/src/components/asset-list/asset-list.component.html","./src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","./src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","./src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.graphql.ts","./src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.html","./src/lib/catalog/src/components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component.ts","./src/lib/catalog/src/components/collection-contents/collection-contents.component.html","./src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","./src/lib/catalog/src/components/collection-data-table/collection-data-table.component.html","./src/lib/catalog/src/components/collection-data-table/collection-data-table.component.ts","./src/lib/catalog/src/components/collection-detail/collection-detail.component.html","./src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","./src/lib/catalog/src/components/collection-list/collection-breadcrumb.pipe.ts","./src/lib/catalog/src/components/move-collections-dialog/move-collections-dialog.component.html","./src/lib/catalog/src/components/move-collections-dialog/move-collections-dialog.component.ts","./src/lib/catalog/src/components/collection-list/collection-list-bulk-actions.ts","./src/lib/catalog/src/components/collection-list/collection-list.component.html","./src/lib/catalog/src/components/collection-list/collection-list.component.ts","./src/lib/catalog/src/components/collection-tree/collection-tree.service.ts","./src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","./src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","./src/lib/catalog/src/components/collection-tree/array-to-tree.ts","./src/lib/catalog/src/components/collection-tree/collection-tree.component.html","./src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","./src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","./src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","./src/lib/catalog/src/components/create-facet-value-dialog/create-facet-value-dialog.component.html","./src/lib/catalog/src/components/create-facet-value-dialog/create-facet-value-dialog.component.ts","./src/lib/catalog/src/components/facet-detail/facet-detail.component.html","./src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","./src/lib/catalog/src/components/facet-list/facet-list-bulk-actions.ts","./src/lib/catalog/src/components/facet-list/facet-list.component.html","./src/lib/catalog/src/components/facet-list/facet-list.component.ts","./src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","./src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","./src/lib/catalog/src/components/product-variant-list/product-variant-list.component.html","./src/lib/catalog/src/components/product-variant-list/product-variant-list.component.ts","./src/lib/catalog/src/components/product-detail/product-detail.component.html","./src/lib/catalog/src/components/product-detail/product-detail.component.ts","./src/lib/catalog/src/components/product-list/product-list-bulk-actions.ts","./src/lib/catalog/src/components/product-list/product-list.component.html","./src/lib/catalog/src/components/product-list/product-list.component.ts","./src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","./src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","./src/lib/catalog/src/components/variant-price-strategy-detail/variant-price-strategy-detail.component.html","./src/lib/catalog/src/components/variant-price-strategy-detail/variant-price-strategy-detail.component.ts","./src/lib/catalog/src/components/product-variant-quick-jump/product-variant-quick-jump.component.html","./src/lib/catalog/src/components/product-variant-quick-jump/product-variant-quick-jump.component.ts","./src/lib/catalog/src/components/product-variant-detail/product-variant-detail.component.html","./src/lib/catalog/src/components/product-variant-detail/product-variant-detail.component.ts","../node_modules/rxjs/dist/esm/internal/operators/switchMapTo.js","./src/lib/catalog/src/components/product-variant-list/product-variant-list-bulk-actions.ts","./src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","./src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","./src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","./src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","./src/lib/catalog/src/catalog.module.ts","./src/lib/catalog/src/components/product-list/product-list.graphql.ts","./src/lib/catalog/src/components/product-variant-detail/product-variant-detail.graphql.ts","./src/lib/catalog/src/components/product-variant-list/product-variant-list.graphql.ts","../common/src/generated-types.ts"],"sourcesContent":["/**\r\n * @description\r\n * Like String.prototype.replace(), but replaces the last instance\r\n * rather than the first.\r\n */\r\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\r\n    if (!target) {\r\n        return '';\r\n    }\r\n    const lastIndex = target.lastIndexOf(search);\r\n    if (lastIndex === -1) {\r\n        return target;\r\n    }\r\n    const head = target.substr(0, lastIndex);\r\n    const tail = target.substr(lastIndex).replace(search, replace);\r\n    return head + tail;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    CreateProductInput,\r\n    CreateProductVariantInput,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValuesFragment,\r\n    findTranslation,\r\n    GetProductDetailQuery,\r\n    GetProductWithVariantsQuery,\r\n    LanguageCode,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\r\n\r\nimport { replaceLast } from './replace-last';\r\n\r\n/**\r\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\r\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductDetailService {\r\n    constructor(private dataService: DataService) {}\r\n\r\n    getTaxCategories() {\r\n        return this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories.items)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    createProductWithVariants(\r\n        input: CreateProductInput,\r\n        createVariantsConfig: CreateProductVariantsConfig,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const createProduct$ = this.dataService.product.createProduct(input);\r\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\r\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\r\n\r\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\r\n            mergeMap(([{ createProduct }, optionGroups]) => {\r\n                const addOptionsToProduct$ = optionGroups.length\r\n                    ? forkJoin(\r\n                          optionGroups.map(optionGroup =>\r\n                              this.dataService.product.addOptionGroupToProduct({\r\n                                  productId: createProduct.id,\r\n                                  optionGroupId: optionGroup.id,\r\n                              }),\r\n                          ),\r\n                      )\r\n                    : of([]);\r\n                return addOptionsToProduct$.pipe(map(() => ({ createProduct, optionGroups })));\r\n            }),\r\n            mergeMap(({ createProduct, optionGroups }) => {\r\n                const variants = createVariantsConfig.variants.map(v => {\r\n                    const optionIds = optionGroups.length\r\n                        ? v.optionValues.map((optionName, index) => {\r\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\r\n                              if (!option) {\r\n                                  throw new Error(\r\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\r\n                                  );\r\n                              }\r\n                              return option.id;\r\n                          })\r\n                        : [];\r\n                    return {\r\n                        ...v,\r\n                        optionIds,\r\n                    };\r\n                });\r\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\r\n                return this.createProductVariants(\r\n                    createProduct,\r\n                    variants,\r\n                    options,\r\n                    languageCode,\r\n                    createVariantsConfig.stockLocationId,\r\n                );\r\n            }),\r\n        );\r\n    }\r\n\r\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\r\n        return groups.length\r\n            ? forkJoin(\r\n                  groups.map(c =>\r\n                      this.dataService.product\r\n                          .createProductOptionGroups({\r\n                              code: normalizeString(c.name, '-'),\r\n                              translations: [{ languageCode, name: c.name }],\r\n                              options: c.values.map(v => ({\r\n                                  code: normalizeString(v, '-'),\r\n                                  translations: [{ languageCode, name: v }],\r\n                              })),\r\n                          })\r\n                          .pipe(map(data => data.createProductOptionGroup)),\r\n                  ),\r\n              )\r\n            : of([]);\r\n    }\r\n\r\n    createProductVariants(\r\n        product: { name: string; id: string },\r\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\r\n        options: Array<{ id: string; name: string }>,\r\n        languageCode: LanguageCode,\r\n        stockLocationId: string,\r\n    ) {\r\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\r\n            const name = options.length\r\n                ? `${product.name} ${v.optionIds\r\n                      .map(id => options.find(o => o.id === id))\r\n                      .filter(notNullOrUndefined)\r\n                      .map(o => o.name)\r\n                      .join(' ')}`\r\n                : product.name;\r\n            return {\r\n                productId: product.id,\r\n                price: v.price,\r\n                sku: v.sku,\r\n                translations: [\r\n                    {\r\n                        languageCode,\r\n                        name,\r\n                    },\r\n                ],\r\n                stockLevels: [\r\n                    {\r\n                        stockLocationId,\r\n                        stockOnHand: v.stock,\r\n                    },\r\n                ],\r\n                optionIds: v.optionIds,\r\n            };\r\n        });\r\n        return this.dataService.product.createProductVariants(variants).pipe(\r\n            map(({ createProductVariants }) => ({\r\n                createProductVariants,\r\n                productId: product.id,\r\n            })),\r\n        );\r\n    }\r\n\r\n    updateProduct(updateOptions: {\r\n        product: NonNullable<GetProductDetailQuery['product']>;\r\n        languageCode: LanguageCode;\r\n        autoUpdate: boolean;\r\n        productInput?: UpdateProductInput;\r\n        variantsInput?: UpdateProductVariantInput[];\r\n    }) {\r\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\r\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\r\n        const updateVariantsInput = variantsInput || [];\r\n\r\n        const variants$ = autoUpdate\r\n            ? this.dataService.product\r\n                  .getProductVariantsForProduct({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                if (productInput) {\r\n                    updateOperations.push(this.dataService.product.updateProduct(productInput));\r\n                    const productOldName = findTranslation(product, languageCode)?.name ?? '';\r\n                    const productNewName = findTranslation(productInput, languageCode)?.name;\r\n                    if (productNewName && productOldName !== productNewName && autoUpdate) {\r\n                        for (const variant of variants) {\r\n                            const currentVariantName = findTranslation(variant, languageCode)?.name || '';\r\n                            let variantInput: UpdateProductVariantInput;\r\n                            const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\r\n                            if (existingVariantInput) {\r\n                                variantInput = existingVariantInput;\r\n                            } else {\r\n                                variantInput = {\r\n                                    id: variant.id,\r\n                                    translations: [{ languageCode, name: currentVariantName }],\r\n                                };\r\n                                updateVariantsInput.push(variantInput);\r\n                            }\r\n                            const variantTranslation = findTranslation(variantInput, languageCode);\r\n                            if (variantTranslation) {\r\n                                if (variantTranslation.name) {\r\n                                    variantTranslation.name = replaceLast(\r\n                                        variantTranslation.name,\r\n                                        productOldName,\r\n                                        productNewName,\r\n                                    );\r\n                                } else {\r\n                                    // The variant translation was falsy, which occurs\r\n                                    // when defining the product name for a new translation\r\n                                    // language that had not yet been defined.\r\n                                    variantTranslation.name = [\r\n                                        productNewName,\r\n                                        ...variant.options.map(o => o.name),\r\n                                    ].join(' ');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (updateVariantsInput.length) {\r\n                    updateOperations.push(\r\n                        this.dataService.product.updateProductVariants(updateVariantsInput),\r\n                    );\r\n                }\r\n                return forkJoin(updateOperations);\r\n            }),\r\n        );\r\n    }\r\n\r\n    updateProductOptions(\r\n        inputs: UpdateProductOptionInput[],\r\n        autoUpdateProductNames: boolean,\r\n        product: NonNullable<GetProductDetailQuery['product']>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants$ = autoUpdateProductNames\r\n            ? this.dataService.product\r\n                  .getProductVariantsForProduct({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                let updateProductVariantNames$: Observable<any> = of([]);\r\n                if (autoUpdateProductNames) {\r\n                    const replacementMap = new Map<string, string>();\r\n\r\n                    for (const input of inputs) {\r\n                        const newOptionName = findTranslation(input, languageCode)?.name;\r\n                        let oldOptionName: string | undefined;\r\n                        for (const variant of variants) {\r\n                            if (oldOptionName) {\r\n                                continue;\r\n                            }\r\n                            if (variant.options.map(o => o.id).includes(input.id)) {\r\n                                if (!oldOptionName) {\r\n                                    oldOptionName = findTranslation(\r\n                                        variant.options.find(o => o.id === input.id),\r\n                                        languageCode,\r\n                                    )?.name;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (oldOptionName && newOptionName) {\r\n                            replacementMap.set(oldOptionName, newOptionName);\r\n                        }\r\n                    }\r\n\r\n                    const variantsToUpdate: UpdateProductVariantInput[] = [];\r\n                    if (replacementMap.size) {\r\n                        const oldOptionNames = Array.from(replacementMap.keys());\r\n                        for (const variant of variants) {\r\n                            const variantName = findTranslation(variant, languageCode)?.name;\r\n                            if (!variantName) {\r\n                                continue;\r\n                            }\r\n                            if (!oldOptionNames.some(oldOptionName => variantName.includes(oldOptionName))) {\r\n                                continue;\r\n                            }\r\n                            const updatedVariantName = oldOptionNames.reduce(\r\n                                (name, oldOptionName) =>\r\n                                    replaceLast(name, oldOptionName, replacementMap.get(oldOptionName)!),\r\n                                variantName,\r\n                            );\r\n                            variantsToUpdate.push({\r\n                                id: variant.id,\r\n                                translations: [\r\n                                    {\r\n                                        languageCode,\r\n                                        name: updatedVariantName,\r\n                                    },\r\n                                ],\r\n                            });\r\n                        }\r\n                    }\r\n                    if (variantsToUpdate.length) {\r\n                        updateProductVariantNames$ =\r\n                            this.dataService.product.updateProductVariants(variantsToUpdate);\r\n                    } else {\r\n                        updateProductVariantNames$ = of([]);\r\n                    }\r\n                }\r\n                return forkJoin(\r\n                    inputs.map(input => this.dataService.product.updateProductOption(input)),\r\n                ).pipe(mergeMap(() => updateProductVariantNames$));\r\n            }),\r\n        );\r\n    }\r\n\r\n    deleteProductVariant(id: string, productId: string) {\r\n        return this.dataService.product.deleteProductVariant(id).pipe(\r\n            switchMap(result => {\r\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\r\n                    return this.dataService.product.getProduct(productId).single$;\r\n                } else {\r\n                    return throwError(result.deleteProductVariant.message);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n    <vdr-page-header-description>{{ 'catalog.page-description-options-editor' | translate }}</vdr-page-header-description>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <vdr-language-selector\r\n                    [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                    [currentLanguageCode]=\"languageCode$ | async\"\r\n                    (languageCodeChange)=\"setLanguage($event)\"\r\n                ></vdr-language-selector>\r\n            </vdr-ab-left>\r\n\r\n            <vdr-ab-right>\r\n                <div class=\"flex center\">\r\n                    <div class=\"mr-2\">\r\n                        <clr-checkbox-wrapper>\r\n                            <input\r\n                                clrCheckbox\r\n                                type=\"checkbox\"\r\n                                id=\"auto-update\"\r\n                                [(ngModel)]=\"autoUpdateVariantNames\"\r\n                            />\r\n                            <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                        </clr-checkbox-wrapper>\r\n                    </div>\r\n                    <button\r\n                        *vdrIfPermissions=\"updatePermission\"\r\n                        class=\"btn btn-primary\"\r\n                        (click)=\"save()\"\r\n                        [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n                    >\r\n                        {{ 'common.update' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\r\n            <div formGroupName=\"optionGroups\">\r\n                <vdr-card\r\n                    *ngFor=\"let optionGroup of getOptionGroups(); index as i\"\r\n                    [formArrayName]=\"i\"\r\n                    [title]=\"optionGroup.value.code\"\r\n                >\r\n                    <vdr-page-entity-info [entity]=\"optionGroup.value\"></vdr-page-entity-info>\r\n                    <div class=\"form-grid\">\r\n                        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                            <input\r\n                                [id]=\"'name-' + i\"\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            />\r\n                        </vdr-form-field>\r\n                        <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                            <input\r\n                                [id]=\"'code-' + i\"\r\n                                type=\"text\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                formControlName=\"code\"\r\n                            />\r\n                        </vdr-form-field>\r\n                    </div>\r\n                    <ng-container formGroupName=\"customFields\" *ngIf=\"optionGroupCustomFields.length\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"ProductOptionGroup\"\r\n                            [customFields]=\"optionGroupCustomFields\"\r\n                            [customFieldsFormGroup]=\"optionGroup.get('customFields')\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </ng-container>\r\n\r\n                    <vdr-data-table-2\r\n                        id=\"edit-options-list\"\r\n                        *ngIf=\"getOptions(optionGroup) as options\"\r\n                        [items]=\"options\"\r\n                        [itemsPerPage]=\"paginationSettings[optionGroup.value.id]?.itemsPerPage\"\r\n                        [currentPage]=\"paginationSettings[optionGroup.value.id]?.currentPage\"\r\n                        (pageChange)=\"paginationSettings[optionGroup.value.id].currentPage = $event\"\r\n                        [totalItems]=\"options.length\"\r\n                    >\r\n                        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\r\n                            <ng-template let-optionControl=\"item\">\r\n                                {{ optionControl.value.id }}\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n                            <ng-template let-optionControl=\"item\">\r\n                                {{ optionControl.value.createdAt | localeDate : 'short' }}\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\r\n                            <ng-template let-optionControl=\"item\">\r\n                                {{ optionControl.value.updatedAt | localeDate : 'short' }}\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\r\n                            <ng-template let-optionControl=\"item\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    [formControl]=\"optionControl.get('name')\"\r\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                />\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                        <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\" [optional]=\"false\">\r\n                            <ng-template let-optionControl=\"item\">\r\n                                <input type=\"text\" [formControl]=\"optionControl.get('code')\" />\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                        <vdr-dt2-column\r\n                            [heading]=\"'common.custom-fields' | translate\" id=\"custom-fields\"\r\n                            [hiddenByDefault]=\"optionCustomFields.length === 0\"\r\n                        >\r\n                            <ng-template let-optionControl=\"item\">\r\n                                <vdr-tabbed-custom-fields\r\n                                    entityName=\"ProductOption\"\r\n                                    [customFields]=\"optionCustomFields\"\r\n                                    [compact]=\"true\"\r\n                                    [customFieldsFormGroup]=\"optionControl.get('customFields')\"\r\n                                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                ></vdr-tabbed-custom-fields>\r\n                            </ng-template>\r\n                        </vdr-dt2-column>\r\n                    </vdr-data-table-2>\r\n                </vdr-card>\r\n            </div>\r\n        </form>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormArray, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    GetProductVariantOptionsQuery,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    PermissionsService,\r\n    ProductOptionFragment,\r\n    ProductOptionGroupFragment,\r\n    ServerConfigService,\r\n    TranslationOf,\r\n    UpdateProductOptionGroupInput,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\r\nimport { map, mergeMap, take, tap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\n\r\ntype ProductWithOptions = NonNullable<GetProductVariantOptionsQuery['product']>;\r\n\r\n@Component({\r\n    selector: 'vdr-product-options-editor',\r\n    templateUrl: './product-options-editor.component.html',\r\n    styleUrls: ['./product-options-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductOptionsEditorComponent extends BaseDetailComponent<ProductWithOptions> implements OnInit {\r\n    detailForm: UntypedFormGroup;\r\n    optionGroups$: Observable<ProductWithOptions['optionGroups']>;\r\n    languageCode$: Observable<LanguageCode>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    optionGroupCustomFields: CustomFieldConfig[];\r\n    optionCustomFields: CustomFieldConfig[];\r\n    autoUpdateVariantNames = true;\r\n    paginationSettings: { [groupId: string]: { currentPage: number; itemsPerPage: number } } = {};\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected serverConfigService: ServerConfigService,\r\n        protected dataService: DataService,\r\n        protected permissionsService: PermissionsService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: UntypedFormBuilder,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService, permissionsService);\r\n        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.optionGroups$ = this.route.snapshot.data.entity.pipe(\r\n            map((product: ProductWithOptions) => product.optionGroups),\r\n            tap((optionGroups: ProductWithOptions['optionGroups']) => {\r\n                for (const group of optionGroups) {\r\n                    this.paginationSettings[group.id] = {\r\n                        currentPage: 1,\r\n                        itemsPerPage: 10,\r\n                    };\r\n                }\r\n            }),\r\n        );\r\n        this.detailForm = new UntypedFormGroup({\r\n            optionGroups: new UntypedFormArray([]),\r\n        });\r\n        super.init();\r\n    }\r\n\r\n    getOptionGroups(): UntypedFormGroup[] {\r\n        const optionGroups = this.detailForm.get('optionGroups');\r\n        return (optionGroups as UntypedFormArray).controls as UntypedFormGroup[];\r\n    }\r\n\r\n    getOptions(optionGroup: UntypedFormGroup): UntypedFormGroup[] {\r\n        const options = optionGroup.get('options');\r\n        return (options as UntypedFormArray).controls as UntypedFormGroup[];\r\n    }\r\n\r\n    save() {\r\n        if (this.detailForm.invalid || this.detailForm.pristine) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product!);\r\n        combineLatest(this.entity$, this.languageCode$, $product)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([{ optionGroups }, languageCode, product]) => {\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n                    const updatedProductOptionInputs: UpdateProductOptionInput[] = [];\r\n                    for (const optionGroupForm of this.getOptionGroups()) {\r\n                        if (optionGroupForm.dirty) {\r\n                            const optionGroupEntity = optionGroups.find(\r\n                                og => og.id === optionGroupForm.value.id,\r\n                            );\r\n                            if (optionGroupEntity) {\r\n                                const input = this.getUpdatedOptionGroup(\r\n                                    optionGroupEntity,\r\n                                    optionGroupForm,\r\n                                    languageCode,\r\n                                );\r\n                                updateOperations.push(\r\n                                    this.dataService.product.updateProductOptionGroup(input),\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        for (const optionForm of this.getOptions(optionGroupForm)) {\r\n                            if (optionForm.dirty) {\r\n                                const optionGroup = optionGroups\r\n                                    .find(og => og.id === optionGroupForm.value.id)\r\n                                    ?.options.find(o => o.id === optionForm.value.id);\r\n                                if (optionGroup) {\r\n                                    const input = this.getUpdatedOption(\r\n                                        optionGroup,\r\n                                        optionForm,\r\n                                        languageCode,\r\n                                    );\r\n                                    updatedProductOptionInputs.push(input);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (updatedProductOptionInputs.length) {\r\n                        updateOperations.push(\r\n                            this.productDetailService.updateProductOptions(\r\n                                updatedProductOptionInputs,\r\n                                this.autoUpdateVariantNames,\r\n                                product,\r\n                                languageCode,\r\n                            ),\r\n                        );\r\n                    }\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private getUpdatedOptionGroup(\r\n        optionGroup: ProductOptionGroupFragment,\r\n        optionGroupFormGroup: UntypedFormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionGroupInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: optionGroup,\r\n            updatedFields: optionGroupFormGroup.value,\r\n            customFieldConfig: this.optionGroupCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: optionGroup.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    private getUpdatedOption(\r\n        option: ProductOptionFragment,\r\n        optionFormGroup: UntypedFormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: option,\r\n            updatedFields: optionFormGroup.value,\r\n            customFieldConfig: this.optionCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: option.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    protected setFormValues(entity: ProductWithOptions, languageCode: LanguageCode): void {\r\n        const groupsForm = this.detailForm.get('optionGroups') as UntypedFormArray;\r\n        for (const optionGroup of entity.optionGroups) {\r\n            const groupTranslation = findTranslation(optionGroup, languageCode);\r\n\r\n            const groupForm = this.setOptionGroupForm(optionGroup, groupsForm, groupTranslation);\r\n            this.setCustomFieldsForm(this.optionGroupCustomFields, groupForm, optionGroup, groupTranslation);\r\n\r\n            let optionsForm = groupForm.get('options') as UntypedFormArray;\r\n            if (!optionsForm) {\r\n                optionsForm = this.formBuilder.array([]);\r\n                groupForm.addControl('options', optionsForm);\r\n            }\r\n            for (const option of optionGroup.options) {\r\n                const optionTranslation = findTranslation(option, languageCode);\r\n                const optionForm = this.setOptionForm(option, optionsForm, optionTranslation);\r\n\r\n                this.setCustomFieldsForm(this.optionCustomFields, optionForm, option, optionTranslation);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setCustomFieldsForm<\r\n        T extends ProductWithOptions['optionGroups'][0] | ProductWithOptions['optionGroups'][0]['options'][0],\r\n    >(\r\n        customFields: CustomFieldConfig[],\r\n        formGroup: UntypedFormGroup,\r\n        entity: T,\r\n        currentTranslation?: TranslationOf<T>,\r\n    ) {\r\n        if (customFields.length) {\r\n            let customValueFieldsGroup = formGroup.get(['customFields']);\r\n            if (!customValueFieldsGroup) {\r\n                customValueFieldsGroup = this.formBuilder.group(\r\n                    customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                );\r\n                formGroup.addControl('customFields', customValueFieldsGroup);\r\n            }\r\n            this.setCustomFieldFormValues(customFields, customValueFieldsGroup, entity, currentTranslation);\r\n        }\r\n    }\r\n\r\n    protected setOptionGroupForm(\r\n        entity: ProductWithOptions['optionGroups'][0],\r\n        groupsForm: UntypedFormArray,\r\n        currentTranslation?: TranslationOf<ProductWithOptions['optionGroups'][0]>,\r\n    ) {\r\n        const group = {\r\n            id: entity.id,\r\n            createdAt: entity.createdAt,\r\n            updatedAt: entity.updatedAt,\r\n            code: entity.code,\r\n            name: currentTranslation?.name ?? '',\r\n        };\r\n        let groupForm = groupsForm.controls.find(control => control.value.id === entity.id) as\r\n            | UntypedFormGroup\r\n            | undefined;\r\n        if (groupForm) {\r\n            groupForm.get('id')?.setValue(group.id);\r\n            groupForm.get('code')?.setValue(group.code);\r\n            groupForm.get('name')?.setValue(group.name);\r\n            groupForm.get('createdAt')?.setValue(group.createdAt);\r\n            groupForm.get('updatedAt')?.setValue(group.updatedAt);\r\n        } else {\r\n            groupForm = this.formBuilder.group(group);\r\n            groupsForm.push(groupForm);\r\n        }\r\n        return groupForm;\r\n    }\r\n\r\n    protected setOptionForm(\r\n        entity: ProductWithOptions['optionGroups'][0]['options'][0],\r\n        optionsForm: UntypedFormArray,\r\n        currentTranslation?: TranslationOf<ProductWithOptions['optionGroups'][0]['options'][0]>,\r\n    ) {\r\n        const group = {\r\n            id: entity.id,\r\n            createdAt: entity.createdAt,\r\n            updatedAt: entity.updatedAt,\r\n            code: entity.code,\r\n            name: currentTranslation?.name ?? '',\r\n        };\r\n        let optionForm = optionsForm.controls.find(control => control.value.id === entity.id) as\r\n            | UntypedFormGroup\r\n            | undefined;\r\n        if (optionForm) {\r\n            optionForm.get('id')?.setValue(group.id);\r\n            optionForm.get('code')?.setValue(group.code);\r\n            optionForm.get('name')?.setValue(group.name);\r\n            optionForm.get('createdAt')?.setValue(group.createdAt);\r\n            optionForm.get('updatedAt')?.setValue(group.updatedAt);\r\n        } else {\r\n            optionForm = this.formBuilder.group(group);\r\n            optionsForm.push(optionForm);\r\n        }\r\n        return optionForm;\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.create-product-option-group' | translate }}\r\n</ng-template>\r\n<div class=\"form-grid\" [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n        />\r\n    </vdr-form-field>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport {\r\n    CreateProductOptionGroupInput,\r\n    Dialog,\r\n    findTranslation,\r\n    GetProductVariantOptionsQuery,\r\n    LanguageCode,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-create-product-option-group-dialog',\r\n    templateUrl: './create-product-option-group-dialog.component.html',\r\n    styleUrls: ['./create-product-option-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CreateProductOptionGroupDialogComponent implements Dialog<CreateProductOptionGroupInput> {\r\n    resolveWith: (result?: CreateProductOptionGroupInput) => void;\r\n    languageCode: LanguageCode;\r\n    form = this.formBuilder.group({\r\n        name: ['', Validators.required],\r\n        code: ['', Validators.required],\r\n    });\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    updateCode() {\r\n        const nameControl = this.form.get('name');\r\n        const codeControl = this.form.get('code');\r\n        if (nameControl && codeControl && codeControl.pristine) {\r\n            codeControl.setValue(normalizeString(`${nameControl.value}`, '-'));\r\n        }\r\n    }\r\n\r\n    confirm() {\r\n        const { name, code } = this.form.value;\r\n        if (!name || !code) {\r\n            return;\r\n        }\r\n        this.resolveWith({\r\n            code,\r\n            options: [],\r\n            translations: [{ languageCode: this.languageCode, name }],\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.create-product-variant' | translate }}\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <div formGroupName=\"options\" class=\"form-grid\">\r\n        <vdr-form-field [label]=\"optionGroup.name\" *ngFor=\"let optionGroup of product.optionGroups\">\r\n            <ng-select [items]=\"optionGroup.options\" [formControlName]=\"optionGroup.code\" bindLabel=\"name\"\r\n                bindValue=\"id\" appendTo=\"body\">\r\n            </ng-select>\r\n        </vdr-form-field>\r\n        <clr-alert *ngIf=\"product.optionGroups.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\"\r\n            class=\"form-grid-span\">\r\n            <clr-alert-item>\r\n                <span class=\"alert-text\">\r\n                    {{ 'catalog.cannot-create-variants-without-options' | translate }}\r\n                </span>\r\n            </clr-alert-item>\r\n        </clr-alert>\r\n    </div>\r\n    <div *ngIf=\"existingVariant\" class=\"mt-2\">\r\n        <clr-alert clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\r\n            <clr-alert-item>\r\n                <span class=\"alert-text\">\r\n                    {{ 'catalog.product-variant-exists' | translate }}: {{ existingVariant.name }} ({{\r\n                    existingVariant.sku\r\n                    }})\r\n                </span>\r\n            </clr-alert-item>\r\n        </clr-alert>\r\n    </div>\r\n    <div class=\"form-grid mt-2\">\r\n        <vdr-form-field [label]=\"'common.name' | translate\">\r\n            <input type=\"text\" formControlName=\"name\" />\r\n        </vdr-form-field>\r\n        <vdr-form-field [label]=\"'catalog.sku' | translate\">\r\n            <input type=\"text\" formControlName=\"sku\" />\r\n        </vdr-form-field>\r\n        <vdr-form-field [label]=\"'catalog.price' | translate\">\r\n            <vdr-currency-input name=\"price\" [currencyCode]=\"currencyCode\" formControlName=\"price\" />\r\n        </vdr-form-field>\r\n    </div>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\"\r\n        [disabled]=\"form.invalid || existingVariant || product.optionGroups.length === 0\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormRecord, Validators } from '@angular/forms';\r\nimport {\r\n    CreateProductVariantInput,\r\n    CurrencyCode,\r\n    Dialog,\r\n    GetProductVariantOptionsQuery,\r\n} from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-create-product-variant-dialog',\r\n    templateUrl: './create-product-variant-dialog.component.html',\r\n    styleUrls: ['./create-product-variant-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CreateProductVariantDialogComponent implements Dialog<CreateProductVariantInput>, OnInit {\r\n    resolveWith: (result?: CreateProductVariantInput) => void;\r\n    product: NonNullable<GetProductVariantOptionsQuery['product']>;\r\n    form = this.formBuilder.group({\r\n        name: ['', Validators.required],\r\n        sku: [''],\r\n        price: [''],\r\n        options: this.formBuilder.record<string>({}),\r\n    });\r\n    existingVariant: NonNullable<GetProductVariantOptionsQuery['product']>['variants'][number] | undefined;\r\n    currencyCode: CurrencyCode;\r\n\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n        this.currencyCode = this.product.variants[0]?.currencyCode;\r\n        for (const optionGroup of this.product.optionGroups) {\r\n            (this.form.get('options') as FormRecord).addControl(\r\n                optionGroup.code,\r\n                new FormControl('', Validators.required),\r\n            );\r\n        }\r\n        const optionsRecord = this.form.get('options') as FormRecord;\r\n        optionsRecord.valueChanges.subscribe(value => {\r\n            const nameControl = this.form.get('name');\r\n            const allNull = Object.values(value).every(v => v == null);\r\n            if (!allNull && value && nameControl && !nameControl.dirty) {\r\n                const name = Object.entries(value)\r\n                    .map(\r\n                        ([groupCode, optionId]) =>\r\n                            this.product.optionGroups\r\n                                .find(og => og.code === groupCode)\r\n                                ?.options.find(o => o.id === optionId)?.name,\r\n                    )\r\n                    .join(' ');\r\n                nameControl.setValue(`${this.product.name} ${name}`);\r\n            }\r\n            const allSelected = Object.values(value).every(v => v != null);\r\n            if (allSelected) {\r\n                this.existingVariant = this.product.variants.find(v =>\r\n                    Object.entries(value).every(\r\n                        ([groupCode, optionId]) =>\r\n                            v.options.find(o => o.groupId === this.getGroupIdFromCode(groupCode))?.id ===\r\n                            optionId,\r\n                    ),\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    confirm() {\r\n        const { name, sku, options, price } = this.form.value;\r\n        if (!name || !options || price == null) {\r\n            return;\r\n        }\r\n\r\n        const optionIds = Object.values(options).filter(notNullOrUndefined);\r\n        this.resolveWith({\r\n            productId: this.product.id,\r\n            sku: sku || '',\r\n            price: Number(price),\r\n            optionIds,\r\n            translations: [\r\n                {\r\n                    languageCode: this.product.languageCode,\r\n                    name,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getGroupCodeFromId(id: string): string {\r\n        return this.product.optionGroups.find(og => og.id === id)?.code ?? '';\r\n    }\r\n\r\n    private getGroupIdFromCode(code: string): string {\r\n        return this.product.optionGroups.find(og => og.code === code)?.id ?? '';\r\n    }\r\n}\r\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\r\n    <div class=\"chips\" *ngIf=\"0 < optionValues.length\">\r\n        <vdr-chip\r\n            *ngFor=\"let option of optionValues; last as isLast; index as i\"\r\n            [icon]=\"option.locked ? 'lock' : 'times'\"\r\n            [class.selected]=\"isLast && lastSelected\"\r\n            [class.locked]=\"option.locked\"\r\n            [colorFrom]=\"groupName\"\r\n            (iconClick)=\"removeOption(option)\"\r\n        >\r\n            <span [hidden]=\"editingIndex !== i\">\r\n                <input\r\n                    #editNameInput\r\n                    type=\"text\"\r\n                    [ngModel]=\"option.name\"\r\n                    (blur)=\"updateOption(i, $event)\"\r\n                    (click)=\"$event.cancelBubble = true\"\r\n                />\r\n            </span>\r\n            <span\r\n                class=\"option-name\"\r\n                [class.editable]=\"!option.locked && !option.id\"\r\n                (click)=\"editName(i, $event)\" [hidden]=\"editingIndex === i\">{{ option.name }}</span>\r\n        </vdr-chip>\r\n    </div>\r\n    <textarea\r\n        #textArea\r\n        (keyup)=\"handleKey($event)\"\r\n        (focus)=\"isFocussed = true\"\r\n        (blur)=\"handleBlur()\"\r\n        [(ngModel)]=\"input\"\r\n        [disabled]=\"disabled\"\r\n    ></textarea>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    forwardRef,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    Provider,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => OptionValueInputComponent),\r\n    multi: true,\r\n};\r\n\r\ninterface Option {\r\n    id?: string;\r\n    name: string;\r\n    locked: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-option-value-input',\r\n    templateUrl: './option-value-input.component.html',\r\n    styleUrls: ['./option-value-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\r\n})\r\nexport class OptionValueInputComponent implements ControlValueAccessor {\r\n    @Input() groupName = '';\r\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\r\n    @ViewChildren('editNameInput', { read: ElementRef }) nameInputs: QueryList<ElementRef>;\r\n    @Input() options: Option[];\r\n    @Output() add = new EventEmitter<Option>();\r\n    @Output() remove = new EventEmitter<Option>();\r\n    @Output() edit = new EventEmitter<{ index: number; option: Option }>();\r\n    @Input() disabled = false;\r\n    input = '';\r\n    isFocussed = false;\r\n    lastSelected = false;\r\n    formValue: Option[];\r\n    editingIndex = -1;\r\n    onChangeFn: (value: any) => void;\r\n    onTouchFn: (value: any) => void;\r\n\r\n    get optionValues(): Option[] {\r\n        return this.formValue ?? this.options ?? [];\r\n    }\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchFn = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.formValue = obj || [];\r\n    }\r\n\r\n    focus() {\r\n        this.textArea.nativeElement.focus();\r\n    }\r\n\r\n    editName(index: number, event: MouseEvent) {\r\n        const optionValue = this.optionValues[index];\r\n        if (!optionValue.locked && !optionValue.id) {\r\n            event.cancelBubble = true;\r\n            this.editingIndex = index;\r\n            const input = this.nameInputs.get(index)?.nativeElement;\r\n            setTimeout(() => input?.focus());\r\n        }\r\n    }\r\n\r\n    updateOption(index: number, event: InputEvent) {\r\n        const optionValue = this.optionValues[index];\r\n        const newName = (event.target as HTMLInputElement).value;\r\n        if (optionValue) {\r\n            if (newName) {\r\n                optionValue.name = newName;\r\n                this.edit.emit({ index, option: optionValue });\r\n            }\r\n            this.editingIndex = -1;\r\n        }\r\n    }\r\n\r\n    removeOption(option: Option) {\r\n        if (!option.locked) {\r\n            if (this.formValue) {\r\n                this.formValue = this.formValue?.filter(o => o.name !== option.name);\r\n                this.onChangeFn(this.formValue);\r\n            } else {\r\n                this.remove.emit(option);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKey(event: KeyboardEvent) {\r\n        switch (event.key) {\r\n            case ',':\r\n            case 'Enter':\r\n                this.addOptionValue();\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (this.lastSelected) {\r\n                    this.removeLastOption();\r\n                    this.lastSelected = false;\r\n                } else if (this.input === '') {\r\n                    this.lastSelected = true;\r\n                }\r\n                break;\r\n            default:\r\n                this.lastSelected = false;\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        this.isFocussed = false;\r\n        this.addOptionValue();\r\n    }\r\n\r\n    private addOptionValue() {\r\n        const options = this.parseInputIntoOptions(this.input).filter(option => {\r\n            // do not add an option with the same name\r\n            // as an existing option\r\n            const existing = this.options ?? this.formValue;\r\n            return !existing?.find(o => o?.name === option.name);\r\n        });\r\n        if (!this.formValue && this.options) {\r\n            for (const option of options) {\r\n                this.add.emit(option);\r\n            }\r\n        } else {\r\n            this.formValue = unique([...this.formValue, ...options]);\r\n            this.onChangeFn(this.formValue);\r\n        }\r\n        this.input = '';\r\n    }\r\n\r\n    private parseInputIntoOptions(input: string): Option[] {\r\n        return input\r\n            .split(/[,\\n]/)\r\n            .map(s => s.trim())\r\n            .filter(s => s !== '')\r\n            .map(s => ({ name: s, locked: false }));\r\n    }\r\n\r\n    private removeLastOption() {\r\n        if (this.optionValues.length) {\r\n            const option = this.optionValues[this.optionValues.length - 1];\r\n            this.removeOption(option);\r\n        }\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-card>\r\n        <div *ngFor=\"let group of optionGroups; index as i\" class=\"option-groups\">\r\n            <vdr-form-field [label]=\"'catalog.option' | translate\">\r\n                <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'catalog.option-values' | translate\" class=\"flex-spacer\">\r\n                <vdr-option-value-input\r\n                    #optionValueInputComponent\r\n                    [options]=\"group.values\"\r\n                    [groupName]=\"group.name\"\r\n                    [disabled]=\"group.name === ''\"\r\n                    (add)=\"addOption(i, $event.name)\"\r\n                    (remove)=\"removeOption(i, $event)\"\r\n                ></vdr-option-value-input>\r\n            </vdr-form-field>\r\n            <div>\r\n                <button class=\"button-small mt-4\" (click)=\"removeOptionGroup(group)\">\r\n                    <clr-icon shape=\"trash\"></clr-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <button class=\"button mt-1\" (click)=\"addOptionGroup()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-product-option-group' | translate }}\r\n        </button>\r\n    </vdr-card>\r\n    <vdr-card [paddingX]=\"false\">\r\n        <div class=\"mx-3\">\r\n            <button class=\"button\" (click)=\"createNewVariant()\">\r\n                <clr-icon shape=\"plus\"></clr-icon>\r\n                {{ 'catalog.create-product-variant' | translate }}\r\n            </button>\r\n        </div>\r\n        <vdr-data-table-2\r\n            id=\"manage-product-variant-list\"\r\n            [items]=\"variants$ | async\"\r\n            [itemsPerPage]=\"itemsPerPage\"\r\n            [totalItems]=\"totalItems$ | async\"\r\n            [currentPage]=\"currentPage\"\r\n            (pageChange)=\"setPageNumber($event)\"\r\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n        >\r\n            <vdr-dt2-search\r\n                [searchTermControl]=\"searchTermControl\"\r\n                [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\r\n            />\r\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.id }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.createdAt | localeDate : 'short' }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.updatedAt | localeDate : 'short' }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.name }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.sku }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column *ngFor=\"let optionGroup of optionGroups$ | async\" [heading]=\"optionGroup.name\" [id]=\"optionGroup.code\">\r\n                <ng-template let-variant=\"item\">\r\n                    <vdr-chip\r\n                        *ngIf=\"getOption(variant, optionGroup.id) as option; else selectOption\"\r\n                        [colorFrom]=\"optionGroup.code\"\r\n                        >{{ option.name }}</vdr-chip\r\n                    >\r\n                    <ng-template #selectOption>\r\n                        <div class=\"flex center\">\r\n                            <ng-select\r\n                                [items]=\"optionGroup.options\"\r\n                                bindLabel=\"name\"\r\n                                bindValue=\"id\"\r\n                                appendTo=\"body\"\r\n                                (change)=\"setOptionToAddToVariant(variant.id, optionGroup.id, $event?.id)\"\r\n                            ></ng-select>\r\n                            <button\r\n                                class=\"button-small ml-1\"\r\n                                [class.primary]=\"!!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\r\n                                (click)=\"addOptionToVariant(variant)\"\r\n                                [disabled]=\"!optionsToAddToVariant[variant.id]?.[optionGroup.id]\"\r\n                            >\r\n                                <clr-icon shape=\"floppy\"></clr-icon>\r\n                            </button>\r\n                        </div>\r\n                    </ng-template>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.price' | translate\" id=\"price\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.price | localeCurrency : variant.currencyCode }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-variant=\"item\">\r\n                    {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.delete' | translate\" id=\"delete\" [optional]=\"false\">\r\n                <ng-template let-variant=\"item\">\r\n                    <button class=\"button-small\" (click)=\"deleteVariant(variant)\">\r\n                        <clr-icon shape=\"trash is-danger\"></clr-icon>\r\n                    </button>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n        </vdr-data-table-2>\r\n    </vdr-card>\r\n</vdr-page-block>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    DeactivateAware,\r\n    DeletionResult,\r\n    getDefaultUiLanguage,\r\n    GetProductVariantOptionsQuery,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    SelectionManager,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { map, startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { CreateProductOptionGroupDialogComponent } from '../create-product-option-group-dialog/create-product-option-group-dialog.component';\r\nimport { CreateProductVariantDialogComponent } from '../create-product-variant-dialog/create-product-variant-dialog.component';\r\n\r\nexport class GeneratedVariant {\r\n    isDefault: boolean;\r\n    options: Array<{ name: string; id?: string }>;\r\n    productVariantId?: string;\r\n    enabled: boolean;\r\n    existing: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n\r\n    constructor(config: Partial<GeneratedVariant>) {\r\n        for (const key of Object.keys(config)) {\r\n            this[key] = config[key];\r\n        }\r\n    }\r\n}\r\n\r\ninterface OptionGroupUiModel {\r\n    id?: string;\r\n    isNew: boolean;\r\n    name: string;\r\n    locked: boolean;\r\n    values: Array<{\r\n        id: string;\r\n        name: string;\r\n        locked: boolean;\r\n    }>;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-editor',\r\n    templateUrl: './product-variants-editor.component.html',\r\n    styleUrls: ['./product-variants-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\r\n    formValueChanged = false;\r\n    optionsChanged = false;\r\n    optionGroups: OptionGroupUiModel[];\r\n    product: NonNullable<GetProductVariantOptionsQuery['product']>;\r\n    variants$: Observable<NonNullable<GetProductVariantOptionsQuery['product']>['variants']>;\r\n    optionGroups$: Observable<NonNullable<GetProductVariantOptionsQuery['product']>['optionGroups']>;\r\n    totalItems$: Observable<number>;\r\n    currencyCode: CurrencyCode;\r\n    itemsPerPage = 100;\r\n    currentPage = 1;\r\n    searchTermControl = new FormControl('');\r\n    selectionManager = new SelectionManager<any>({\r\n        multiSelect: true,\r\n        itemsAreEqual: (a, b) => a.id === b.id,\r\n        additiveMode: true,\r\n    });\r\n    optionsToAddToVariant: {\r\n        [variantId: string]: { [groupId: string]: string };\r\n    } = {};\r\n    private refresh$ = new Subject<void>();\r\n    private languageCode: LanguageCode;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.languageCode =\r\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.defaultCurrencyCode;\r\n        });\r\n\r\n        const product$ = this.refresh$.pipe(\r\n            switchMap(() =>\r\n                this.dataService.product\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    .getProductVariantsOptions(this.route.parent?.snapshot.paramMap.get('id')!)\r\n                    .mapSingle(data => data.product),\r\n            ),\r\n            startWith(this.route.snapshot.data.product),\r\n        );\r\n\r\n        this.variants$ = product$.pipe(\r\n            switchMap(product =>\r\n                this.searchTermControl.valueChanges.pipe(\r\n                    startWith(''),\r\n                    map(term =>\r\n                        term\r\n                            ? product.variants.filter(v => v.name.toLowerCase().includes(term.toLowerCase()))\r\n                            : product.variants,\r\n                    ),\r\n                ),\r\n            ),\r\n        );\r\n        this.optionGroups$ = product$.pipe(map(product => product.optionGroups));\r\n        this.totalItems$ = this.variants$.pipe(map(variants => variants.length));\r\n\r\n        product$.subscribe(p => {\r\n            this.product = p;\r\n            const allUsedOptionIds = p.variants.map(v => v.options.map(option => option.id)).flat();\r\n            const allUsedOptionGroupIds = p.variants.map(v => v.options.map(option => option.groupId)).flat();\r\n            this.optionGroups = p.optionGroups.map(og => ({\r\n                id: og.id,\r\n                isNew: false,\r\n                name: og.name,\r\n                locked: allUsedOptionGroupIds.includes(og.id),\r\n                values: og.options.map(o => ({\r\n                    id: o.id,\r\n                    name: o.name,\r\n                    locked: allUsedOptionIds.includes(o.id),\r\n                })),\r\n            }));\r\n        });\r\n    }\r\n\r\n    setItemsPerPage(itemsPerPage: number) {\r\n        this.itemsPerPage = itemsPerPage;\r\n        this.currentPage = 1;\r\n    }\r\n\r\n    setPageNumber(page: number) {\r\n        this.currentPage = page;\r\n    }\r\n\r\n    onFormChanged(variantInfo: GeneratedVariant) {\r\n        this.formValueChanged = true;\r\n        variantInfo.enabled = true;\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return !this.formValueChanged;\r\n    }\r\n\r\n    addOptionGroup() {\r\n        this.modalService\r\n            .fromComponent(CreateProductOptionGroupDialogComponent, {\r\n                locals: {\r\n                    languageCode: this.languageCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.product.createProductOptionGroups(result).pipe(\r\n                            switchMap(({ createProductOptionGroup }) =>\r\n                                this.dataService.product.addOptionGroupToProduct({\r\n                                    optionGroupId: createProductOptionGroup.id,\r\n                                    productId: this.product.id,\r\n                                }),\r\n                            ),\r\n                        );\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'ProductOptionGroup',\r\n                });\r\n                this.refresh$.next();\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    removeOptionGroup(\r\n        optionGroup: NonNullable<GetProductVariantOptionsQuery['product']>['optionGroups'][number],\r\n    ) {\r\n        const id = optionGroup.id;\r\n        const usedByVariantsCount = this.product.variants.filter(v =>\r\n            v.options.map(o => o.groupId).includes(id),\r\n        ).length;\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-option-group'),\r\n                body: usedByVariantsCount ? _('catalog.confirm-delete-product-option-group-body') : '',\r\n                translationVars: { name: optionGroup.name, count: usedByVariantsCount },\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(val => {\r\n                    if (val) {\r\n                        return this.dataService.product.removeOptionGroupFromProduct({\r\n                            optionGroupId: id,\r\n                            productId: this.product.id,\r\n                            force: true,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(({ removeOptionGroupFromProduct }) => {\r\n                if (removeOptionGroupFromProduct.__typename === 'Product') {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                    this.refresh$.next();\r\n                } else if (removeOptionGroupFromProduct.__typename === 'ProductOptionInUseError') {\r\n                    this.notificationService.error(removeOptionGroupFromProduct.message ?? '');\r\n                }\r\n            });\r\n    }\r\n\r\n    addOption(index: number, optionName: string) {\r\n        const group = this.optionGroups[index];\r\n        if (group && group.id) {\r\n            this.dataService.product\r\n                .addOptionToGroup({\r\n                    productOptionGroupId: group.id,\r\n                    code: normalizeString(optionName, '-'),\r\n                    translations: [{ name: optionName, languageCode: this.languageCode }],\r\n                })\r\n                .subscribe(({ createProductOption }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                    this.refresh$.next();\r\n                });\r\n        }\r\n    }\r\n\r\n    removeOption(index: number, { id, name }: { id: string; name: string }) {\r\n        const optionGroup = this.optionGroups[index];\r\n        if (optionGroup) {\r\n            this.modalService\r\n                .dialog({\r\n                    title: _('catalog.confirm-delete-product-option'),\r\n                    translationVars: { name },\r\n                    buttons: [\r\n                        { type: 'secondary', label: _('common.cancel') },\r\n                        { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                    ],\r\n                })\r\n                .pipe(\r\n                    switchMap(val => {\r\n                        if (val) {\r\n                            return this.dataService.product.deleteProductOption(id);\r\n                        } else {\r\n                            return EMPTY;\r\n                        }\r\n                    }),\r\n                )\r\n                .subscribe(({ deleteProductOption }) => {\r\n                    if (deleteProductOption.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'ProductOption',\r\n                        });\r\n                        optionGroup.values = optionGroup.values.filter(v => v.id !== id);\r\n                        this.refresh$.next();\r\n                    } else {\r\n                        this.notificationService.error(deleteProductOption.message ?? '');\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    setOptionToAddToVariant(variantId: string, optionGroupId: string, optionId?: string) {\r\n        if (!this.optionsToAddToVariant[variantId]) {\r\n            this.optionsToAddToVariant[variantId] = {};\r\n        }\r\n        if (optionId) {\r\n            this.optionsToAddToVariant[variantId][optionGroupId] = optionId;\r\n        } else {\r\n            delete this.optionsToAddToVariant[variantId][optionGroupId];\r\n        }\r\n    }\r\n\r\n    addOptionToVariant(variant: NonNullable<GetProductVariantOptionsQuery['product']>['variants'][number]) {\r\n        const optionIds = [\r\n            ...variant.options.map(o => o.id),\r\n            ...Object.values(this.optionsToAddToVariant[variant.id]),\r\n        ];\r\n        this.dataService.product\r\n            .updateProductVariants([\r\n                {\r\n                    id: variant.id,\r\n                    optionIds: unique(optionIds),\r\n                },\r\n            ])\r\n            .subscribe(({ updateProductVariants }) => {\r\n                this.refresh$.next();\r\n            });\r\n    }\r\n\r\n    deleteVariant(variant: NonNullable<GetProductVariantOptionsQuery['product']>['variants'][number]) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-variant'),\r\n                translationVars: { name: variant.name },\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.productDetailService.deleteProductVariant(variant.id, this.product.id)\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.refresh$.next();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    createNewVariant() {\r\n        this.modalService\r\n            .fromComponent(CreateProductVariantDialogComponent, {\r\n                locals: {\r\n                    product: this.product,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.product.createProductVariants([result]);\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'ProductVariant',\r\n                });\r\n                this.refresh$.next();\r\n            });\r\n    }\r\n\r\n    getOption(\r\n        variant: NonNullable<GetProductVariantOptionsQuery['product']>['variants'][number],\r\n        groupId: string,\r\n    ) {\r\n        return variant.options.find(o => o.groupId === groupId);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, GetProductVariantOptionsQuery, DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptionsQuery['product']> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as const,\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                languageCode: '' as any,\r\n                optionGroups: [],\r\n                variants: [],\r\n            },\r\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    DataService,\r\n    PageComponent,\r\n    PageService,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\r\n\r\nexport const createRoutes = (pageService: PageService): Route[] => [\r\n    {\r\n        path: 'products',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'product-list',\r\n            breadcrumb: _('breadcrumb.products'),\r\n        },\r\n        children: pageService.getPageTabRoutes('product-list'),\r\n    },\r\n    {\r\n        path: 'inventory',\r\n        redirectTo: 'products',\r\n    },\r\n    {\r\n        path: 'products/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'product-detail',\r\n            breadcrumb: { label: _('breadcrumb.products'), link: ['../', 'products'] },\r\n        },\r\n        children: [\r\n            {\r\n                path: 'manage-variants',\r\n                component: ProductVariantsEditorComponent,\r\n                canDeactivate: [CanDeactivateDetailGuard],\r\n                data: {\r\n                    breadcrumb: ({ product }) => [\r\n                        {\r\n                            label: `${product.name}`,\r\n                            link: ['../'],\r\n                        },\r\n                        {\r\n                            label: _('breadcrumb.manage-variants'),\r\n                            link: ['manage-variants'],\r\n                        },\r\n                    ],\r\n                },\r\n                resolve: {\r\n                    product: (route: ActivatedRouteSnapshot) =>\r\n                        inject(DataService)\r\n                            .product.getProductVariantsOptions(route.parent?.params.id)\r\n                            .mapSingle(data => data.product),\r\n                },\r\n            },\r\n            ...pageService.getPageTabRoutes('product-detail'),\r\n        ],\r\n    },\r\n    {\r\n        path: 'products/:productId/variants/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'product-variant-detail',\r\n            breadcrumb: { label: _('breadcrumb.products'), link: ['../', 'products'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('product-variant-detail'),\r\n    },\r\n    {\r\n        path: 'products/:id/options',\r\n        component: ProductOptionsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productOptionsEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'facets',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'facet-list',\r\n            breadcrumb: _('breadcrumb.facets'),\r\n        },\r\n        children: pageService.getPageTabRoutes('facet-list'),\r\n    },\r\n    {\r\n        path: 'facets/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'facet-detail',\r\n            breadcrumb: { label: _('breadcrumb.facets'), link: ['../', 'facets'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('facet-detail'),\r\n    },\r\n    {\r\n        path: 'collections',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'collection-list',\r\n            breadcrumb: _('breadcrumb.collections'),\r\n        },\r\n        children: pageService.getPageTabRoutes('collection-list'),\r\n    },\r\n    {\r\n        path: 'collections/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'collection-detail',\r\n            breadcrumb: { label: _('breadcrumb.collections'), link: ['../', 'collections'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('collection-detail'),\r\n    },\r\n    {\r\n        path: 'assets',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'asset-list',\r\n            breadcrumb: _('breadcrumb.assets'),\r\n        },\r\n        children: pageService.getPageTabRoutes('asset-list'),\r\n    },\r\n    {\r\n        path: 'assets/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'asset-detail',\r\n            breadcrumb: { label: _('breadcrumb.assets'), link: ['../', 'assets'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('asset-detail'),\r\n    },\r\n];\r\n\r\nexport function productOptionsEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => [\r\n            {\r\n                label: _('breadcrumb.products'),\r\n                link: ['../', 'products'],\r\n            },\r\n            {\r\n                label: `${entity.name}`,\r\n                link: ['../', 'products', params.id],\r\n            },\r\n            {\r\n                label: _('breadcrumb.product-options'),\r\n                link: ['options'],\r\n            },\r\n        ]),\r\n    );\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\r\n\r\n<vdr-facet-value-selector\r\n    (selectedValuesChange)=\"selectedValues = $event\"\r\n></vdr-facet-value-selector>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"selectValues()\"\r\n        [disabled]=\"selectedValues.length === 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.add-facets' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n    Dialog,\r\n    FacetValue,\r\n    FacetValueSelectorComponent,\r\n    FacetWithValuesFragment,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-apply-facet-dialog',\r\n    templateUrl: './apply-facet-dialog.component.html',\r\n    styleUrls: ['./apply-facet-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\r\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\r\n    resolveWith: (result?: FacetValue[]) => void;\r\n    selectedValues: FacetValue[] = [];\r\n    // Provided by caller\r\n    facets: FacetWithValuesFragment[];\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.selector.focus(), 0);\r\n    }\r\n\r\n    selectValues() {\r\n        this.resolveWith(this.selectedValues);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left></vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"asset-detail\" />\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu locationId=\"asset-detail\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-page-block>\r\n    <vdr-asset-preview\r\n        [asset]=\"entity$ | async\"\r\n        [editable]=\"true\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsForm]=\"detailForm.get('customFields')\"\r\n        (assetChange)=\"onAssetChange($event)\"\r\n    />\r\n</vdr-page-block>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, UntypedFormBuilder } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    ASSET_FRAGMENT,\r\n    AssetDetailQueryDocument,\r\n    AssetDetailQueryQuery,\r\n    DataService,\r\n    getCustomFieldsDefaults,\r\n    LanguageCode,\r\n    NotificationService,\r\n    TAG_FRAGMENT,\r\n    TypedBaseDetailComponent,\r\n} from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\n\r\nexport const ASSET_DETAIL_QUERY = gql`\r\n    query AssetDetailQuery($id: ID!) {\r\n        asset(id: $id) {\r\n            ...Asset\r\n            tags {\r\n                ...Tag\r\n            }\r\n        }\r\n    }\r\n    ${ASSET_FRAGMENT}\r\n    ${TAG_FRAGMENT}\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-asset-detail',\r\n    templateUrl: './asset-detail.component.html',\r\n    styleUrls: ['./asset-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetDetailComponent\r\n    extends TypedBaseDetailComponent<typeof AssetDetailQueryDocument, 'asset'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    readonly customFields = this.getCustomFieldConfig('Asset');\r\n    detailForm = new FormGroup({\r\n        name: new FormControl(''),\r\n        tags: new FormControl([] as string[]),\r\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n    });\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private formBuilder: UntypedFormBuilder,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\r\n        this.detailForm.get('name')?.setValue(event.name);\r\n        this.detailForm.get('tags')?.setValue(event.tags);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    save() {\r\n        this.dataService.product\r\n            .updateAsset({\r\n                id: this.id,\r\n                name: this.detailForm.value.name,\r\n                tags: this.detailForm.value.tags,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Asset',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(\r\n        entity: NonNullable<AssetDetailQueryQuery['asset']>,\r\n        languageCode: LanguageCode,\r\n    ): void {\r\n        this.detailForm.get('name')?.setValue(entity.name);\r\n        this.detailForm.get('tags')?.setValue(entity.tags.map(t => t.id));\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetAssetListQuery,\r\n    GetAssetListQueryVariables,\r\n    ItemOf,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n    TagFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-list',\r\n    templateUrl: './asset-list.component.html',\r\n    styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent\r\n    extends BaseListComponent<\r\n        GetAssetListQuery,\r\n        ItemOf<GetAssetListQuery, 'assets'>,\r\n        GetAssetListQueryVariables\r\n    >\r\n    implements OnInit\r\n{\r\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\r\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\r\n    uploading = false;\r\n    allTags$: Observable<TagFragment[]>;\r\n    paginationConfig$: Observable<PaginationInstance>;\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.product.getAssetList(...args).refetchOnChannelChange(),\r\n            data => data.assets,\r\n            (skip, take) => {\r\n                const searchTerm = this.searchTerm$.value;\r\n                const tags = this.filterByTags$.value?.map(t => t.value);\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        ...(searchTerm\r\n                            ? {\r\n                                  filter: {\r\n                                      name: { contains: searchTerm },\r\n                                  },\r\n                              }\r\n                            : {}),\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                        tags,\r\n                        tagsOperator: LogicalOperator.AND,\r\n                    },\r\n                };\r\n            },\r\n            { take: 25, skip: 0 },\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\r\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\r\n        );\r\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n\r\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\r\n    }\r\n\r\n    filesSelected(files: File[]) {\r\n        if (files.length) {\r\n            this.uploading = true;\r\n            this.dataService.product\r\n                .createAssets(files)\r\n                .pipe(finalize(() => (this.uploading = false)))\r\n                .subscribe(({ createAssets }) => {\r\n                    let successCount = 0;\r\n                    for (const result of createAssets) {\r\n                        switch (result.__typename) {\r\n                            case 'Asset':\r\n                                successCount++;\r\n                                break;\r\n                            case 'MimeTypeError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (0 < successCount) {\r\n                        super.refresh();\r\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\r\n                            count: successCount,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAssets(assets: Asset[]) {\r\n        this.showModalAndDelete(assets.map(a => a.id))\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(\r\n                            assets.map(a => a.id),\r\n                            response.message || '',\r\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(assetIds: string[], message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-assets'),\r\n                translationVars: {\r\n                    count: assetIds.length,\r\n                },\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\r\n                map(res => res.deleteAssets),\r\n            );\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <div class=\"my-2\">\r\n        <vdr-asset-search-input\r\n            [tags]=\"allTags$ | async\"\r\n            (searchTermChange)=\"searchTerm$.next($event)\"\r\n            (tagsChange)=\"filterByTags$.next($event)\"\r\n        >\r\n            <vdr-asset-file-input\r\n                (selectFiles)=\"filesSelected($event)\"\r\n                [uploading]=\"uploading\"\r\n                dropZoneTarget=\".content-area\"\r\n            ></vdr-asset-file-input>\r\n        </vdr-asset-search-input>\r\n    </div>\r\n    <vdr-asset-gallery\r\n        [assets]=\"(items$ | async)! | paginate : (paginationConfig$ | async) || {}\"\r\n        [multiSelect]=\"true\"\r\n        [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\r\n        (deleteAssets)=\"deleteAssets($event)\"\r\n    ></vdr-asset-gallery>\r\n\r\n    <div class=\"paging-controls\">\r\n        <vdr-items-per-page-controls\r\n            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n        ></vdr-items-per-page-controls>\r\n\r\n        <vdr-pagination-controls\r\n            [currentPage]=\"currentPage$ | async\"\r\n            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n            [totalItems]=\"totalItems$ | async\"\r\n            (pageChange)=\"setPageNumber($event)\"\r\n        ></vdr-pagination-controls>\r\n    </div>\r\n</vdr-page-block>\r\n","<ng-template vdrDialogTitle>\r\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\r\n        'catalog.assign-variants-to-channel' | translate\r\n    }}</ng-container>\r\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <clr-input-container>\r\n        <label>{{ 'common.channel' | translate }}</label>\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"false\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [disableChannelIds]=\"currentChannelIds\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </clr-input-container>\r\n    <div class=\"flex-spacer\"></div>\r\n    <clr-input-container>\r\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\r\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\r\n    </clr-input-container>\r\n</div>\r\n\r\n<div class=\"channel-price-preview\">\r\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.name' | translate }}</th>\r\n                <th>\r\n                    {{\r\n                        'catalog.price-in-channel'\r\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\r\n                    }}\r\n                </th>\r\n                <th>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\r\n                    </ng-template>\r\n                    <ng-template #noSelection>\r\n                        {{ 'catalog.no-channel-selected' | translate }}\r\n                    </ng-template>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\r\n                <td>{{ row.name }}</td>\r\n                <td>{{ row.price | localeCurrency: currentChannel?.defaultCurrencyCode }}</td>\r\n                <td>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\r\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.defaultCurrencyCode }}\r\n                    </ng-template>\r\n                    <ng-template #noChannelSelected> - </ng-template>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\r\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'catalog.no-channel-selected' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    Dialog,\r\n    GetChannelsQuery,\r\n    ItemOf,\r\n    LogicalOperator,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, from, lastValueFrom, Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\n\r\ntype Channel = ItemOf<GetChannelsQuery, 'channels'>;\r\n\r\n@Component({\r\n    selector: 'vdr-assign-products-to-channel-dialog',\r\n    templateUrl: './assign-products-to-channel-dialog.component.html',\r\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\r\n    selectedChannel: Channel | null | undefined;\r\n    currentChannel: Channel;\r\n    availableChannels: Channel[];\r\n    resolveWith: (result?: any) => void;\r\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\r\n    priceFactorControl = new UntypedFormControl(1);\r\n    selectedChannelIdControl = new UntypedFormControl();\r\n\r\n    // assigned by ModalService.fromComponent() call\r\n    productIds: string[];\r\n    productVariantIds: string[] | undefined;\r\n    currentChannelIds: string[];\r\n\r\n    get isProductVariantMode(): boolean {\r\n        return this.productVariantIds != null;\r\n    }\r\n\r\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\r\n\r\n    ngOnInit() {\r\n        const activeChannelId$ = this.dataService.client\r\n            .userStatus()\r\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\r\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\r\n\r\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.currentChannel = channels.items.find(c => c.id === activeChannelId)!;\r\n            this.availableChannels = channels.items;\r\n        });\r\n\r\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\r\n            this.selectChannel(ids);\r\n        });\r\n\r\n        this.variantsPreview$ = combineLatest(\r\n            from(this.getTopVariants(10)),\r\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\r\n        ).pipe(\r\n            map(([variants, factor]) =>\r\n                variants.map(v => ({\r\n                    id: v.id,\r\n                    name: v.name,\r\n                    price: v.price,\r\n                    pricePreview: v.price * +factor,\r\n                })),\r\n            ),\r\n        );\r\n    }\r\n\r\n    selectChannel(channelIds: string[]) {\r\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\r\n    }\r\n\r\n    assign() {\r\n        const selectedChannel = this.selectedChannel;\r\n        if (selectedChannel) {\r\n            if (!this.isProductVariantMode) {\r\n                this.dataService.product\r\n                    .assignProductsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productIds: this.productIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                            count: this.productIds.length,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            } else if (this.productVariantIds) {\r\n                this.dataService.product\r\n                    .assignVariantsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productVariantIds: this.productVariantIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                            count: this.productVariantIds!.length,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private async getTopVariants(take: number) {\r\n        return (\r\n            await lastValueFrom(\r\n                this.dataService.product.getProductVariants({\r\n                    filterOperator: LogicalOperator.OR,\r\n                    filter: {\r\n                        productId: { in: this.productIds },\r\n                        id: { in: this.productVariantIds },\r\n                    },\r\n                    take,\r\n                }).single$,\r\n            )\r\n        ).productVariants.items;\r\n    }\r\n}\r\n","import { gql } from 'apollo-angular';\r\n\r\nexport const GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS = gql`\r\n    query GetProductsWithFacetValuesByIds($ids: [String!]!) {\r\n        products(options: { filter: { id: { in: $ids } } }) {\r\n            items {\r\n                id\r\n                name\r\n                facetValues {\r\n                    id\r\n                    name\r\n                    code\r\n                    facet {\r\n                        id\r\n                        name\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_VARIANTS_WITH_FACET_VALUES_BY_IDS = gql`\r\n    query GetVariantsWithFacetValuesByIds($ids: [String!]!) {\r\n        productVariants(options: { filter: { id: { in: $ids } } }) {\r\n            items {\r\n                id\r\n                name\r\n                sku\r\n                facetValues {\r\n                    id\r\n                    name\r\n                    code\r\n                    facet {\r\n                        id\r\n                        name\r\n                        code\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PRODUCTS_BULK = gql`\r\n    mutation UpdateProductsBulk($input: [UpdateProductInput!]!) {\r\n        updateProducts(input: $input) {\r\n            id\r\n            name\r\n            facetValues {\r\n                id\r\n                name\r\n                code\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_VARIANTS_BULK = gql`\r\n    mutation UpdateVariantsBulk($input: [UpdateProductVariantInput!]!) {\r\n        updateProductVariants(input: $input) {\r\n            id\r\n            name\r\n            facetValues {\r\n                id\r\n                name\r\n                code\r\n            }\r\n        }\r\n    }\r\n`;\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.edit-facet-values' | translate }}\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <div class=\"flex center\">\r\n        <div class=\"mr2\">\r\n            {{ 'catalog.add-facet-value' | translate }}\r\n        </div>\r\n        <vdr-facet-value-selector\r\n            (selectedValuesChange)=\"selectedValues = $event\"\r\n        ></vdr-facet-value-selector>\r\n    </div>\r\n</div>\r\n\r\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\r\n    <tbody>\r\n        <tr *ngFor=\"let item of items\">\r\n            <td class=\"left align-middle\">\r\n                <div>{{ item.name }}</div>\r\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\r\n            </td>\r\n            <td class=\"left\">\r\n                <vdr-facet-value-chip\r\n                    *ngFor=\"let facetValue of item.facetValues\"\r\n                    [facetValue]=\"facetValue\"\r\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\r\n                ></vdr-facet-value-chip>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #placeholder>\r\n    <div class=\"loading\">\r\n    <clr-spinner></clr-spinner>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"addFacetValues()\"\r\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n    DataService,\r\n    Dialog,\r\n    FacetWithValuesFragment,\r\n    GetProductsWithFacetValuesByIdsQuery,\r\n    GetProductsWithFacetValuesByIdsQueryVariables,\r\n    GetVariantsWithFacetValuesByIdsQuery,\r\n    UpdateProductsBulkMutation,\r\n    UpdateProductsBulkMutationVariables,\r\n    UpdateVariantsBulkMutation,\r\n    UpdateVariantsBulkMutationVariables,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport {\r\n    GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS,\r\n    GET_VARIANTS_WITH_FACET_VALUES_BY_IDS,\r\n    UPDATE_PRODUCTS_BULK,\r\n    UPDATE_VARIANTS_BULK,\r\n} from './bulk-add-facet-values-dialog.graphql';\r\n\r\ninterface ProductOrVariant {\r\n    id: string;\r\n    name: string;\r\n    sku?: string;\r\n    facetValues: Array<{\r\n        id: string;\r\n        name: string;\r\n        code: string;\r\n        facet: Array<{\r\n            id: string;\r\n            name: string;\r\n            code: string;\r\n        }>;\r\n    }>;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-bulk-add-facet-values-dialog',\r\n    templateUrl: './bulk-add-facet-values-dialog.component.html',\r\n    styleUrls: ['./bulk-add-facet-values-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BulkAddFacetValuesDialogComponent\r\n    implements OnInit, OnDestroy, Dialog<FacetWithValuesFragment[]>\r\n{\r\n    resolveWith: (result?: FacetWithValuesFragment[]) => void;\r\n    /* provided by call to ModalService */\r\n    mode: 'product' | 'variant' = 'product';\r\n    ids?: string[];\r\n    state: 'loading' | 'ready' | 'saving' = 'loading';\r\n\r\n    selectedValues: FacetWithValuesFragment[] = [];\r\n    items: ProductOrVariant[] = [];\r\n    facetValuesRemoved = false;\r\n    private subscription: Subscription;\r\n    constructor(private dataService: DataService, private changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        const fetchData$: Observable<any> =\r\n            this.mode === 'product'\r\n                ? this.dataService\r\n                      .query<\r\n                          GetProductsWithFacetValuesByIdsQuery,\r\n                          GetProductsWithFacetValuesByIdsQueryVariables\r\n                      >(GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, {\r\n                          ids: this.ids ?? [],\r\n                      })\r\n                      .mapSingle(({ products }) =>\r\n                          products.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\r\n                      )\r\n                : this.dataService\r\n                      .query<\r\n                          GetVariantsWithFacetValuesByIdsQuery,\r\n                          GetProductsWithFacetValuesByIdsQueryVariables\r\n                      >(GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, {\r\n                          ids: this.ids ?? [],\r\n                      })\r\n                      .mapSingle(({ productVariants }) =>\r\n                          productVariants.items.map(p => ({ ...p, facetValues: [...p.facetValues] })),\r\n                      );\r\n        this.subscription = fetchData$.subscribe({\r\n            next: items => {\r\n                this.items = items;\r\n                this.state = 'ready';\r\n                this.changeDetectorRef.markForCheck();\r\n            },\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription?.unsubscribe();\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    removeFacetValue(item: ProductOrVariant, facetValueId: string) {\r\n        item.facetValues = item.facetValues.filter(fv => fv.id !== facetValueId);\r\n        this.facetValuesRemoved = true;\r\n    }\r\n\r\n    addFacetValues() {\r\n        const selectedFacetValueIds = this.selectedValues.map(sv => sv.id);\r\n        this.state = 'saving';\r\n        const save$: Observable<any> =\r\n            this.mode === 'product'\r\n                ? this.dataService.mutate<UpdateProductsBulkMutation, UpdateProductsBulkMutationVariables>(\r\n                      UPDATE_PRODUCTS_BULK,\r\n                      {\r\n                          input: this.items?.map(product => ({\r\n                              id: product.id,\r\n                              facetValueIds: unique([\r\n                                  ...product.facetValues.map(fv => fv.id),\r\n                                  ...selectedFacetValueIds,\r\n                              ]),\r\n                          })),\r\n                      },\r\n                  )\r\n                : this.dataService.mutate<UpdateVariantsBulkMutation, UpdateVariantsBulkMutationVariables>(\r\n                      UPDATE_VARIANTS_BULK,\r\n                      {\r\n                          input: this.items?.map(product => ({\r\n                              id: product.id,\r\n                              facetValueIds: unique([\r\n                                  ...product.facetValues.map(fv => fv.id),\r\n                                  ...selectedFacetValueIds,\r\n                              ]),\r\n                          })),\r\n                      },\r\n                  );\r\n        return save$.subscribe(result => {\r\n            this.resolveWith(this.selectedValues);\r\n        });\r\n    }\r\n}\r\n","<div class=\"table-wrapper\">\r\n    <div class=\"progress loop\" [class.visible]=\"isLoading\"></div>\r\n    <div class=\"header-title-row\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\r\n        ></ng-container>\r\n    </div>\r\n    <vdr-data-table-2\r\n        id=\"collection-contents\"\r\n        [class.loading]=\"isLoading\"\r\n        [items]=\"contents$ | async\"\r\n        [itemsPerPage]=\"contentsItemsPerPage$ | async\"\r\n        [totalItems]=\"contentsTotalItems$ | async\"\r\n        [currentPage]=\"contentsCurrentPage$ | async\"\r\n        (pageChange)=\"setContentsPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-search\r\n            [searchTermControl]=\"filterTermControl\"\r\n            [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\r\n        />\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-variant=\"item\">\r\n                {{ variant.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-variant=\"item\">\r\n                {{ variant.createdAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.updated-at' | translate\" id=\"updated-at\" [hiddenByDefault]=\"true\">\r\n            <ng-template let-variant=\"item\">\r\n                {{ variant.updatedAt | localeDate : 'short' }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\r\n            <ng-template let-variant=\"item\">\r\n                <a class=\"button-ghost\" [routerLink]=\"['/catalog/products', variant.productId]\"\r\n                    ><span>{{ variant.name }}</span\r\n                    ><clr-icon shape=\"arrow right\"\r\n                /></a>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [optional]=\"false\">\r\n            <ng-template let-variant=\"item\">\r\n                {{ variant.sku }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n} from '@angular/core';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    CollectionFilterParameter,\r\n    ConfigurableOperationInput,\r\n    DataService,\r\n    GetCollectionContentsQuery,\r\n} from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    catchError,\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    filter,\r\n    finalize,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-contents',\r\n    templateUrl: './collection-contents.component.html',\r\n    styleUrls: ['./collection-contents.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() collectionId: string;\r\n    @Input() parentId: string;\r\n    @Input() inheritFilters: boolean;\r\n    @Input() updatedFilters: ConfigurableOperationInput[] | undefined;\r\n    @Input() previewUpdatedFilters = false;\r\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\r\n\r\n    contents$: Observable<NonNullable<GetCollectionContentsQuery['collection']>['productVariants']['items']>;\r\n    contentsTotalItems$: Observable<number>;\r\n    contentsItemsPerPage$: Observable<number>;\r\n    contentsCurrentPage$: Observable<number>;\r\n    filterTermControl = new UntypedFormControl('');\r\n    isLoading = false;\r\n    private collectionIdChange$ = new BehaviorSubject<string>('');\r\n    private parentIdChange$ = new BehaviorSubject<string>('');\r\n    private filterChanges$ = new BehaviorSubject<ConfigurableOperationInput[]>([]);\r\n    private inheritFiltersChanges$ = new BehaviorSubject<boolean>(true);\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.contentsCurrentPage$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('contentsPage')),\r\n            map(page => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.contentsItemsPerPage$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('contentsPerPage')),\r\n            map(perPage => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        const filterChanges$ = this.filterChanges$.asObservable().pipe(\r\n            filter(() => this.previewUpdatedFilters),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith([]),\r\n        );\r\n\r\n        const inheritFiltersChanges$ = this.inheritFiltersChanges$.asObservable().pipe(\r\n            filter(() => this.inheritFilters != null),\r\n            distinctUntilChanged(),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(true),\r\n        );\r\n\r\n        const fetchUpdate$ = combineLatest(\r\n            this.collectionIdChange$,\r\n            this.parentIdChange$,\r\n            this.contentsCurrentPage$,\r\n            this.contentsItemsPerPage$,\r\n            filterTerm$,\r\n            filterChanges$,\r\n            inheritFiltersChanges$,\r\n            this.refresh$,\r\n        );\r\n\r\n        const collection$ = fetchUpdate$.pipe(\r\n            takeUntil(this.destroy$),\r\n            tap(() => (this.isLoading = true)),\r\n            debounceTime(50),\r\n            switchMap(([id, parentId, currentPage, itemsPerPage, filterTerm, filters, inheritFilters]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                if (filters.length && this.previewUpdatedFilters) {\r\n                    const filterClause = filterTerm\r\n                        ? ({ name: { contains: filterTerm } } as CollectionFilterParameter)\r\n                        : undefined;\r\n                    return this.dataService.collection\r\n                        .previewCollectionVariants(\r\n                            {\r\n                                parentId,\r\n                                filters,\r\n                                inheritFilters,\r\n                            },\r\n                            {\r\n                                take,\r\n                                skip,\r\n                                filter: filterClause,\r\n                            },\r\n                        )\r\n                        .mapSingle(data => data.previewCollectionVariants)\r\n                        .pipe(catchError(() => of({ items: [], totalItems: 0 })));\r\n                } else if (id) {\r\n                    return this.dataService.collection\r\n                        .getCollectionContents(id, take, skip, filterTerm)\r\n                        .mapSingle(data => data.collection?.productVariants);\r\n                } else {\r\n                    return of(null);\r\n                }\r\n            }),\r\n            tap(() => (this.isLoading = false)),\r\n            finalize(() => (this.isLoading = false)),\r\n        );\r\n\r\n        this.contents$ = collection$.pipe(map(result => (result ? result.items : [])));\r\n        this.contentsTotalItems$ = collection$.pipe(map(result => (result ? result.totalItems : 0)));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('collectionId' in changes) {\r\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\r\n        }\r\n        if ('parentId' in changes) {\r\n            this.parentIdChange$.next(changes.parentId.currentValue);\r\n        }\r\n        if ('inheritFilters' in changes) {\r\n            this.inheritFiltersChanges$.next(changes.inheritFilters.currentValue);\r\n        }\r\n        if ('updatedFilters' in changes) {\r\n            if (this.updatedFilters) {\r\n                this.filterChanges$.next(this.updatedFilters);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('contentsPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('contentsPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./'], {\r\n            relativeTo: this.route,\r\n            queryParams: {\r\n                [key]: value,\r\n            },\r\n            queryParamsHandling: 'merge',\r\n            replaceUrl: true,\r\n        });\r\n    }\r\n}\r\n","<vdr-data-table-filter-presets\r\n    *ngIf=\"filters\"\r\n    [filters]=\"filters\"\r\n    [dataTableId]=\"id\"\r\n></vdr-data-table-filter-presets>\r\n<div class=\"table-wrapper\">\r\n    <div class=\"bulk-actions\">\r\n        <ng-content select=\"vdr-bulk-action-menu\"></ng-content>\r\n    </div>\r\n    <table class=\"\" [class.no-select]=\"disableSelect\">\r\n        <thead [class.items-selected]=\"selectionManager?.selection.length\">\r\n            <tr class=\"heading-row\">\r\n                <th *ngIf=\"selectionManager\" class=\"selection-col\">\r\n                    <div class=\"flex\">\r\n                        <div class=\"drag-handle-spacer\"></div>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrCheckbox\r\n                            [checked]=\"selectionManager?.areAllCurrentItemsSelected()\"\r\n                            (change)=\"onToggleAllClick()\"\r\n                        />\r\n                    </div>\r\n                </th>\r\n                <th\r\n                    *ngFor=\"let column of visibleSortedColumns; last as isLast\"\r\n                    [class.expand]=\"column.expand\"\r\n                >\r\n                    <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                        <vdr-ui-extension-point\r\n                            [locationId]=\"id\"\r\n                            [metadata]=\"column.id\"\r\n                            api=\"dataTable\"\r\n                            [topPx]=\"-6\"\r\n                            [leftPx]=\"-24\"\r\n                            display=\"block\"\r\n                        >\r\n                            <span>{{ column.heading }}</span>\r\n                        </vdr-ui-extension-point>\r\n                        <div *ngIf=\"column.sort as sort\" class=\"sort-toggle\">\r\n                            <button (click)=\"sort.toggleSortOrder()\" [class.active]=\"sort.sortOrder\">\r\n                                <clr-icon *ngIf=\"!sort.sortOrder\" shape=\"two-way-arrows left\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'ASC'\" shape=\"arrow up\"></clr-icon>\r\n                                <clr-icon *ngIf=\"sort.sortOrder === 'DESC'\" shape=\"arrow down\"></clr-icon>\r\n                            </button>\r\n                            <div class=\"sort-label\" *ngIf=\"sort.sortOrder\">{{ sort.sortOrder }}</div>\r\n                        </div>\r\n                    </div>\r\n                </th>\r\n                <th>\r\n                    <div class=\"column-picker\">\r\n                        <vdr-data-table-colum-picker\r\n                            [uiLanguage]=\"uiLanguage$ | async\"\r\n                            [columns]=\"sortedColumns\"\r\n                            (reorder)=\"onColumnReorder($event)\"\r\n                            (resetColumns)=\"onColumnsReset()\"\r\n                        ></vdr-data-table-colum-picker>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"searchComponent || customSearchTemplate || filters?.length\">\r\n                <th\r\n                    [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\"\r\n                    class=\"filter-row\"\r\n                    [class.active]=\"showSearchFilterRow\"\r\n                >\r\n                    <button\r\n                        class=\"button-ghost toggle-search-filter-row\"\r\n                        [class.active]=\"showSearchFilterRow\"\r\n                        (click)=\"toggleSearchFilterRow()\"\r\n                        [title]=\"'common.search-and-filter-list' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"search\"></clr-icon>\r\n                    </button>\r\n                    <div class=\"filter-row-wrapper\" [class.hidden]=\"!showSearchFilterRow\">\r\n                        <ng-container *ngTemplateOutlet=\"searchComponent?.template\"></ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"customSearchTemplate\"></ng-container>\r\n                        <ng-container *ngIf=\"filters\">\r\n                            <div class=\"filters\">\r\n                                <vdr-data-table-filters\r\n                                    *ngFor=\"let activeFilter of filters.activeFilters\"\r\n                                    [filterWithValue]=\"activeFilter\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                                <vdr-data-table-filters\r\n                                    *ngIf=\"filters.length\"\r\n                                    [filters]=\"filters\"\r\n                                    class=\"mt-1\"\r\n                                ></vdr-data-table-filters>\r\n                                <vdr-add-filter-preset-button\r\n                                    [filters]=\"filters\"\r\n                                    [dataTableId]=\"id\"\r\n                                ></vdr-add-filter-preset-button>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody\r\n            cdkDropList\r\n            cdkDropListLockAxis=\"y\"\r\n            (cdkDropListDropped)=\"onDrop($event)\"\r\n            [cdkDropListSortPredicate]=\"sortPredicate\"\r\n        >\r\n            <ng-container\r\n                *ngFor=\"\r\n                let item of items\r\n                    | paginate\r\n                        : {\r\n                              itemsPerPage: itemsPerPage,\r\n                              currentPage: currentPage,\r\n                              totalItems: totalItems,\r\n                              id: id,\r\n                          };\r\n                index as i;\r\n                trackBy: trackByFn\r\n            \"\r\n            >\r\n                <ng-container\r\n                    [ngTemplateOutlet]=\"collectionRowTmp\"\r\n                    [ngTemplateOutletContext]=\"{ item: item, i: i, depth: 0 }\"\r\n                ></ng-container>\r\n            </ng-container>\r\n            <ng-container>\r\n                <tr *ngIf=\"!items?.length\">\r\n                    <td [attr.colspan]=\"visibleSortedColumns.length + (selectionManager ? 2 : 1)\">\r\n                        <vdr-empty-placeholder [emptyStateLabel]=\"emptyStateLabel\"></vdr-empty-placeholder>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n<div class=\"table-footer\">\r\n    <vdr-items-per-page-controls\r\n        *ngIf=\"totalItems\"\r\n        [itemsPerPage]=\"itemsPerPage\"\r\n        (itemsPerPageChange)=\"itemsPerPageChange.emit($event)\"\r\n    ></vdr-items-per-page-controls>\r\n    <div *ngIf=\"totalItems\" class=\"p5 total-items-count\">\r\n        {{ 'common.total-items' | translate : { currentStart, currentEnd, totalItems } }}\r\n    </div>\r\n\r\n    <vdr-pagination-controls\r\n        *ngIf=\"totalItems\"\r\n        [id]=\"id\"\r\n        [currentPage]=\"currentPage\"\r\n        [itemsPerPage]=\"itemsPerPage\"\r\n        [totalItems]=\"totalItems\"\r\n        (pageChange)=\"pageChange.emit($event)\"\r\n    ></vdr-pagination-controls>\r\n</div>\r\n\r\n<ng-template #collectionRowTmp let-item=\"item\" let-depth=\"depth\">\r\n    <tr #collectionRow cdkDrag [cdkDragData]=\"{ depth: depth, collection: item }\" cdkDragBoundary=\"tbody\">\r\n        <td\r\n            *ngIf=\"selectionManager\"\r\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\r\n            class=\"selection-col\"\r\n        >\r\n            <div class=\"flex\">\r\n                <div class=\"drag-handle\" cdkDragHandle [title]=\"'catalog.reorder-collection' | translate\">\r\n                    <clr-icon shape=\"drag-handle\"></clr-icon>\r\n                </div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrCheckbox\r\n                    [checked]=\"selectionManager?.isSelected(item)\"\r\n                    (click)=\"onRowClick(item, $event)\"\r\n                />\r\n            </div>\r\n        </td>\r\n        <td\r\n            *ngFor=\"let column of visibleSortedColumns\"\r\n            [class.active]=\"activeIndex === absoluteIndex[item.id]\"\r\n        >\r\n            <div class=\"cell-content\" [ngClass]=\"column.align\">\r\n                <ng-container\r\n                    *ngIf=\"customComponents.get(column.id) as componentConfig; else defaultComponent\"\r\n                >\r\n                    <ng-container\r\n                        *ngComponentOutlet=\"\r\n                            componentConfig.config.component;\r\n                            inputs: { rowItem: item };\r\n                            injector: componentConfig.injector\r\n                        \"\r\n                    ></ng-container>\r\n                </ng-container>\r\n                <ng-template #defaultComponent>\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"column.template; context: { item: item, depth: depth }\"\r\n                    ></ng-container>\r\n                </ng-template>\r\n            </div>\r\n        </td>\r\n        <td [class.active]=\"activeIndex === absoluteIndex[item.id]\"><!-- column select --></td>\r\n    </tr>\r\n    <ng-container *ngFor=\"let subCollection of getSubcollections(item)\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"collectionRowTmp; context: { item: subCollection, depth: depth + 1 }\"\r\n        ></ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n","import { CdkDrag, CdkDragDrop, CdkDropList, DragRef } from '@angular/cdk/drag-drop';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { DataService, DataTable2Component, GetCollectionListQuery, ItemOf } from '@vendure/admin-ui/core';\n\nexport type CollectionTableItem = ItemOf<GetCollectionListQuery, 'collections'>;\nexport type CollectionOrderEvent = {\n    collectionId: string;\n    parentId: string;\n    index: number;\n};\n@Component({\n    selector: 'vdr-collection-data-table',\n    templateUrl: './collection-data-table.component.html',\n    styleUrls: [\n        '../../../../core/src/shared/components/data-table-2/data-table2.component.scss',\n        './collection-data-table.component.scss',\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDataTableComponent\n    extends DataTable2Component<CollectionTableItem>\n    implements OnChanges, AfterViewInit\n{\n    @Input() subCollections: CollectionTableItem[];\n    @Output() changeOrder = new EventEmitter<CollectionOrderEvent>();\n    @ViewChild(CdkDropList, { static: true }) dropList: CdkDropList<{\n        depth: number;\n        collection: CollectionTableItem;\n    }>;\n    @ViewChildren('collectionRow', { read: CdkDrag }) collectionRowList: QueryList<CdkDrag>;\n    dragRefs: DragRef[] = [];\n    absoluteIndex: { [id: string]: number } = {};\n    constructor(\n        protected changeDetectorRef: ChangeDetectorRef,\n        protected dataService: DataService,\n    ) {\n        super(changeDetectorRef, dataService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n        if (changes.subCollections || changes.items) {\n            const allCollections: CollectionTableItem[] = [];\n            for (const collection of this.items ?? []) {\n                allCollections.push(collection);\n                const subCollectionMatches = this.getSubcollections(collection);\n                allCollections.push(...subCollectionMatches.flat());\n            }\n            allCollections.forEach((collection, index) => (this.absoluteIndex[collection.id] = index));\n        }\n    }\n\n    ngAfterViewInit() {\n        this.collectionRowList.changes.subscribe((val: QueryList<CdkDrag>) => {\n            this.dropList.getSortedItems().forEach(item => this.dropList.removeItem(item));\n            for (const ref of val.toArray()) {\n                ref.dropContainer = this.dropList;\n                ref._dragRef._withDropContainer(this.dropList._dropListRef);\n                this.dropList.addItem(ref);\n            }\n        });\n    }\n\n    getSubcollections(item: CollectionTableItem) {\n        return this.subCollections?.filter(c => c.parentId === item.id) ?? [];\n    }\n\n    sortPredicate = (index: number, item: CdkDrag<{ depth: number; collection: CollectionTableItem }>) => {\n        const itemAtIndex = this.dropList.getSortedItems()[index];\n        return itemAtIndex?.data.collection.parentId === item.data.collection.parentId;\n    };\n\n    onDrop(\n        event: CdkDragDrop<{\n            depth: number;\n            collection: CollectionTableItem;\n        }>,\n    ) {\n        const isTopLevel = event.item.data.collection.breadcrumbs.length === 2;\n        const pageIndexOffset = isTopLevel ? (this.currentPage - 1) * this.itemsPerPage : 0;\n        const parentId = event.item.data.collection.parentId;\n        const parentIndex = this.items.findIndex(i => i.id === parentId);\n        const adjustedIndex = pageIndexOffset + event.currentIndex - parentIndex - 1;\n        this.changeOrder.emit({\n            collectionId: event.item.data.collection.id,\n            index: adjustedIndex,\n            parentId: event.item.data.collection.parentId,\n        });\n\n        if (isTopLevel) {\n            this.items = [...this.items];\n            this.items.splice(event.previousIndex, 1);\n            this.items.splice(event.currentIndex, 0, event.item.data.collection);\n        } else {\n            const parent = this.items.find(i => i.id === parentId);\n            if (parent) {\n                const subCollections = this.getSubcollections(parent);\n                const adjustedPreviousIndex = pageIndexOffset + event.previousIndex - parentIndex - 1;\n                subCollections.splice(adjustedPreviousIndex, 1);\n                subCollections.splice(event.currentIndex, 0, event.item.data.collection);\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"collection-detail\" />\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n            <vdr-action-bar-dropdown-menu locationId=\"collection-detail\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            formControlName=\"visible\"\r\n                            id=\"visibility\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                        <label class=\"visible-toggle\">\r\n                            <ng-container *ngIf=\"detailForm.value.visible; else private\">{{\r\n                                'catalog.public' | translate\r\n                            }}</ng-container>\r\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                        </label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n\r\n        <vdr-page-block *ngIf=\"entity$ | async as entity\"\r\n            ><nav role=\"navigation\">\r\n                <ul class=\"collection-breadcrumbs\">\r\n                    <li *ngFor=\"let breadcrumb of entity.breadcrumbs; let isFirst = first; let isLast = last\">\r\n                        <a [routerLink]=\"['/catalog/collections']\" *ngIf=\"isFirst\">{{\r\n                            'catalog.root-collection' | translate\r\n                        }}</a>\r\n                        <a\r\n                            [routerLink]=\"['/catalog/collections', breadcrumb.id]\"\r\n                            *ngIf=\"!isFirst && !isLast\"\r\n                            >{{ breadcrumb.name | translate }}</a\r\n                        >\r\n                        <ng-container *ngIf=\"isLast\">{{ breadcrumb.name | translate }}</ng-container>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </vdr-page-block>\r\n\r\n        <vdr-page-block>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateSlug($event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"'catalog.slug' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\r\n                    >\r\n                        <input\r\n                            id=\"slug\"\r\n                            type=\"text\"\r\n                            formControlName=\"slug\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        class=\"form-grid-span\"\r\n                        [label]=\"'common.description' | translate\"\r\n                        for=\"slug\"\r\n                    >\r\n                        <vdr-rich-text-editor\r\n                            formControlName=\"description\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        ></vdr-rich-text-editor>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card\r\n                formGroupName=\"customFields\"\r\n                *ngIf=\"customFields.length\"\r\n                [title]=\"'common.custom-fields' | translate\"\r\n            >\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Collection\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"collection-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n            <vdr-card [title]=\"'catalog.assets' | translate\">\r\n                <vdr-assets\r\n                    [assets]=\"entity?.assets\"\r\n                    [featuredAsset]=\"entity?.featuredAsset\"\r\n                    [updatePermissions]=\"updatePermission\"\r\n                    (change)=\"assetChanges = $event\"\r\n                ></vdr-assets>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.filters' | translate\">\r\n                <vdr-form-field [label]=\"'catalog.filter-inheritance' | translate\" for=\"inheritFilters\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            formControlName=\"inheritFilters\"\r\n                            id=\"inheritFilters\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                        <label class=\"visible-toggle\">\r\n                            <ng-container *ngIf=\"detailForm.value.inheritFilters; else noInherit\">{{\r\n                                'catalog.inherit-filters-from-parent' | translate\r\n                            }}</ng-container>\r\n                            <ng-template #noInherit>{{\r\n                                'catalog.do-not-inherit-filters' | translate\r\n                            }}</ng-template>\r\n                        </label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n                <div formArrayName=\"filters\">\r\n                    <ng-container *ngFor=\"let filter of filters; index as i; trackBy: trackByFn\">\r\n                        <vdr-configurable-input\r\n                            (remove)=\"removeFilter(i)\"\r\n                            [position]=\"i\"\r\n                            [operation]=\"filter\"\r\n                            [operationDefinition]=\"getFilterDefinition(filter)\"\r\n                            [formControlName]=\"i\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        ></vdr-configurable-input>\r\n                    </ng-container>\r\n                </div>\r\n                <div *vdrIfPermissions=\"updatePermission\">\r\n                    <vdr-dropdown>\r\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            <span>{{ 'marketing.add-condition' | translate }}</span>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                            <button\r\n                                *ngFor=\"let filter of allFilters\"\r\n                                type=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"addFilter(filter)\"\r\n                            >\r\n                                {{ filter.description }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card [title]=\"'common.contents' | translate\" [paddingX]=\"false\">\r\n                <vdr-collection-contents\r\n                    [collectionId]=\"id\"\r\n                    [parentId]=\"parentId$ | async\"\r\n                    [updatedFilters]=\"updatedFilters$ | async\"\r\n                    [inheritFilters]=\"inheritFilters$ | async\"\r\n                    [previewUpdatedFilters]=\"livePreview\"\r\n                    #collectionContents\r\n                >\r\n                    <ng-template let-count>\r\n                        <div class=\"ml-3\">\r\n                            <div class=\"contents-title\">\r\n                                {{ 'catalog.collection-contents' | translate }} ({{\r\n                                    'common.results-count' | translate : { count: count }\r\n                                }})\r\n                            </div>\r\n                            <clr-checkbox-wrapper [class.disabled]=\"detailForm.get('filters')?.pristine\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    clrCheckbox\r\n                                    [ngModelOptions]=\"{ standalone: true }\"\r\n                                    [disabled]=\"detailForm.get('filters')?.pristine\"\r\n                                    [ngModel]=\"livePreview\"\r\n                                    (ngModelChange)=\"toggleLivePreview()\"\r\n                                />\r\n                                <label>{{ 'catalog.live-preview-contents' | translate }}</label>\r\n                            </clr-checkbox-wrapper>\r\n                        </div>\r\n                    </ng-template>\r\n                </vdr-collection-contents>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, UntypedFormArray, UntypedFormControl, Validators } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    COLLECTION_FRAGMENT,\r\n    CollectionDetailQueryDocument,\r\n    CollectionFragment,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    ConfigurableOperationInput,\r\n    CreateCollectionInput,\r\n    createUpdatedTranslatable,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    findTranslation,\r\n    getConfigArgValue,\r\n    getCustomFieldsDefaults,\r\n    LanguageCode,\r\n    LocalStorageService,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    TypedBaseDetailComponent,\r\n    unicodePatternValidator,\r\n    UpdateCollectionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { gql } from 'apollo-angular';\r\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map, mergeMap, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\r\n\r\nexport const COLLECTION_DETAIL_QUERY = gql`\r\n    query CollectionDetailQuery($id: ID!) {\r\n        collection(id: $id) {\r\n            ...Collection\r\n        }\r\n    }\r\n    ${COLLECTION_FRAGMENT}\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-collection-detail',\r\n    templateUrl: './collection-detail.component.html',\r\n    styleUrls: ['./collection-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionDetailComponent\r\n    extends TypedBaseDetailComponent<typeof CollectionDetailQueryDocument, 'collection'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields = this.getCustomFieldConfig('Collection');\r\n    detailForm = this.formBuilder.group({\r\n        name: ['', Validators.required],\r\n        slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9._-]+$/)],\r\n        description: '',\r\n        visible: false,\r\n        inheritFilters: true,\r\n        filters: this.formBuilder.array([]),\r\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n    });\r\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\r\n    filters: ConfigurableOperation[] = [];\r\n    allFilters: ConfigurableOperationDefinition[] = [];\r\n    updatedFilters$: Observable<ConfigurableOperationInput[]>;\r\n    inheritFilters$: Observable<boolean>;\r\n    livePreview = false;\r\n    parentId$: Observable<string | undefined>;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\r\n    private filterRemoved$ = new Subject<void>();\r\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private localStorageService: LocalStorageService,\r\n    ) {\r\n        super();\r\n        this.livePreview = this.localStorageService.get('livePreviewCollectionContents') ?? false;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\r\n            this.allFilters = res.collectionFilters;\r\n        });\r\n        const filtersFormArray = this.detailForm.get('filters') as UntypedFormArray;\r\n        const inheritFiltersControl = this.detailForm.get('inheritFilters') as UntypedFormControl;\r\n        this.inheritFilters$ = inheritFiltersControl.valueChanges.pipe(distinctUntilChanged());\r\n        this.updatedFilters$ = merge(filtersFormArray.statusChanges, this.filterRemoved$).pipe(\r\n            debounceTime(200),\r\n            filter(() => filtersFormArray.touched),\r\n            map(() =>\r\n                this.mapOperationsToInputs(this.filters, filtersFormArray.value).filter(_filter => {\r\n                    // ensure all the arguments have valid values. E.g. a newly-added\r\n                    // filter will not yet have valid values\r\n                    for (const arg of _filter.arguments) {\r\n                        if (arg.value === '') {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }),\r\n            ),\r\n        );\r\n        this.parentId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('parentId') || undefined),\r\n            switchMap(parentId => {\r\n                if (parentId) {\r\n                    return of(parentId);\r\n                } else {\r\n                    return this.entity$.pipe(map(collection => collection.parent?.id));\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    getFilterDefinition(_filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allFilters.find(f => f.code === _filter.code);\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    /**\r\n     * If creating a new Collection, automatically generate the slug based on the collection name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        const slugControl = this.detailForm.get(['slug']);\r\n        const currentTranslation = this.entity ? findTranslation(this.entity, this.languageCode) : undefined;\r\n        const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n        if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n            slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n        }\r\n    }\r\n\r\n    addFilter(collectionFilter: ConfigurableOperation) {\r\n        const filtersArray = this.detailForm.get('filters') as UntypedFormArray;\r\n        const argsHash = collectionFilter.args.reduce(\r\n            (output, arg) => ({\r\n                ...output,\r\n                [arg.name]: getConfigArgValue(arg.value),\r\n            }),\r\n            {},\r\n        );\r\n        filtersArray.push(\r\n            this.formBuilder.control({\r\n                code: collectionFilter.code,\r\n                args: argsHash,\r\n            }),\r\n        );\r\n        this.filters.push({\r\n            code: collectionFilter.code,\r\n            args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\r\n        });\r\n    }\r\n\r\n    removeFilter(index: number) {\r\n        const filtersArray = this.detailForm.get('filters') as UntypedFormArray;\r\n        if (index !== -1) {\r\n            filtersArray.removeAt(index);\r\n            filtersArray.markAsDirty();\r\n            filtersArray.markAsTouched();\r\n            this.filters.splice(index, 1);\r\n            this.filterRemoved$.next();\r\n        }\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const input = this.getUpdatedCollection(\r\n            {\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                languageCode: this.languageCode,\r\n                name: '',\r\n                slug: '',\r\n                isPrivate: false,\r\n                breadcrumbs: [],\r\n                description: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                translations: [],\r\n                inheritFilters: true,\r\n                filters: [],\r\n                parent: {} as any,\r\n                children: null,\r\n            },\r\n            this.detailForm,\r\n            this.languageCode,\r\n        ) as CreateCollectionInput;\r\n        const parentId = this.route.snapshot.paramMap.get('parentId');\r\n        if (parentId) {\r\n            input.parentId = parentId;\r\n        }\r\n        this.dataService.collection.createCollection(input).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Collection',\r\n                });\r\n                this.assetChanges = {};\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Collection',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([category, languageCode]) => {\r\n                    const input = this.getUpdatedCollection(\r\n                        category,\r\n                        this.detailForm,\r\n                        languageCode,\r\n                    ) as UpdateCollectionInput;\r\n                    return this.dataService.collection.updateCollection(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.contentsComponent.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    toggleLivePreview() {\r\n        this.livePreview = !this.livePreview;\r\n        this.localStorageService.set('livePreviewCollectionContents', this.livePreview);\r\n    }\r\n\r\n    trackByFn(index: number, item: ConfigurableOperation) {\r\n        return JSON.stringify(item);\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the category or current language.\r\n     */\r\n    protected setFormValues(entity: CollectionFragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(entity, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            slug: currentTranslation ? currentTranslation.slug : '',\r\n            description: currentTranslation ? currentTranslation.description : '',\r\n            visible: !entity.isPrivate,\r\n            inheritFilters: entity.inheritFilters,\r\n        });\r\n\r\n        const formArray = this.detailForm.get('filters') as UntypedFormArray;\r\n        if (formArray.length !== entity.filters.length) {\r\n            formArray.clear();\r\n            this.filters = [];\r\n            entity.filters.forEach(f => this.addFilter(f));\r\n        }\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                entity,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a category and the value of the form, this method creates an updated copy of the category which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedCollection(\r\n        category: CollectionFragment,\r\n        form: typeof this.detailForm,\r\n        languageCode: LanguageCode,\r\n    ): CreateCollectionInput | UpdateCollectionInput {\r\n        const updatedCategory = createUpdatedTranslatable({\r\n            translatable: category,\r\n            updatedFields: form.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: category.name || '',\r\n                slug: category.slug || '',\r\n                description: category.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedCategory,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            isPrivate: !form.value.visible,\r\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs(\r\n        operations: ConfigurableOperation[],\r\n        formValueOperations: any,\r\n    ): ConfigurableOperationInput[] {\r\n        return operations.map((o, i) => ({\r\n            code: o.code,\r\n            arguments: Object.entries(formValueOperations[i].args).map(([name, value], j) => ({\r\n                name,\r\n                value: encodeConfigArgValue(value),\r\n            })),\r\n        }));\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GetCollectionListQuery, ItemOf } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Removes the root collection and self breadcrumb from the collection breadcrumb list.\r\n */\r\n@Pipe({\r\n    name: 'collectionBreadcrumb',\r\n})\r\nexport class CollectionBreadcrumbPipe implements PipeTransform {\r\n    transform(value: ItemOf<GetCollectionListQuery, 'collections'>): unknown {\r\n        return value?.breadcrumbs.slice(1, -1);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.move-collections' | translate }}\r\n</ng-template>\r\n<vdr-collection-data-table\r\n    class=\"mt-2\"\r\n    id=\"move-collection-list\"\r\n    [items]=\"items$ | async\"\r\n    [subCollections]=\"subCollections$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"currentPage$.next($event)\"\r\n    (itemsPerPageChange)=\"itemsPerPage$.next($event)\"\r\n>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\r\n    ></vdr-dt2-search>\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\r\n        <ng-template let-collection=\"item\">\r\n            {{ collection.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\">\r\n        <ng-template let-collection=\"item\" let-depth=\"depth\">\r\n            <div [ngClass]=\"'indent-' + depth\"></div>\r\n            <clr-icon\r\n                class=\"child-arrow\"\r\n                [class.transparent]=\"depth === 0\"\r\n                shape=\"child-arrow\"\r\n                *ngIf=\"!collection.children?.length && collection.parentId !== '__'\"\r\n            ></clr-icon>\r\n            <button\r\n                class=\"icon-button folder-button\"\r\n                *ngIf=\"collection.children?.length\"\r\n                (click)=\"toggleExpanded(collection)\"\r\n            >\r\n                <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\r\n                <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\r\n            </button>\r\n            <button class=\"icon-button folder-button\" *ngIf=\"collection.parentId === '__'\" disabled>\r\n                <clr-icon shape=\"folder\" class=\"is-solid\"></clr-icon>\r\n            </button>\r\n            <button class=\"button-ghost\" (click)=\"resolveWith(collection)\">\r\n                <span>{{ 'catalog.move-collection-to' | translate : {name: collection.name} }}</span>\r\n            </button>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\r\n        <ng-template let-collection=\"item\">\r\n            <div class=\"breadcrumb\">\r\n                <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\r\n                    <ng-container *ngIf=\"breadcrumbs.length\">\r\n                        <div *ngFor=\"let item of breadcrumbs\">\r\n                            <span class=\"separator\">/</span>{{ item.name }}\r\n                        </div>\r\n                    </ng-container>\r\n                    <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\r\n                </ng-container>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\">\r\n        <ng-template let-collection=\"item\">\r\n            {{ collection.slug }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n</vdr-collection-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DataService, Dialog, GetCollectionListQuery, I18nService, ItemOf } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-move-collections-dialog',\n    templateUrl: './move-collections-dialog.component.html',\n    styleUrls: ['./move-collections-dialog.component.scss', '../collection-list/collection-list-common.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MoveCollectionsDialogComponent\n    implements OnInit, Dialog<ItemOf<GetCollectionListQuery, 'collections'>>\n{\n    resolveWith: (result?: ItemOf<GetCollectionListQuery, 'collections'>) => void;\n    searchTermControl = new FormControl('');\n    items$: Observable<Array<ItemOf<GetCollectionListQuery, 'collections'>>>;\n    totalItems$: Observable<number>;\n    currentPage$ = new BehaviorSubject(1);\n    itemsPerPage$ = new BehaviorSubject(10);\n    expandedIds$ = new Subject<string[]>();\n    expandedIds: string[] = [];\n    subCollections$: Observable<Array<ItemOf<GetCollectionListQuery, 'collections'>>>;\n\n    constructor(private dataService: DataService, private i18nService: I18nService) {}\n\n    ngOnInit() {\n        const getCollectionsResult = this.dataService.collection.getCollections();\n\n        const searchTerm$ = this.searchTermControl.valueChanges.pipe(\n            debounceTime(250),\n            distinctUntilChanged(),\n            startWith(''),\n        );\n        const currentPage$ = this.currentPage$.pipe(distinctUntilChanged());\n        const itemsPerPage$ = this.itemsPerPage$.pipe(distinctUntilChanged());\n        combineLatest(searchTerm$, currentPage$, itemsPerPage$).subscribe(\n            ([searchTerm, currentPage, itemsPerPage]) => {\n                const topLevelOnly = searchTerm === '';\n                getCollectionsResult.ref.refetch({\n                    options: {\n                        skip: (currentPage - 1) * itemsPerPage,\n                        take: itemsPerPage,\n                        filter: {\n                            name: { contains: searchTerm },\n                        },\n                        topLevelOnly,\n                    },\n                });\n            },\n        );\n\n        const rootCollectionId$ = this.dataService.collection\n            .getCollections({\n                take: 1,\n                topLevelOnly: true,\n            })\n            .mapSingle(data => data.collections.items[0].parentId);\n\n        this.items$ = combineLatest(\n            getCollectionsResult.mapStream(({ collections }) => collections),\n            rootCollectionId$,\n        ).pipe(\n            map(([collections, rootCollectionId]) => [\n                ...(rootCollectionId\n                    ? [\n                          {\n                              id: rootCollectionId,\n                              name: this.i18nService.translate('catalog.root-collection'),\n                              slug: '',\n                              parentId: '__',\n                              position: 0,\n                              featuredAsset: null,\n                              children: [],\n                              breadcrumbs: [],\n                              isPrivate: false,\n                              createdAt: '',\n                              updatedAt: '',\n                          } satisfies ItemOf<GetCollectionListQuery, 'collections'>,\n                      ]\n                    : []),\n                ...collections.items,\n            ]),\n        );\n        this.totalItems$ = getCollectionsResult.mapStream(data => data.collections.totalItems);\n\n        this.subCollections$ = this.expandedIds$.pipe(\n            tap(val => (this.expandedIds = val)),\n            switchMap(ids => {\n                if (ids.length) {\n                    return this.dataService.collection\n                        .getCollections({\n                            take: 999,\n                            filter: {\n                                parentId: { in: ids },\n                            },\n                        })\n                        .mapStream(data => data.collections.items);\n                } else {\n                    return of([]);\n                }\n            }),\n        );\n    }\n\n    toggleExpanded(collection: ItemOf<GetCollectionListQuery, 'collections'>) {\n        let expandedIds = this.expandedIds;\n        if (!expandedIds.includes(collection.id)) {\n            expandedIds.push(collection.id);\n        } else {\n            expandedIds = expandedIds.filter(id => id !== collection.id);\n        }\n        this.expandedIds$.next(expandedIds);\n    }\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BulkAction,\r\n    createBulkAssignToChannelAction,\r\n    createBulkDeleteAction,\r\n    createBulkRemoveFromChannelAction,\r\n    DataService,\r\n    DuplicateEntityDialogComponent,\r\n    GetCollectionListQuery,\r\n    ItemOf,\r\n    ModalService,\r\n    MoveCollectionInput,\r\n    NotificationService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { CollectionPartial } from '../collection-tree/collection-tree.types';\r\nimport { MoveCollectionsDialogComponent } from '../move-collections-dialog/move-collections-dialog.component';\r\n\r\nimport { CollectionListComponent } from './collection-list.component';\r\n\r\nexport const deleteCollectionsBulkAction = createBulkDeleteAction<\r\n    ItemOf<GetCollectionListQuery, 'collections'>\r\n>({\r\n    location: 'collection-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteCollection) ||\r\n        userPermissions.includes(Permission.DeleteCatalog),\r\n    getItemName: item => item.name,\r\n    bulkDelete: (dataService, ids) =>\r\n        dataService.collection.deleteCollections(ids).pipe(map(res => res.deleteCollections)),\r\n});\r\n\r\nexport const moveCollectionsBulkAction: BulkAction<CollectionPartial, CollectionListComponent> = {\r\n    location: 'collection-list',\r\n    label: _('catalog.move-collections'),\r\n    icon: 'drag-handle',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateCollection),\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const dataService = injector.get(DataService);\r\n        const notificationService = injector.get(NotificationService);\r\n        modalService\r\n            .fromComponent(MoveCollectionsDialogComponent, {\r\n                size: 'xl',\r\n                closable: true,\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        const inputs: MoveCollectionInput[] = selection.map(c => ({\r\n                            collectionId: c.id,\r\n                            parentId: result.id,\r\n                            index: 0,\r\n                        }));\r\n                        return dataService.collection.moveCollection(inputs);\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                notificationService.success(_('catalog.move-collections-success'), {\r\n                    count: selection.length,\r\n                });\r\n                clearSelection();\r\n                hostComponent.refresh();\r\n            });\r\n    },\r\n};\r\n\r\nexport const assignCollectionsToChannelBulkAction = createBulkAssignToChannelAction<\r\n    ItemOf<GetCollectionListQuery, 'collections'>\r\n>({\r\n    location: 'collection-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateCollection),\r\n    getItemName: item => item.name,\r\n    bulkAssignToChannel: (dataService, collectionIds, channelIds) =>\r\n        channelIds.map(channelId =>\r\n            dataService.collection\r\n                .assignCollectionsToChannel({\r\n                    collectionIds,\r\n                    channelId,\r\n                })\r\n                .pipe(map(res => res.assignCollectionsToChannel)),\r\n        ),\r\n});\r\n\r\nexport const removeCollectionsFromChannelBulkAction = createBulkRemoveFromChannelAction<\r\n    ItemOf<GetCollectionListQuery, 'collections'>\r\n>({\r\n    location: 'collection-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteCatalog) ||\r\n        userPermissions.includes(Permission.DeleteCollection),\r\n    getItemName: item => item.name,\r\n    bulkRemoveFromChannel: (dataService, collectionIds, channelId) =>\r\n        dataService.collection\r\n            .removeCollectionsFromChannel({\r\n                channelId: channelId,\r\n                collectionIds,\r\n            })\r\n            .pipe(map(res => res.removeCollectionsFromChannel)),\r\n});\r\n\r\nexport const duplicateCollectionsBulkAction: BulkAction<\r\n    ItemOf<GetCollectionListQuery, 'collections'>,\r\n    CollectionListComponent\r\n> = {\r\n    location: 'collection-list',\r\n    label: _('common.duplicate'),\r\n    icon: 'copy',\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        modalService\r\n            .fromComponent(DuplicateEntityDialogComponent<ItemOf<GetCollectionListQuery, 'collections'>>, {\r\n                locals: {\r\n                    entities: selection,\r\n                    entityName: 'Collection',\r\n                    title: _('catalog.duplicate-collections'),\r\n                    getEntityName: entity => entity.name,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    clearSelection();\r\n                    hostComponent.refresh();\r\n                }\r\n            });\r\n    },\r\n};\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"collection-list\" />\r\n            <a\r\n                class=\"btn btn-primary\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n                [routerLink]=\"['./create']\"\r\n            >\r\n                <clr-icon shape=\"plus\"></clr-icon>\r\n                {{ 'catalog.create-new-collection' | translate }}\r\n            </a>\r\n            <vdr-action-bar-dropdown-menu locationId=\"collection-list\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-split-view [rightPanelOpen]=\"activeCollectionId$ | async\" (closeClicked)=\"closeContents()\">\r\n    <ng-template vdrSplitViewLeft>\r\n        <vdr-collection-data-table\r\n            class=\"mt-2\"\r\n            [id]=\"dataTableListId\"\r\n            [items]=\"items$ | async\"\r\n            [subCollections]=\"subCollections$ | async\"\r\n            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n            [totalItems]=\"totalItems$ | async\"\r\n            [currentPage]=\"currentPage$ | async\"\r\n            [filters]=\"filters\"\r\n            [activeIndex]=\"activeCollectionIndex$ | async\"\r\n            (pageChange)=\"setPageNumber($event)\"\r\n            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n            (changeOrder)=\"onRearrange($event)\"\r\n            (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n        >\r\n            <vdr-bulk-action-menu\r\n                locationId=\"collection-list\"\r\n                [hostComponent]=\"this\"\r\n                [selectionManager]=\"selectionManager\"\r\n            ></vdr-bulk-action-menu>\r\n            <vdr-dt2-search\r\n                [searchTermControl]=\"searchTermControl\"\r\n                [searchTermPlaceholder]=\"'common.search-by-name' | translate\"\r\n            ></vdr-dt2-search>\r\n            <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\">\r\n                <ng-template let-collection=\"item\">\r\n                    {{ collection.id }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column\r\n                [heading]=\"'common.created-at' | translate\" id=\"created-at\"\r\n                [hiddenByDefault]=\"true\"\r\n                [sort]=\"sorts.get('createdAt')\"\r\n            >\r\n                <ng-template let-collection=\"item\">\r\n                    {{ collection.createdAt | localeDate : 'short' }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column\r\n                [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\r\n                [hiddenByDefault]=\"true\"\r\n                [sort]=\"sorts.get('updatedAt')\"\r\n            >\r\n                <ng-template let-collection=\"item\">\r\n                    {{ collection.updatedAt | localeDate : 'short' }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column\r\n                [heading]=\"'common.position' | translate\" id=\"position\"\r\n                [hiddenByDefault]=\"true\"\r\n                [sort]=\"sorts.get('position')\"\r\n            >\r\n                <ng-template let-collection=\"item\">\r\n                    {{ collection.position }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column\r\n                [heading]=\"'common.name' | translate\" id=\"name\"\r\n                [optional]=\"false\"\r\n                [sort]=\"sorts.get('name')\"\r\n            >\r\n                <ng-template let-collection=\"item\" let-depth=\"depth\">\r\n                    <div [ngClass]=\"'indent-' + depth\"></div>\r\n                    <clr-icon\r\n                        class=\"child-arrow\"\r\n                        [class.transparent]=\"depth === 0\"\r\n                        shape=\"child-arrow\"\r\n                        *ngIf=\"!collection.children?.length\"\r\n                    ></clr-icon>\r\n                    <button\r\n                        class=\"icon-button folder-button\"\r\n                        *ngIf=\"collection.children?.length\"\r\n                        (click)=\"toggleExpanded(collection)\"\r\n                    >\r\n                        <clr-icon shape=\"folder\" *ngIf=\"!expandedIds.includes(collection.id)\"></clr-icon>\r\n                        <clr-icon shape=\"folder-open\" *ngIf=\"expandedIds.includes(collection.id)\"></clr-icon>\r\n                    </button>\r\n                    <a class=\"button-ghost\" [routerLink]=\"['./', collection.id]\"\r\n                        ><span>{{ collection.name }}</span>\r\n                        <clr-icon shape=\"arrow right\"></clr-icon>\r\n                    </a>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.breadcrumb' | translate\" id=\"breadcrumb\">\r\n                <ng-template let-collection=\"item\">\r\n                    <div class=\"breadcrumb\">\r\n                        <ng-container *ngIf=\"collection | collectionBreadcrumb as breadcrumbs\">\r\n                            <ng-container *ngIf=\"breadcrumbs.length\">\r\n                                <div *ngFor=\"let item of breadcrumbs\">\r\n                                    <span class=\"separator\">/</span>{{ item.name }}\r\n                                </div>\r\n                            </ng-container>\r\n                            <span class=\"separator\" *ngIf=\"!breadcrumbs.length\">/</span>\r\n                        </ng-container>\r\n                    </div>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\r\n                <ng-template let-collection=\"item\">\r\n                    {{ collection.slug }}\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\r\n                <ng-template let-collection=\"item\">\r\n                    <vdr-chip *ngIf=\"collection.isPrivate\" colorType=\"warning\">{{\r\n                        'common.private' | translate\r\n                        }}</vdr-chip>\r\n                    <vdr-chip *ngIf=\"!collection.isPrivate\" colorType=\"success\">{{\r\n                        'common.public' | translate\r\n                        }}</vdr-chip>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-column [heading]=\"'common.view-contents' | translate\" id=\"view-contents\" [optional]=\"false\">\r\n                <ng-template let-collection=\"item\">\r\n                    <a\r\n                        class=\"button-small bg-weight-150\"\r\n                        [routerLink]=\"['./', { contents: collection.id }]\"\r\n                        [queryParams]=\"{ contentsPage: 1 }\"\r\n                        queryParamsHandling=\"merge\"\r\n                    >\r\n                        <span>{{ 'common.view-contents' | translate }}</span>\r\n                        <clr-icon shape=\"file-group\"></clr-icon>\r\n                    </a>\r\n                </ng-template>\r\n            </vdr-dt2-column>\r\n            <vdr-dt2-custom-field-column\r\n                *ngFor=\"let customField of customFields\"\r\n                [customField]=\"customField\"\r\n                [sorts]=\"sorts\"\r\n            />\r\n        </vdr-collection-data-table>\r\n    </ng-template>\r\n    <ng-template vdrSplitViewRight [splitViewTitle]=\"activeCollectionTitle$ | async\">\r\n        <ng-container *ngIf=\"activeCollectionId$ | async as activeGroup\">\r\n            <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\"></vdr-collection-contents>\r\n        </ng-container>\r\n    </ng-template>\r\n</vdr-split-view>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    GetCollectionListDocument,\n    GetCollectionListQuery,\n    ItemOf,\n    LanguageCode,\n    NotificationService,\n    TypedBaseListComponent,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, takeUntil } from 'rxjs/operators';\nimport { CollectionOrderEvent } from '../collection-data-table/collection-data-table.component';\n\n@Component({\n    selector: 'vdr-collection-list',\n    templateUrl: './collection-list.component.html',\n    styleUrls: ['./collection-list.component.scss', './collection-list-common.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionListComponent\n    extends TypedBaseListComponent<typeof GetCollectionListDocument, 'collections'>\n    implements OnInit\n{\n    activeCollectionId$: Observable<string | null>;\n    activeCollectionIndex$: Observable<number>;\n    activeCollectionTitle$: Observable<string>;\n    subCollections$: Observable<Array<ItemOf<GetCollectionListQuery, 'collections'>>>;\n    expandedIds: string[] = [];\n    dataTableListId = 'collection-list';\n    readonly customFields = this.getCustomFieldConfig('Collection');\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilter({\n            name: 'slug',\n            label: _('common.slug'),\n            type: { kind: 'text' },\n            filterField: 'slug',\n        })\n        .addFilter({\n            name: 'visibility',\n            type: { kind: 'boolean' },\n            label: _('common.visibility'),\n            toFilterInput: value => ({\n                isPrivate: { eq: !value },\n            }),\n        })\n        .addCustomFieldFilters(this.customFields)\n        .connectToRoute(this.route);\n    readonly sorts = this.createSortCollection()\n        .defaultSort('position', 'ASC')\n        .addSort({ name: 'createdAt' })\n        .addSort({ name: 'updatedAt' })\n        .addSort({ name: 'name' })\n        .addSort({ name: 'slug' })\n        .addSort({ name: 'position' })\n        .addCustomFieldSorts(this.customFields)\n        .connectToRoute(this.route);\n\n    constructor(\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n    ) {\n        super();\n        super.configure({\n            document: GetCollectionListDocument,\n            getItems: data => data.collections,\n            setVariables: (skip, _take) => {\n                const topLevelOnly =\n                    this.searchTermControl.value === '' && this.filters.activeFilters.length === 0\n                        ? true\n                        : undefined;\n                return {\n                    options: {\n                        skip,\n                        take: _take,\n                        filter: {\n                            name: { contains: this.searchTermControl.value },\n                            ...this.filters.createFilterInput(),\n                        },\n                        topLevelOnly,\n                        sort: this.sorts.createSortInput(),\n                    },\n                };\n            },\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\n        });\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.activeCollectionId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n        );\n        const expandedIds$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('expanded')),\n            distinctUntilChanged(),\n            map(ids => (ids ? ids.split(',') : [])),\n        );\n        expandedIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\n            this.expandedIds = ids;\n        });\n        this.subCollections$ = combineLatest(expandedIds$, this.refresh$).pipe(\n            switchMap(([ids]) => {\n                if (ids.length) {\n                    return this.dataService.collection\n                        .getCollections({\n                            take: 999,\n                            filter: {\n                                parentId: { in: ids },\n                            },\n                        })\n                        .mapStream(data => data.collections.items);\n                } else {\n                    return of([]);\n                }\n            }),\n        );\n\n        this.activeCollectionTitle$ = combineLatest(\n            this.activeCollectionId$,\n            this.items$,\n            this.subCollections$,\n        ).pipe(\n            map(([id, collections, subCollections]) => {\n                if (id) {\n                    const match = [...collections, ...subCollections].find(c => c.id === id);\n                    return match ? match.name : '';\n                }\n                return '';\n            }),\n        );\n        this.activeCollectionIndex$ = combineLatest(\n            this.activeCollectionId$,\n            this.items$,\n            this.subCollections$,\n        ).pipe(\n            map(([id, collections, subCollections]) => {\n                if (id) {\n                    const allCollections: typeof collections = [];\n                    for (const collection of collections) {\n                        allCollections.push(collection);\n                        const subCollectionMatches = subCollections.filter(\n                            c => c.parentId && c.parentId === collection.id,\n                        );\n                        allCollections.push(...subCollectionMatches);\n                    }\n                    return allCollections.findIndex(c => c.id === id);\n                }\n                return -1;\n            }),\n        );\n    }\n\n    onRearrange(event: CollectionOrderEvent) {\n        this.dataService.collection.moveCollection([event]).subscribe({\n            next: () => {\n                this.notificationService.success(_('common.notify-saved-changes'));\n                this.refresh();\n            },\n            error: err => {\n                this.notificationService.error(_('common.notify-save-changes-error'));\n            },\n        });\n    }\n\n    closeContents() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n\n    toggleExpanded(collection: ItemOf<GetCollectionListQuery, 'collections'>) {\n        let expandedIds = this.expandedIds;\n        if (!expandedIds.includes(collection.id)) {\n            expandedIds.push(collection.id);\n        } else {\n            expandedIds = expandedIds.filter(id => id !== collection.id);\n        }\n        this.router.navigate(['./'], {\n            queryParams: {\n                expanded: expandedIds.filter(id => !!id).join(','),\n            },\n            queryParamsHandling: 'merge',\n            relativeTo: this.route,\n        });\n    }\n}\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { RootNode, TreeNode } from './array-to-tree';\r\nimport { CollectionPartial, RearrangeEvent } from './collection-tree.types';\r\n\r\n/**\r\n * Facilitates communication between the CollectionTreeComponent and child CollectionTreeNodeComponents\r\n * without introducing a cyclic dependency.\r\n */\r\n@Injectable()\r\nexport class CollectionTreeService implements OnDestroy {\r\n    private allMoveListItems: Array<{ path: string; id: string; ancestorIdPath: Set<string> }> = [];\r\n    private collectionTree: RootNode<CollectionPartial>;\r\n    private _rearrange$ = new Subject<RearrangeEvent>();\r\n    private _delete$ = new Subject<string>();\r\n\r\n    public rearrange$: Observable<RearrangeEvent>;\r\n    public delete$: Observable<string>;\r\n\r\n    constructor() {\r\n        this.rearrange$ = this._rearrange$.asObservable();\r\n        this.delete$ = this._delete$.asObservable();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._rearrange$.complete();\r\n        this._delete$.complete();\r\n    }\r\n\r\n    setCollectionTree(tree: RootNode<CollectionPartial>) {\r\n        this.collectionTree = tree;\r\n    }\r\n\r\n    resetMoveList() {\r\n        this.allMoveListItems = [];\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        if (this.allMoveListItems.length === 0) {\r\n            this.allMoveListItems = this.calculateAllMoveListItems();\r\n        }\r\n        return this.allMoveListItems.filter(\r\n            item =>\r\n                item.id !== collection.id &&\r\n                !item.ancestorIdPath.has(collection.id) &&\r\n                item.id !== collection.parent?.id,\r\n        );\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        const item = event.item.data as CollectionPartial;\r\n        const newParent = event.container.data;\r\n        const newParentId = newParent.id;\r\n        if (newParentId == null) {\r\n            throw new Error(`Could not determine the ID of the root Collection`);\r\n        }\r\n        this._rearrange$.next({\r\n            collectionId: item.id,\r\n            parentId: newParentId,\r\n            index: event.currentIndex,\r\n        });\r\n    }\r\n\r\n    onMove(event: RearrangeEvent) {\r\n        this._rearrange$.next(event);\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this._delete$.next(id);\r\n    }\r\n\r\n    private calculateAllMoveListItems() {\r\n        const visit = (\r\n            node: TreeNode<any>,\r\n            parentPath: string[],\r\n            ancestorIdPath: Set<string>,\r\n            output: Array<{ path: string; id: string; ancestorIdPath: Set<string> }>,\r\n        ) => {\r\n            const path = parentPath.concat(node.name);\r\n            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });\r\n            node.children.forEach(child =>\r\n                visit(child, path, new Set<string>([...ancestorIdPath, node.id]), output),\r\n            );\r\n            return output;\r\n        };\r\n        return visit(this.collectionTree, [], new Set<string>(), []);\r\n    }\r\n}\r\n","<div\r\n    cdkDropList\r\n    class=\"tree-node\"\r\n    #dropList\r\n    [cdkDropListData]=\"collectionTree\"\r\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\r\n    (cdkDropListDropped)=\"drop($event)\"\r\n>\r\n    <div\r\n        class=\"collection\"\r\n        [class.private]=\"collection.isPrivate\"\r\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\r\n        cdkDrag\r\n        [cdkDragData]=\"collection\"\r\n    >\r\n        <div\r\n            class=\"collection-detail\"\r\n            [ngClass]=\"'depth-' + depth\"\r\n            [class.active]=\"collection.id === activeCollectionId\"\r\n        >\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrCheckbox\r\n                    [checked]=\"selectionManager.isSelected(collection)\"\r\n                    (click)=\"selectionManager.toggleSelection(collection, $event)\"\r\n                />\r\n            </div>\r\n            <div class=\"name\">\r\n                <button\r\n                    class=\"icon-button folder-button\"\r\n                    [disabled]=\"expandAll\"\r\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\r\n                    (click)=\"toggleExpanded(collection)\"\r\n                >\r\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\r\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\r\n                </button>\r\n                <ng-template #folderSpacer>\r\n                    <div class=\"folder-button-spacer\"></div>\r\n                </ng-template>\r\n                {{ collection.name }}\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\r\n            <a\r\n                class=\"btn btn-link btn-sm\"\r\n                [routerLink]=\"['./', { contents: collection.id }]\"\r\n                queryParamsHandling=\"preserve\"\r\n            >\r\n                <clr-icon shape=\"view-list\"></clr-icon>\r\n                {{ 'catalog.view-contents' | translate }}\r\n            </a>\r\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\r\n                <clr-icon shape=\"edit\"></clr-icon>\r\n                {{ 'common.edit' | translate }}\r\n            </a>\r\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\r\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\r\n            </div>\r\n            <vdr-dropdown>\r\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\r\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <a\r\n                        class=\"dropdown-item\"\r\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.create-new-collection' | translate }}\r\n                    </a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\r\n                        (click)=\"moveUp(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret up\"></clr-icon>\r\n                        {{ 'catalog.move-up' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"\r\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\r\n                        \"\r\n                        (click)=\"moveDown(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                        {{ 'catalog.move-down' | translate }}\r\n                    </button>\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        *ngFor=\"let item of moveListItems\"\r\n                        (click)=\"move(collection, item.id)\"\r\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\r\n                    >\r\n                        <div class=\"move-to-item\">\r\n                            <div class=\"move-icon\">\r\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\r\n                            </div>\r\n                            <div class=\"path\">\r\n                                {{ item.path }}\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        class=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"delete(collection.id)\"\r\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <vdr-collection-tree-node\r\n            *ngIf=\"collection.expanded || expandAll\"\r\n            [expandAll]=\"expandAll\"\r\n            [collectionTree]=\"collection\"\r\n            [activeCollectionId]=\"activeCollectionId\"\r\n            [selectionManager]=\"selectionManager\"\r\n        ></vdr-collection-tree-node>\r\n    </div>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    SimpleChanges,\r\n    SkipSelf,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DataService, Permission, SelectionManager } from '@vendure/admin-ui/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\nimport { RootNode, TreeNode } from './array-to-tree';\r\nimport { CollectionTreeService } from './collection-tree.service';\r\nimport { CollectionPartial } from './collection-tree.types';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree-node',\r\n    templateUrl: './collection-tree-node.component.html',\r\n    styleUrls: ['./collection-tree-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges, OnDestroy {\r\n    depth = 0;\r\n    parentName: string;\r\n    @Input() collectionTree: TreeNode<CollectionPartial>;\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\r\n    hasUpdatePermission$: Observable<boolean>;\r\n    hasDeletePermission$: Observable<boolean>;\r\n    moveListItems: Array<{ path: string; id: string }> = [];\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\r\n        private dataService: DataService,\r\n        private collectionTreeService: CollectionTreeService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private changeDetectorRef: ChangeDetectorRef,\r\n    ) {\r\n        if (parent) {\r\n            this.depth = parent.depth + 1;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.parentName = this.collectionTree.name || '<root>';\r\n        const permissions$ = this.dataService.client\r\n            .userStatus()\r\n            .mapStream(data => data.userStatus.permissions)\r\n            .pipe(shareReplay(1));\r\n        this.hasUpdatePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\r\n            ),\r\n        );\r\n        this.hasDeletePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\r\n            ),\r\n        );\r\n        this.subscription = this.selectionManager?.selectionChanges$.subscribe(() =>\r\n            this.changeDetectorRef.markForCheck(),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const expandAllChange = changes['expandAll'];\r\n        if (expandAllChange) {\r\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\r\n                this.collectionTree.children.forEach(c => (c.expanded = false));\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription?.unsubscribe();\r\n    }\r\n\r\n    trackByFn(index: number, item: CollectionPartial) {\r\n        return item.id;\r\n    }\r\n\r\n    toggleExpanded(collection: TreeNode<CollectionPartial>) {\r\n        collection.expanded = !collection.expanded;\r\n        let expandedIds = this.route.snapshot.queryParamMap.get('expanded')?.split(',') ?? [];\r\n        if (collection.expanded) {\r\n            expandedIds.push(collection.id);\r\n        } else {\r\n            expandedIds = expandedIds.filter(id => id !== collection.id);\r\n        }\r\n        this.router.navigate(['./'], {\r\n            queryParams: {\r\n                expanded: expandedIds.filter(id => !!id).join(','),\r\n            },\r\n            queryParamsHandling: 'merge',\r\n            relativeTo: this.route,\r\n        });\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        this.moveListItems = this.collectionTreeService.getMoveListItems(collection);\r\n    }\r\n\r\n    move(collection: CollectionPartial, parentId: string) {\r\n        this.collectionTreeService.onMove({\r\n            index: 0,\r\n            parentId,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveUp(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.collectionTreeService.onMove({\r\n            index: currentIndex - 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveDown(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.collectionTreeService.onMove({\r\n            index: currentIndex + 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\r\n        this.collectionTreeService.onDrop(event);\r\n    }\r\n\r\n    delete(id: string) {\r\n        this.collectionTreeService.onDelete(id);\r\n    }\r\n}\r\n","export type HasParent = { id: string; parent?: { id: string } | null };\r\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\r\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\r\n\r\n/**\r\n * Builds a tree from an array of nodes which have a parent.\r\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\r\n */\r\nexport function arrayToTree<T extends HasParent>(\r\n    nodes: T[],\r\n    currentState?: RootNode<T>,\r\n    expandedIds: string[] = [],\r\n): RootNode<T> {\r\n    const topLevelNodes: Array<TreeNode<T>> = [];\r\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\r\n    const currentStateMap = treeToMap(currentState);\r\n\r\n    // First map the nodes of the array to an object -> create a hash table.\r\n    for (const node of nodes) {\r\n        mappedArr[node.id] = { ...(node as any), children: [] };\r\n    }\r\n\r\n    for (const id of nodes.map(n => n.id)) {\r\n        if (mappedArr.hasOwnProperty(id)) {\r\n            const mappedElem = mappedArr[id];\r\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? expandedIds.includes(id);\r\n            const parent = mappedElem.parent;\r\n            if (!parent) {\r\n                continue;\r\n            }\r\n            // If the element is not at the root level, add it to its parent array of children.\r\n            const parentIsRoot = !mappedArr[parent.id];\r\n            if (!parentIsRoot) {\r\n                if (mappedArr[parent.id]) {\r\n                    mappedArr[parent.id].children.push(mappedElem);\r\n                } else {\r\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\r\n                }\r\n            } else {\r\n                topLevelNodes.push(mappedElem);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\r\n    return { id: rootId, children: topLevelNodes };\r\n}\r\n\r\n/**\r\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\r\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\r\n * tree.\r\n */\r\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\r\n    const nodeMap = new Map<string, TreeNode<T>>();\r\n    function visit(node: TreeNode<T>) {\r\n        nodeMap.set(node.id, node);\r\n        node.children.forEach(visit);\r\n    }\r\n    if (tree) {\r\n        visit(tree as TreeNode<T>);\r\n    }\r\n    return nodeMap;\r\n}\r\n","<vdr-collection-tree-node\r\n    *ngIf=\"collectionTree\"\r\n    cdkDropListGroup\r\n    [expandAll]=\"expandAll\"\r\n    [collectionTree]=\"collectionTree\"\r\n    [selectionManager]=\"selectionManager\"\r\n    [activeCollectionId]=\"activeCollectionId\"\r\n></vdr-collection-tree-node>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { Collection, SelectionManager } from '@vendure/admin-ui/core';\r\n\r\nimport { arrayToTree, RootNode } from './array-to-tree';\r\nimport { CollectionTreeService } from './collection-tree.service';\r\nimport { CollectionPartial, RearrangeEvent } from './collection-tree.types';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree',\r\n    templateUrl: 'collection-tree.component.html',\r\n    styleUrls: ['./collection-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [CollectionTreeService],\r\n})\r\nexport class CollectionTreeComponent implements OnInit, OnChanges {\r\n    @Input() collections: CollectionPartial[];\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Input() expandedIds: string[] = [];\r\n    @Input() selectionManager: SelectionManager<CollectionPartial>;\r\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\r\n    @Output() deleteCollection = new EventEmitter<string>();\r\n    collectionTree: RootNode<CollectionPartial>;\r\n\r\n    constructor(private collectionTreeService: CollectionTreeService) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('collections' in changes && this.collections) {\r\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree, this.expandedIds);\r\n            this.collectionTreeService.setCollectionTree(this.collectionTree);\r\n            this.collectionTreeService.resetMoveList();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.collectionTreeService.rearrange$.subscribe(event => this.rearrange.emit(event));\r\n        this.collectionTreeService.delete$.subscribe(id => this.deleteCollection.emit(id));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\r\n</ng-template>\r\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\r\n<ul>\r\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\r\n</ul>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, GetProductVariantOptionsQuery } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-confirm-variant-deletion-dialog',\r\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\r\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\r\n    resolveWith: (result?: boolean) => void;\r\n    variants: NonNullable<GetProductVariantOptionsQuery['product']>['variants'] = [];\r\n\r\n    confirm() {\r\n        this.resolveWith(true);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.create-facet-value' | translate }}\r\n</ng-template>\r\n<div class=\"form-grid\" [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input id=\"name\" type=\"text\" formControlName=\"name\" (input)=\"updateCode()\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n        />\r\n    </vdr-form-field>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { CreateFacetValueInput, Dialog, LanguageCode } from '@vendure/admin-ui/core';\r\n\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-create-facet-value-dialog',\r\n    templateUrl: './create-facet-value-dialog.component.html',\r\n    styleUrls: ['./create-facet-value-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CreateFacetValueDialogComponent implements Dialog<CreateFacetValueInput> {\r\n    resolveWith: (result?: CreateFacetValueInput) => void;\r\n    languageCode: LanguageCode;\r\n    form = this.formBuilder.group({\r\n        name: ['', Validators.required],\r\n        code: ['', Validators.required],\r\n    });\r\n    facetId: string;\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    updateCode() {\r\n        const nameControl = this.form.get('name');\r\n        const codeControl = this.form.get('code');\r\n        if (nameControl && codeControl && codeControl.pristine) {\r\n            codeControl.setValue(normalizeString(`${nameControl.value}`, '-'));\r\n        }\r\n    }\r\n\r\n    confirm() {\r\n        const { name, code } = this.form.value;\r\n        if (!name || !code) {\r\n            return;\r\n        }\r\n        this.resolveWith({\r\n            facetId: this.facetId,\r\n            code,\r\n            translations: [{ languageCode: this.languageCode, name }],\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"facet-detail\" />\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n            <vdr-action-bar-dropdown-menu locationId=\"facet-detail\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar formGroupName=\"facet\">\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"visible\"\r\n                            id=\"visibility\"\r\n                        />\r\n                        <label class=\"visible-toggle\">\r\n                            <ng-container *ngIf=\"detailForm.value.facet?.visible; else private\">{{\r\n                                'catalog.public' | translate\r\n                            }}</ng-container>\r\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                        </label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <vdr-card>\r\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card formGroupName=\"facet\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            id=\"code\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Facet\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('facet.customFields')\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                />\r\n            </vdr-card>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"facet-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-card\r\n                *ngIf=\"!(isNew$ | async)\"\r\n                [title]=\"'catalog.facet-values' | translate\"\r\n                [paddingX]=\"false\"\r\n            >\r\n                <ng-template vdrCardControls>\r\n                    <input\r\n                        type=\"text\"\r\n                        class=\"mr-3\"\r\n                        [formControl]=\"filterControl\"\r\n                        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                    />\r\n                </ng-template>\r\n                <ng-container *ngIf=\"values$ | async as filteredValues\">\r\n                    <table class=\"facet-values-list table\" formArrayName=\"values\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                                <ng-container *ngIf=\"customValueFields.length\">\r\n                                    <th>{{ 'common.custom-fields' | translate }}</th>\r\n                                </ng-container>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"\r\n                                    let value of filteredValues\r\n                                        | paginate\r\n                                            : {\r\n                                                  currentPage: currentPage,\r\n                                                  itemsPerPage: itemsPerPage,\r\n                                                  totalItems: totalItems,\r\n                                              };\r\n                                    let i = index\r\n                                \"\r\n                                [formGroup]=\"detailForm.get(['values', value.id])\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        (input)=\"updateValueCode(value.code, $event.target.value, value.id)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input type=\"text\" formControlName=\"code\" />\r\n                                </td>\r\n                                <td class=\"\" *ngIf=\"customValueFields.length\">\r\n                                    <vdr-tabbed-custom-fields\r\n                                        entityName=\"FacetValue\"\r\n                                        [customFields]=\"customValueFields\"\r\n                                        [compact]=\"true\"\r\n                                        [customFieldsFormGroup]=\"\r\n                                            detailForm.get(['values', value.id, 'customFields'])\r\n                                        \"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    ></vdr-tabbed-custom-fields>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-dropdown>\r\n                                        <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n                                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                                        </button>\r\n                                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                class=\"delete-button\"\r\n                                                (click)=\"deleteFacetValue(value.id)\"\r\n                                                [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                                vdrDropdownItem\r\n                                            >\r\n                                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                                {{ 'common.delete' | translate }}\r\n                                            </button>\r\n                                        </vdr-dropdown-menu>\r\n                                    </vdr-dropdown>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div class=\"pagination-wrapper\">\r\n                        <vdr-items-per-page-controls\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n                        ></vdr-items-per-page-controls>\r\n                        <vdr-pagination-controls\r\n                            [currentPage]=\"currentPage\"\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            [totalItems]=\"totalItems\"\r\n                            (pageChange)=\"setCurrentPage($event)\"\r\n                        ></vdr-pagination-controls>\r\n                    </div>\r\n                </ng-container>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"button m-3\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                        (click)=\"addFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"add\"></clr-icon>\r\n                        {{ 'catalog.add-facet-value' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n    FormBuilder,\r\n    FormControl,\r\n    FormGroup,\r\n    FormRecord,\r\n    UntypedFormControl,\r\n    UntypedFormGroup,\r\n    Validators,\r\n} from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CreateFacetInput,\r\n    createUpdatedTranslatable,\r\n    DataService,\r\n    DeletionResult,\r\n    FACET_WITH_VALUE_LIST_FRAGMENT,\r\n    FacetWithValueListFragment,\r\n    findTranslation,\r\n    getCustomFieldsDefaults,\r\n    GetFacetDetailDocument,\r\n    GetFacetDetailQuery,\r\n    GetFacetDetailQueryVariables,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    TypedBaseDetailComponent,\r\n    UpdateFacetInput,\r\n    UpdateFacetValueInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-types';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { gql } from 'apollo-angular';\r\nimport { BehaviorSubject, combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\r\nimport { debounceTime, map, mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport { CreateFacetValueDialogComponent } from '../create-facet-value-dialog/create-facet-value-dialog.component';\r\n\r\nexport const FACET_DETAIL_QUERY = gql`\r\n    query GetFacetDetail($id: ID!, $facetValueListOptions: FacetValueListOptions) {\r\n        facet(id: $id) {\r\n            ...FacetWithValueList\r\n        }\r\n    }\r\n    ${FACET_WITH_VALUE_LIST_FRAGMENT}\r\n`;\r\n\r\ntype ValueItem =\r\n    | FacetWithValueListFragment['valueList']['items'][number]\r\n    | { id: string; name: string; code: string };\r\n\r\n@Component({\r\n    selector: 'vdr-facet-detail',\r\n    templateUrl: './facet-detail.component.html',\r\n    styleUrls: ['./facet-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FacetDetailComponent\r\n    extends TypedBaseDetailComponent<typeof GetFacetDetailDocument, 'facet'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    readonly customFields = this.getCustomFieldConfig('Facet');\r\n    readonly customValueFields = this.getCustomFieldConfig('FacetValue');\r\n    detailForm = this.formBuilder.group({\r\n        facet: this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: '',\r\n            visible: true,\r\n            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n        }),\r\n        values: this.formBuilder.record<\r\n            FormGroup<{\r\n                id: FormControl<string>;\r\n                name: FormControl<string>;\r\n                code: FormControl<string>;\r\n                customFields: FormGroup;\r\n            }>\r\n        >({}),\r\n    });\r\n    currentPage = 1;\r\n    itemsPerPage = 10;\r\n    totalItems = 0;\r\n    filterControl = new FormControl('');\r\n    values$ = new BehaviorSubject<ValueItem[]>([]);\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.filterControl.valueChanges\r\n            .pipe(debounceTime(200), takeUntil(this.destroy$))\r\n            .subscribe(filterTerm => {\r\n                this.currentPage = 1;\r\n                this.fetchFacetValues(this.currentPage, this.itemsPerPage, filterTerm);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['facet', 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    updateValueCode(currentCode: string, nameValue: string, valueId: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['values', valueId, 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    customValueFieldIsSet(index: number, name: string): boolean {\r\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\r\n    }\r\n\r\n    addFacetValue() {\r\n        this.modalService\r\n            .fromComponent(CreateFacetValueDialogComponent, {\r\n                locals: {\r\n                    languageCode: this.languageCode,\r\n                    facetId: this.id,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (!result) {\r\n                        return EMPTY;\r\n                    } else {\r\n                        return this.dataService.facet.createFacetValues([result]);\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result.createFacetValues) {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.currentPage = 1;\r\n                    this.fetchFacetValues(this.currentPage, this.itemsPerPage);\r\n                }\r\n            });\r\n    }\r\n\r\n    create() {\r\n        const facetForm = this.detailForm.get('facet') as (typeof this.detailForm)['controls']['facet'];\r\n        if (!facetForm || !facetForm.dirty) {\r\n            return;\r\n        }\r\n        const newFacet = this.getUpdatedFacet(\r\n            {\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                isPrivate: false,\r\n                languageCode: this.languageCode,\r\n                name: '',\r\n                code: '',\r\n                translations: [],\r\n            },\r\n            facetForm,\r\n            this.languageCode,\r\n        ) as CreateFacetInput;\r\n        this.dataService.facet.createFacet(newFacet).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Facet',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        const valuesFormRecord = this.detailForm.get(\r\n            'values',\r\n        ) as (typeof this.detailForm)['controls']['values'];\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([facet, languageCode]) => {\r\n                    const facetForm = this.detailForm.get(\r\n                        'facet',\r\n                    ) as (typeof this.detailForm)['controls']['facet'];\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n\r\n                    if (facetForm && facetForm.dirty) {\r\n                        const updatedFacetInput = this.getUpdatedFacet(\r\n                            facet,\r\n                            facetForm,\r\n                            languageCode,\r\n                        ) as UpdateFacetInput;\r\n                        if (updatedFacetInput) {\r\n                            updateOperations.push(this.dataService.facet.updateFacet(updatedFacetInput));\r\n                        }\r\n                    }\r\n                    if (valuesFormRecord && valuesFormRecord.dirty) {\r\n                        const updatedValues = this.getUpdatedFacetValues(valuesFormRecord, languageCode);\r\n                        if (updatedValues.length) {\r\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\r\n                        }\r\n                    }\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Facet',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    deleteFacetValue(facetValueId: string) {\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                switchMap(deleted =>\r\n                    deleted\r\n                        ? this.dataService.query(GetFacetDetailDocument, {\r\n                              id: this.id,\r\n                          }).single$\r\n                        : [],\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(facetValueId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet-value'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\r\n                ),\r\n                map(result => result.deleteFacetValues[0]),\r\n            );\r\n    }\r\n\r\n    protected setCurrentPage(newPage: number) {\r\n        this.currentPage = newPage;\r\n        this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);\r\n    }\r\n\r\n    protected setItemsPerPage(itemsPerPage: number) {\r\n        this.itemsPerPage = itemsPerPage;\r\n        this.fetchFacetValues(this.currentPage, this.itemsPerPage, this.filterControl.value);\r\n    }\r\n\r\n    private fetchFacetValues(currentPage: number, itemsPerPage: number, filterTerm?: string | null) {\r\n        this.dataService\r\n            .query<GetFacetDetailQuery, GetFacetDetailQueryVariables>(FACET_DETAIL_QUERY, {\r\n                id: this.id,\r\n                facetValueListOptions: {\r\n                    take: itemsPerPage,\r\n                    skip: (currentPage - 1) * itemsPerPage,\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                    ...(filterTerm ? { filter: { name: { contains: filterTerm } } } : {}),\r\n                },\r\n            })\r\n            .single$.subscribe(({ facet }) => {\r\n                if (facet) {\r\n                    this.values$.next([...facet.valueList.items]);\r\n                    this.totalItems = facet.valueList.totalItems;\r\n                    this.setFacetValueFormValues(facet, this.languageCode);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the facet or current language.\r\n     */\r\n    protected setFormValues(facet: FacetWithValueListFragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(facet, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            facet: {\r\n                code: facet.code,\r\n                visible: !facet.isPrivate,\r\n                name: currentTranslation?.name ?? '',\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['facet', 'customFields']),\r\n                facet,\r\n                currentTranslation,\r\n            );\r\n        }\r\n        this.values$.next([...facet.valueList.items]);\r\n        this.totalItems = facet.valueList.totalItems;\r\n        this.setFacetValueFormValues(facet, languageCode);\r\n    }\r\n\r\n    private setFacetValueFormValues(facet: FacetWithValueListFragment, languageCode: LanguageCode) {\r\n        const currentValuesFormGroup = this.detailForm.get('values') as FormRecord;\r\n        facet.valueList.items.forEach(value => {\r\n            const valueTranslation = findTranslation(value, languageCode);\r\n            const group = {\r\n                id: value.id,\r\n                code: value.code,\r\n                name: valueTranslation ? valueTranslation.name : '',\r\n            };\r\n            let valueControl = currentValuesFormGroup.get(value.id) as FormGroup;\r\n            if (!valueControl) {\r\n                valueControl = this.formBuilder.group(group);\r\n                currentValuesFormGroup.addControl(value.id, valueControl);\r\n            } else {\r\n                valueControl.patchValue(group);\r\n            }\r\n            if (this.customValueFields.length) {\r\n                let customValueFieldsGroup = valueControl.get(['customFields']) as\r\n                    | UntypedFormGroup\r\n                    | undefined;\r\n                if (!customValueFieldsGroup) {\r\n                    customValueFieldsGroup = new UntypedFormGroup({});\r\n                    valueControl.addControl('customFields', customValueFieldsGroup);\r\n                }\r\n\r\n                if (customValueFieldsGroup) {\r\n                    for (const fieldDef of this.customValueFields) {\r\n                        const key = fieldDef.name;\r\n                        const fieldValue =\r\n                            fieldDef.type === 'localeString'\r\n                                ? (valueTranslation as any | undefined)?.customFields?.[key]\r\n                                : (value as any).customFields[key];\r\n                        const control = customValueFieldsGroup.get(key);\r\n                        if (control) {\r\n                            control.setValue(fieldValue);\r\n                        } else {\r\n                            customValueFieldsGroup.addControl(key, new UntypedFormControl(fieldValue));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedFacet(\r\n        facet: Omit<FacetWithValueListFragment, 'valueList'>,\r\n        facetFormGroup: (typeof this.detailForm)['controls']['facet'],\r\n        languageCode: LanguageCode,\r\n    ): CreateFacetInput | UpdateFacetInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: facet,\r\n            updatedFields: facetFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: facet.name || '',\r\n            },\r\n        });\r\n        input.isPrivate = !facetFormGroup.value.visible;\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\r\n     * which can be persisted to the API via an updateFacetValues mutation.\r\n     */\r\n    private getUpdatedFacetValues(\r\n        valuesFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateFacetValueInput[] {\r\n        const dirtyValueValues = Object.values(valuesFormGroup.controls)\r\n            .filter(c => c.dirty)\r\n            .map(c => c.value);\r\n\r\n        return dirtyValueValues\r\n            .map((value, i) =>\r\n                createUpdatedTranslatable({\r\n                    translatable: value,\r\n                    updatedFields: value,\r\n                    customFieldConfig: this.customValueFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                }),\r\n            )\r\n            .filter(notNullOrUndefined);\r\n    }\r\n}\r\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BulkAction,\r\n    createBulkAssignToChannelAction,\r\n    createBulkDeleteAction,\r\n    createBulkRemoveFromChannelAction,\r\n    currentChannelIsNotDefault,\r\n    DataService,\r\n    DuplicateEntityDialogComponent,\r\n    getChannelCodeFromUserStatus,\r\n    GetFacetListQuery,\r\n    ItemOf,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    RemoveFacetsFromChannelMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { FacetListComponent } from './facet-list.component';\r\n\r\nexport const deleteFacetsBulkAction = createBulkDeleteAction<ItemOf<GetFacetListQuery, 'facets'>>({\r\n    location: 'facet-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteFacet) ||\r\n        userPermissions.includes(Permission.DeleteCatalog),\r\n    getItemName: item => item.name,\r\n    shouldRetryItem: (response, item) => !!response.message,\r\n    bulkDelete: (dataService, ids, retrying) =>\r\n        dataService.facet.deleteFacets(ids, retrying).pipe(map(res => res.deleteFacets)),\r\n});\r\n\r\nexport const assignFacetsToChannelBulkAction = createBulkAssignToChannelAction<\r\n    ItemOf<GetFacetListQuery, 'facets'>\r\n>({\r\n    location: 'facet-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateFacet),\r\n    getItemName: item => item.name,\r\n    bulkAssignToChannel: (dataService, facetIds, channelIds) =>\r\n        channelIds.map(channelId =>\r\n            dataService.facet\r\n                .assignFacetsToChannel({\r\n                    facetIds,\r\n                    channelId,\r\n                })\r\n                .pipe(map(res => res.assignFacetsToChannel)),\r\n        ),\r\n});\r\n\r\nexport const removeFacetsFromChannelBulkAction = createBulkRemoveFromChannelAction<\r\n    ItemOf<GetFacetListQuery, 'facets'>,\r\n    RemoveFacetsFromChannelMutation['removeFacetsFromChannel'][number]\r\n>({\r\n    location: 'facet-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteCatalog) ||\r\n        userPermissions.includes(Permission.DeleteFacet),\r\n    getItemName: item => item.name,\r\n    bulkRemoveFromChannel: (dataService, facetIds, channelId, retrying) =>\r\n        dataService.facet\r\n            .removeFacetsFromChannel({\r\n                channelId: channelId,\r\n                facetIds,\r\n                force: retrying,\r\n            })\r\n            .pipe(map(res => res.removeFacetsFromChannel)),\r\n    isErrorResult: result => (result.__typename === 'FacetInUseError' ? result.message : undefined),\r\n});\r\n\r\nexport const removeFacetsFromChannelBulkAction2: BulkAction<\r\n    ItemOf<GetFacetListQuery, 'facets'>,\r\n    FacetListComponent\r\n> = {\r\n    location: 'facet-list',\r\n    label: _('catalog.remove-from-channel'),\r\n    getTranslationVars: ({ injector }) => getChannelCodeFromUserStatus(injector.get(DataService)),\r\n    icon: 'layers',\r\n    iconClass: 'is-warning',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateFacet) ||\r\n        userPermissions.includes(Permission.UpdateCatalog),\r\n    isVisible: ({ injector }) => currentChannelIsNotDefault(injector.get(DataService)),\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const dataService = injector.get(DataService);\r\n        const notificationService = injector.get(NotificationService);\r\n\r\n        const activeChannelId$ = dataService.client\r\n            .userStatus()\r\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\r\n\r\n        function showModalAndDelete(facetIds: string[], message?: string) {\r\n            return modalService\r\n                .dialog({\r\n                    title: _('catalog.remove-from-channel'),\r\n                    translationVars: {\r\n                        count: selection.length,\r\n                    },\r\n                    size: message ? 'lg' : 'md',\r\n                    body: message,\r\n                    buttons: [\r\n                        { type: 'secondary', label: _('common.cancel') },\r\n                        {\r\n                            type: 'danger',\r\n                            label: message ? _('common.force-remove') : _('common.remove'),\r\n                            returnValue: true,\r\n                        },\r\n                    ],\r\n                })\r\n                .pipe(\r\n                    switchMap(res =>\r\n                        res\r\n                            ? activeChannelId$.pipe(\r\n                                  switchMap(activeChannelId =>\r\n                                      activeChannelId\r\n                                          ? dataService.facet.removeFacetsFromChannel({\r\n                                                channelId: activeChannelId,\r\n                                                facetIds,\r\n                                                force: !!message,\r\n                                            })\r\n                                          : EMPTY,\r\n                                  ),\r\n                                  map(res2 => res2.removeFacetsFromChannel),\r\n                              )\r\n                            : EMPTY,\r\n                    ),\r\n                );\r\n        }\r\n\r\n        showModalAndDelete(unique(selection.map(f => f.id)))\r\n            .pipe(\r\n                switchMap(result => {\r\n                    let removedCount = selection.length;\r\n                    const errors: string[] = [];\r\n                    const errorIds: string[] = [];\r\n                    let i = 0;\r\n                    for (const item of result) {\r\n                        if (item.__typename === 'FacetInUseError') {\r\n                            errors.push(item.message);\r\n                            errorIds.push(selection[i]?.id);\r\n                            removedCount--;\r\n                        }\r\n                        i++;\r\n                    }\r\n                    if (0 < errorIds.length) {\r\n                        return showModalAndDelete(errorIds, errors.join('\\n')).pipe(\r\n                            map(result2 => {\r\n                                const notRemovedCount = result2.filter(\r\n                                    r => r.__typename === 'FacetInUseError',\r\n                                ).length;\r\n                                return selection.length - notRemovedCount;\r\n                            }),\r\n                        );\r\n                    } else {\r\n                        return of(removedCount);\r\n                    }\r\n                }),\r\n                switchMap(removedCount =>\r\n                    removedCount\r\n                        ? getChannelCodeFromUserStatus(dataService).then(({ channelCode }) => ({\r\n                              channelCode,\r\n                              removedCount,\r\n                          }))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(({ removedCount, channelCode }) => {\r\n                if (removedCount) {\r\n                    hostComponent.refresh();\r\n                    clearSelection();\r\n                    notificationService.success(_('catalog.notify-remove-facets-from-channel-success'), {\r\n                        count: removedCount,\r\n                        channelCode,\r\n                    });\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport const duplicateFacetsBulkAction: BulkAction<\r\n    ItemOf<GetFacetListQuery, 'facets'>,\r\n    FacetListComponent\r\n> = {\r\n    location: 'facet-list',\r\n    label: _('common.duplicate'),\r\n    icon: 'copy',\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        modalService\r\n            .fromComponent(DuplicateEntityDialogComponent<ItemOf<GetFacetListQuery, 'facets'>>, {\r\n                locals: {\r\n                    entities: selection,\r\n                    entityName: 'Facet',\r\n                    title: _('catalog.duplicate-facets'),\r\n                    getEntityName: entity => entity.name,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    clearSelection();\r\n                    hostComponent.refresh();\r\n                }\r\n            });\r\n    },\r\n};\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"facet-list\" />\r\n            <a\r\n                class=\"btn btn-primary\"\r\n                [routerLink]=\"['./create']\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n            >\r\n                <clr-icon shape=\"plus\"></clr-icon>\r\n                {{ 'catalog.create-new-facet' | translate }}\r\n            </a>\r\n            <vdr-action-bar-dropdown-menu locationId=\"facet-list\" />\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableListId\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        locationId=\"facet-list\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    ></vdr-bulk-action-menu>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'catalog.filter-by-name' | translate\"\r\n    ></vdr-dt2-search>\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-facet=\"item\">\r\n            {{ facet.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('createdAt')\"\r\n    >\r\n        <ng-template let-facet=\"item\">\r\n            {{ facet.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('updatedAt')\"\r\n    >\r\n        <ng-template let-facet=\"item\">\r\n            {{ facet.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\r\n        <ng-template let-facet=\"item\">\r\n            <a class=\"button-ghost\" [routerLink]=\"['./', facet.id]\"\r\n                ><span>{{ facet.name }}</span>\r\n                <clr-icon shape=\"arrow right\"></clr-icon>\r\n            </a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.code' | translate\" id=\"code\">\r\n        <ng-template let-facet=\"item\">\r\n            {{ facet.code }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.visibility' | translate\" id=\"visibility\">\r\n        <ng-template let-facet=\"item\">\r\n            <vdr-chip *ngIf=\"facet.isPrivate\" colorType=\"warning\">{{\r\n                'common.private' | translate\r\n            }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"!facet.isPrivate\" colorType=\"success\">{{\r\n                'common.public' | translate\r\n            }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'catalog.values' | translate\" id=\"values\">\r\n        <ng-template let-facet=\"item\">\r\n            <div class=\"facet-values-list\">\r\n                <vdr-facet-value-chip\r\n                    *ngFor=\"let value of facet.valueList.items | slice : 0 : displayLimit[facet.id] || 3\"\r\n                    [facetValue]=\"value\"\r\n                    [removable]=\"false\"\r\n                    [displayFacetName]=\"false\"\r\n                ></vdr-facet-value-chip>\r\n                <vdr-chip *ngIf=\"displayLimit[facet.id] < facet.valueList.totalItems && (displayLimit[facet.id] || 0) === facet.valueList.items.length\">\r\n                    ... + {{ facet.valueList.totalItems - facet.valueList.items.length }}\r\n                </vdr-chip>\r\n                <button\r\n                    class=\"button-small\"\r\n                    *ngIf=\"facet.valueList.items.length > initialLimit\"\r\n                    (click)=\"toggleDisplayLimit(facet)\"\r\n                >\r\n                    <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.valueList.items.length; else collapse\">\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ facet.valueList.totalItems - initialLimit }}\r\n                    </ng-container>\r\n                    <ng-template #collapse>\r\n                        <clr-icon shape=\"minus\"></clr-icon>\r\n                    </ng-template>\r\n                </button>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column *ngFor=\"let customField of customFields\" [customField]=\"customField\" [sorts]=\"sorts\" />\r\n</vdr-data-table-2>\r\n","import { Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    FACET_WITH_VALUE_LIST_FRAGMENT,\n    GetFacetListDocument,\n    GetFacetListQuery,\n    ItemOf,\n    LanguageCode,\n    TypedBaseListComponent,\n} from '@vendure/admin-ui/core';\nimport { gql } from 'apollo-angular';\n\nexport const FACET_LIST_QUERY = gql`\n    query GetFacetList($options: FacetListOptions, $facetValueListOptions: FacetValueListOptions) {\n        facets(options: $options) {\n            items {\n                ...FacetWithValueList\n            }\n            totalItems\n        }\n    }\n    ${FACET_WITH_VALUE_LIST_FRAGMENT}\n`;\n\n@Component({\n    selector: 'vdr-facet-list',\n    templateUrl: './facet-list.component.html',\n    styleUrls: ['./facet-list.component.scss'],\n})\nexport class FacetListComponent\n    extends TypedBaseListComponent<typeof GetFacetListDocument, 'facets'>\n    implements OnInit\n{\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n\n    dataTableListId = 'facet-list';\n    readonly customFields = this.getCustomFieldConfig('Facet');\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilter({\n            name: 'visibility',\n            type: { kind: 'boolean' },\n            label: _('common.visibility'),\n            toFilterInput: value => ({\n                isPrivate: { eq: !value },\n            }),\n        })\n        .addCustomFieldFilters(this.customFields)\n        .connectToRoute(this.route);\n\n    readonly sorts = this.createSortCollection()\n        .defaultSort('createdAt', 'DESC')\n        .addSort({ name: 'id' })\n        .addSort({ name: 'createdAt' })\n        .addSort({ name: 'updatedAt' })\n        .addSort({ name: 'name' })\n        .addSort({ name: 'code' })\n        .addCustomFieldSorts(this.customFields)\n        .connectToRoute(this.route);\n\n    constructor(protected dataService: DataService) {\n        super();\n        super.configure({\n            document: GetFacetListDocument,\n            getItems: data => data.facets,\n            setVariables: (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        name: {\n                            contains: this.searchTermControl.value,\n                        },\n                        ...this.filters.createFilterInput(),\n                    },\n                    sort: this.sorts.createSortInput(),\n                },\n                facetValueListOptions: {\n                    take: 100,\n                },\n            }),\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\n        });\n    }\n\n    toggleDisplayLimit(facet: ItemOf<GetFacetListQuery, 'facets'>) {\n        if (this.displayLimit[facet.id] === facet.valueList.items.length) {\n            this.displayLimit[facet.id] = this.initialLimit;\n        } else {\n            this.displayLimit[facet.id] = facet.valueList.items.length;\n        }\n    }\n\n    setLanguage(code: LanguageCode) {\n        this.dataService.client.setContentLanguage(code).subscribe();\n    }\n}\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input\r\n            #optionGroupName\r\n            placeholder=\"e.g. Size\"\r\n            clrInput\r\n            [(ngModel)]=\"group.name\"\r\n            name=\"name\"\r\n            required\r\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\r\n        />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            (edit)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n    <div class=\"remove-group\">\r\n        <button\r\n            class=\"button-small mt-2\"\r\n            [title]=\"'catalog.remove-option' | translate\"\r\n            (click)=\"removeOption(group.name)\"\r\n        >\r\n            <clr-icon shape=\"trash\"></clr-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n<button class=\"button mb-2\" (click)=\"addOption()\">\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<ng-container *ngIf=\"stockLocations$ | async as stockLocations\">\r\n    <clr-alert *ngIf=\"stockLocations.length === 0\" clrAlertType=\"warning\" [clrAlertClosable]=\"false\" class=\"\">\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'catalog.no-stock-locations-available-on-current-channel' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <div class=\"form-grid mb-2\">\r\n        <vdr-form-field *ngIf=\"stockLocations.length\" [label]=\"'catalog.add-stock-to-location' | translate\">\r\n            <select [(ngModel)]=\"selectedStockLocationId\">\r\n                <option *ngFor=\"let location of stockLocations\" [value]=\"location.id\">\r\n                    {{ location.name }}\r\n                </option>\r\n            </select>\r\n        </vdr-form-field>\r\n    </div>\r\n\r\n    <div class=\"variants-preview\" *ngIf=\"0 < stockLocations.length\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\r\n                    <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\r\n                    <th>{{ 'catalog.sku' | translate }}</th>\r\n                    <th>{{ 'catalog.price' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let variant of variants; trackBy: trackByFn\"\r\n                [class.disabled]=\"!variantFormValues[variant.id].value.enabled === false\"\r\n                [formGroup]=\"variantFormValues[variant.id]\"\r\n            >\r\n                <td *ngIf=\"1 < variants.length\">\r\n                    <input type=\"checkbox\" formControlName=\"enabled\" clrCheckbox />\r\n                </td>\r\n                <td *ngIf=\"1 < variants.length\">\r\n                    {{ variant.values.join(' ') }}\r\n                </td>\r\n                <td>\r\n                    <vdr-form-field>\r\n                        <input type=\"text\" formControlName=\"sku\" [placeholder]=\"'catalog.sku' | translate\" />\r\n                    </vdr-form-field>\r\n                </td>\r\n                <td>\r\n                    <vdr-form-field>\r\n                        <vdr-currency-input\r\n                            formControlName=\"price\"\r\n                            [currencyCode]=\"currencyCode\"\r\n                        ></vdr-currency-input>\r\n                    </vdr-form-field>\r\n                </td>\r\n                <td>\r\n                    <vdr-form-field>\r\n                        <input type=\"number\" formControlName=\"stock\" min=\"0\" step=\"1\" />\r\n                    </vdr-form-field>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</ng-container>\r\n","import { Component, ElementRef, EventEmitter, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    GetStockLocationListDocument,\r\n    GetStockLocationListQuery,\r\n    ItemOf,\r\n} from '@vendure/admin-ui/core';\r\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\r\n\r\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\r\nexport type CreateVariantValues = {\r\n    optionValues: string[];\r\n    enabled: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n};\r\nexport type CreateProductVariantsConfig = {\r\n    groups: Array<{ name: string; values: string[] }>;\r\n    variants: CreateVariantValues[];\r\n    stockLocationId: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-generate-product-variants',\r\n    templateUrl: './generate-product-variants.component.html',\r\n    styleUrls: ['./generate-product-variants.component.scss'],\r\n})\r\nexport class GenerateProductVariantsComponent implements OnInit {\r\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\r\n    @ViewChildren('optionGroupName', { read: ElementRef }) groupNameInputs: QueryList<ElementRef>;\r\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\r\n    currencyCode: CurrencyCode;\r\n    variants: Array<{ id: string; values: string[] }>;\r\n    variantFormValues: {\r\n        [id: string]: FormGroup<{\r\n            optionValues: FormControl<string[]>;\r\n            enabled: FormControl<boolean>;\r\n            price: FormControl<number>;\r\n            sku: FormControl<string>;\r\n            stock: FormControl<number>;\r\n        }>;\r\n    } = {};\r\n    stockLocations$: Observable<Array<ItemOf<GetStockLocationListQuery, 'stockLocations'>>>;\r\n    selectedStockLocationId: string | null = null;\r\n    constructor(\r\n        private dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.defaultCurrencyCode;\r\n        });\r\n        this.stockLocations$ = this.dataService\r\n            .query(GetStockLocationListDocument, {\r\n                options: {\r\n                    take: 999,\r\n                },\r\n            })\r\n            .refetchOnChannelChange()\r\n            .mapStream(({ stockLocations }) => stockLocations.items)\r\n            .pipe(\r\n                tap(items => {\r\n                    if (items.length) {\r\n                        this.selectedStockLocationId = items[0].id;\r\n                        this.onFormChange();\r\n                    }\r\n                }),\r\n            );\r\n\r\n        this.generateVariants();\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({ name: '', values: [] });\r\n        const index = this.optionGroups.length - 1;\r\n        setTimeout(() => {\r\n            const input = this.groupNameInputs.get(index)?.nativeElement;\r\n            input?.focus();\r\n        });\r\n    }\r\n\r\n    removeOption(name: string) {\r\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\r\n        this.generateVariants();\r\n    }\r\n\r\n    generateVariants() {\r\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\r\n        const groups = totalValuesCount\r\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\r\n            : [[DEFAULT_VARIANT_CODE]];\r\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\r\n\r\n        this.variants.forEach((variant, index) => {\r\n            if (!this.variantFormValues[variant.id]) {\r\n                const formGroup = this.formBuilder.nonNullable.group({\r\n                    optionValues: [variant.values],\r\n                    enabled: true as boolean,\r\n                    price: this.copyFromDefault(variant.id, 'price', 0),\r\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\r\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\r\n                });\r\n                formGroup.valueChanges.subscribe(() => this.onFormChange());\r\n                if (index === 0) {\r\n                    formGroup.get('price')?.valueChanges.subscribe(value => {\r\n                        this.copyValuesToPristine('price', formGroup.get('price'));\r\n                    });\r\n                    formGroup.get('sku')?.valueChanges.subscribe(value => {\r\n                        this.copyValuesToPristine('sku', formGroup.get('sku'));\r\n                    });\r\n                    formGroup.get('stock')?.valueChanges.subscribe(value => {\r\n                        this.copyValuesToPristine('stock', formGroup.get('stock'));\r\n                    });\r\n                }\r\n                this.variantFormValues[variant.id] = formGroup;\r\n            }\r\n        });\r\n        this.onFormChange();\r\n    }\r\n\r\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\r\n        return variant.values.join('|');\r\n    }\r\n\r\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        optionValueInputComponent.focus();\r\n    }\r\n\r\n    copyValuesToPristine(field: 'price' | 'sku' | 'stock', formControl: AbstractControl | null) {\r\n        if (!formControl) {\r\n            return;\r\n        }\r\n        Object.values(this.variantFormValues).forEach(formGroup => {\r\n            const correspondingFormControl = formGroup.get(field) as FormControl;\r\n            if (correspondingFormControl && correspondingFormControl.pristine) {\r\n                correspondingFormControl.setValue(formControl.value, { emitEvent: false });\r\n            }\r\n        });\r\n    }\r\n\r\n    onFormChange() {\r\n        const variantsToCreate = this.variants\r\n            .map(v => this.variantFormValues[v.id].value as CreateVariantValues)\r\n            .filter(v => v.enabled);\r\n        this.variantsChange.emit({\r\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\r\n            variants: variantsToCreate,\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            stockLocationId: this.selectedStockLocationId!,\r\n        });\r\n    }\r\n\r\n    private copyFromDefault<T extends keyof CreateVariantValues>(\r\n        variantId: string,\r\n        prop: T,\r\n        value: CreateVariantValues[T],\r\n    ): CreateVariantValues[T] {\r\n        return variantId !== DEFAULT_VARIANT_CODE\r\n            ? (this.variantFormValues[DEFAULT_VARIANT_CODE].get(prop)?.value as CreateVariantValues[T])\r\n            : value;\r\n    }\r\n}\r\n","<vdr-page-block *ngIf=\"!hideLanguageSelect\">\r\n    <vdr-language-selector\r\n        [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n        [currentLanguageCode]=\"contentLanguage$ | async\"\r\n        (languageCodeChange)=\"setLanguage($event)\"\r\n    ></vdr-language-selector>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableId || 'product-variant-list'\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        locationId=\"product-variant-list\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    />\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\r\n    />\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('createdAt')\"\r\n    >\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('updatedAt')\"\r\n    >\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n        <ng-template let-variant=\"item\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"variant.featuredAsset as asset; else imagePlaceholder\"\r\n                    [src]=\"asset | assetPreview : 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\r\n        <ng-template let-variant=\"item\">\r\n            <a\r\n                class=\"button-ghost\"\r\n                [routerLink]=\"['/catalog/products', variant.productId, 'variants', variant.id]\"\r\n                ><span>{{ variant.name }}</span\r\n                ><clr-icon shape=\"arrow right\"\r\n            /></a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'catalog.sku' | translate\" id=\"sku\" [sort]=\"sorts.get('sku')\">\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.sku }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\r\n        <ng-template let-variant=\"item\">\r\n            <vdr-chip *ngIf=\"variant.enabled\" colorType=\"success\">{{\r\n                'common.enabled' | translate\r\n            }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"!variant.enabled\" colorType=\"warning\">{{\r\n                'common.disabled' | translate\r\n            }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.price' | translate\" id=\"price\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('price')\"\r\n    >\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.price | localeCurrency : variant.currencyCode }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.price-with-tax' | translate\" id=\"price-with-tax\" [sort]=\"sorts.get('priceWithTax')\">\r\n        <ng-template let-variant=\"item\">\r\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n\r\n    <vdr-dt2-column [heading]=\"'catalog.stock-on-hand' | translate\" id=\"stock-on-hand\" [hiddenByDefault]=\"false\">\r\n        <ng-template let-variant=\"item\">\r\n            <vdr-chip *ngFor=\"let stockLevel of variant.stockLevels\" [title]=\"stockLevel.stockLocation?.name\">\r\n                <div class=\"flex center\">\r\n                    <div>\r\n                        {{ stockLevel.stockOnHand\r\n                        }}<span class=\"ml-1\" *ngIf=\"stockLevel.stockAllocated\"\r\n                            >({{ stockLevel.stockAllocated }} allocated)</span\r\n                        >\r\n                    </div>\r\n                </div>\r\n            </vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column *ngFor=\"let field of customFields\" [customField]=\"field\" [sorts]=\"sorts\" />\r\n</vdr-data-table-2>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataTableLocationId,\r\n    LogicalOperator,\r\n    ProductVariantFilterParameter,\r\n    ProductVariantListQueryDocument,\r\n    TypedBaseListComponent,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-product-variant-list',\r\n    templateUrl: './product-variant-list.component.html',\r\n    styleUrls: ['./product-variant-list.component.scss'],\r\n})\r\nexport class ProductVariantListComponent\r\n    extends TypedBaseListComponent<typeof ProductVariantListQueryDocument, 'productVariants'>\r\n    implements OnInit\r\n{\r\n    @Input() productId?: string;\r\n    @Input() hideLanguageSelect = false;\r\n    @Input() dataTableId: DataTableLocationId | undefined;\r\n    readonly customFields = this.getCustomFieldConfig('ProductVariant');\r\n    readonly filters = this.createFilterCollection()\r\n        .addIdFilter()\r\n        .addDateFilters()\r\n        .addFilters([\r\n            {\r\n                name: 'name',\r\n                type: { kind: 'text' },\r\n                label: _('common.name'),\r\n                filterField: 'name',\r\n            },\r\n            {\r\n                name: 'enabled',\r\n                type: { kind: 'boolean' },\r\n                label: _('common.enabled'),\r\n                filterField: 'enabled',\r\n            },\r\n            {\r\n                name: 'sku',\r\n                type: { kind: 'text' },\r\n                label: _('catalog.sku'),\r\n                filterField: 'sku',\r\n            },\r\n            {\r\n                name: 'price',\r\n                type: { kind: 'number', inputType: 'currency' },\r\n                label: _('common.price'),\r\n                filterField: 'price',\r\n            },\r\n            {\r\n                name: 'priceWithTax',\r\n                type: { kind: 'number', inputType: 'currency' },\r\n                label: _('common.price-with-tax'),\r\n                filterField: 'priceWithTax',\r\n            },\r\n        ])\r\n        .addCustomFieldFilters(this.customFields)\r\n        .connectToRoute(this.route);\r\n\r\n    readonly sorts = this.createSortCollection()\r\n        .addSorts([\r\n            { name: 'id' },\r\n            { name: 'createdAt' },\r\n            { name: 'updatedAt' },\r\n            { name: 'name' },\r\n            { name: 'sku' },\r\n            { name: 'price' },\r\n            { name: 'priceWithTax' },\r\n        ])\r\n        .addCustomFieldSorts(this.customFields)\r\n        .connectToRoute(this.route);\r\n\r\n    constructor() {\r\n        super();\r\n        this.configure({\r\n            document: ProductVariantListQueryDocument,\r\n            getItems: data => data.productVariants,\r\n            setVariables: (skip, take) => {\r\n                const searchTerm = this.searchTermControl.value;\r\n                const filterParam: ProductVariantFilterParameter = { _and: [] };\r\n                const filterInput = this.filters.createFilterInput();\r\n                if (Object.keys(filterInput).length) {\r\n                    filterParam._and?.push(filterInput);\r\n                }\r\n                if (searchTerm) {\r\n                    filterParam._and?.push({\r\n                        _or: [\r\n                            {\r\n                                name: { contains: searchTerm },\r\n                            },\r\n                            {\r\n                                sku: { contains: searchTerm },\r\n                            },\r\n                        ],\r\n                    });\r\n                }\r\n                if (this.productId) {\r\n                    filterParam._and?.push({\r\n                        productId: {\r\n                            eq: this.productId,\r\n                        },\r\n                    });\r\n                }\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        filter: filterParam,\r\n                        sort: this.sorts.createSortInput(),\r\n                    },\r\n                };\r\n            },\r\n            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],\r\n        });\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-flex-row\"></div>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine || createVariantsConfig.variants.length === 0\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermissions\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n            <vdr-action-bar-dropdown-menu locationId=\"product-detail\"></vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermissions\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            [formControl]=\"detailForm.get(['enabled'])\"\r\n                        />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <ng-container *ngIf=\"!(isNew$ | async)\">\r\n                <vdr-card *vdrIfMultichannel [title]=\"'common.channels' | translate\">\r\n                    <vdr-form-item *vdrIfDefaultChannelActive>\r\n                        <div class=\"flex channel-assignment\">\r\n                            <div class=\"mb-2\">\r\n                                <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                    <vdr-chip\r\n                                        *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                        icon=\"times-circle\"\r\n                                        (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                    >\r\n                                        <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                        {{ channel.code | channelCodeToLabel }}\r\n                                    </vdr-chip>\r\n                                </ng-container>\r\n                            </div>\r\n                            <button class=\"button-small\" (click)=\"assignToChannel()\">\r\n                                <clr-icon shape=\"layers\"></clr-icon>\r\n                                {{ 'common.assign-to-channel' | translate }}\r\n                            </button>\r\n                        </div>\r\n                    </vdr-form-item>\r\n                </vdr-card>\r\n            </ng-container>\r\n            <vdr-card *ngIf=\"entity?.optionGroups.length\" [title]=\"'catalog.product-options' | translate\">\r\n                <div class=\"options\">\r\n                    <vdr-chip\r\n                        *ngFor=\"let optionGroup of entity?.optionGroups | sort : 'id'\"\r\n                        [colorFrom]=\"optionGroup.code\"\r\n                        [invert]=\"true\"\r\n                    >\r\n                        {{ optionGroup.name }}\r\n                    </vdr-chip>\r\n                </div>\r\n                <div>\r\n                    <a [routerLink]=\"['options']\" class=\"button-small mt-2\" *vdrIfPermissions=\"updatePermissions\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'catalog.edit-options' | translate }}\r\n                    </a>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.facets' | translate\">\r\n                <div class=\"facets\">\r\n                    <vdr-facet-value-chip\r\n                        *ngFor=\"let facetValue of facetValues$ | async\"\r\n                        [facetValue]=\"facetValue\"\r\n                        [removable]=\"updatePermissions | hasPermission\"\r\n                        (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                    ></vdr-facet-value-chip>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        class=\"button-small mt-2\"\r\n                        *vdrIfPermissions=\"updatePermissions\"\r\n                        (click)=\"selectProductFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.add-facets' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n\r\n        <vdr-page-block>\r\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <div>\r\n                        <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                            <input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                                (input)=\"updateSlug($event.target.value)\"\r\n                            />\r\n                        </vdr-form-field>\r\n                        <div *ngIf=\"(isNew$ | async) === false && detailForm.get(['name'])?.dirty\">\r\n                            <clr-checkbox-wrapper>\r\n                                <input\r\n                                    clrCheckbox\r\n                                    type=\"checkbox\"\r\n                                    id=\"auto-update\"\r\n                                    formControlName=\"autoUpdateVariantNames\"\r\n                                />\r\n                                <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                            </clr-checkbox-wrapper>\r\n                        </div>\r\n                    </div>\r\n                    <vdr-form-field\r\n                        [label]=\"'catalog.slug' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <input\r\n                            id=\"slug\"\r\n                            type=\"text\"\r\n                            formControlName=\"slug\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        class=\"form-grid-span\"\r\n                        [label]=\"'common.description' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <vdr-rich-text-editor\r\n                            formControlName=\"description\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        ></vdr-rich-text-editor>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Product\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"product-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n            <vdr-card [title]=\"'catalog.assets' | translate\">\r\n                <vdr-assets\r\n                    [assets]=\"assetChanges.assets || entity?.assets\"\r\n                    [featuredAsset]=\"assetChanges.featuredAsset || entity?.featuredAsset\"\r\n                    [updatePermissions]=\"updatePermissions\"\r\n                    (change)=\"assetChanges = $event\"\r\n                ></vdr-assets>\r\n            </vdr-card>\r\n\r\n            <vdr-card [title]=\"'catalog.product-variants' | translate\" [paddingX]=\"isNew$ | async\">\r\n                <div *ngIf=\"isNew$ | async; else variantList\">\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n                <ng-template #variantList>\r\n                    <vdr-product-variant-list\r\n                        [productId]=\"this.id\"\r\n                        dataTableId=\"product-detail-variants-list\"\r\n                        [hideLanguageSelect]=\"true\"\r\n                    ></vdr-product-variant-list>\r\n                </ng-template>\r\n                <div class=\"mx-3\" *ngIf=\"(isNew$ | async) === false\">\r\n                    <a class=\"button\" [routerLink]=\"['manage-variants']\">\r\n                        <clr-icon shape=\"add-text\"></clr-icon>\r\n                        {{ 'catalog.manage-variants' | translate }}</a\r\n                    >\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CreateProductInput,\r\n    createUpdatedTranslatable,\r\n    DataService,\r\n    findTranslation,\r\n    getChannelCodeFromUserStatus,\r\n    getCustomFieldsDefaults,\r\n    GetProductDetailDocument,\r\n    GetProductDetailQuery,\r\n    GetProductWithVariantsQuery,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    PRODUCT_DETAIL_FRAGMENT,\r\n    ProductDetailFragment,\r\n    ProductVariantFragment,\r\n    TypedBaseDetailComponent,\r\n    unicodePatternValidator,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { gql } from 'apollo-angular';\r\nimport { combineLatest, concat, EMPTY, from, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mergeMap, shareReplay, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\r\n\r\ninterface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\nexport const GET_PRODUCT_DETAIL = gql`\r\n    query GetProductDetail($id: ID!) {\r\n        product(id: $id) {\r\n            ...ProductDetail\r\n        }\r\n    }\r\n    ${PRODUCT_DETAIL_FRAGMENT}\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-product-detail2',\r\n    templateUrl: './product-detail.component.html',\r\n    styleUrls: ['./product-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductDetailComponent\r\n    extends TypedBaseDetailComponent<typeof GetProductDetailDocument, 'product'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    readonly customFields = this.getCustomFieldConfig('Product');\r\n    detailForm = this.formBuilder.group({\r\n        enabled: true,\r\n        name: ['', Validators.required],\r\n        autoUpdateVariantNames: true,\r\n        slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9._-]+$/)],\r\n        description: '',\r\n        facetValueIds: [[] as string[]],\r\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n    });\r\n    assetChanges: SelectedAssets = {};\r\n    productChannels$: Observable<ProductDetailFragment['channels']>;\r\n    facetValues$: Observable<ProductDetailFragment['facetValues']>;\r\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [], stockLocationId: '' };\r\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n\r\n        const productFacetValues$ = this.isNew$.pipe(\r\n            switchMap(isNew => {\r\n                return isNew ? of([]) : this.entity$.pipe(map(product => product.facetValues));\r\n            }),\r\n        );\r\n        const productGroup = this.detailForm;\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const formFacetValueIdChanges$ = productGroup.get('facetValueIds')!.valueChanges.pipe(\r\n            distinctUntilChanged(),\r\n            switchMap(ids =>\r\n                this.dataService.facet\r\n                    .getFacetValues({ filter: { id: { in: ids } } })\r\n                    .mapSingle(({ facetValues }) => facetValues.items),\r\n            ),\r\n            shareReplay(1),\r\n        );\r\n        this.facetValues$ = concat(\r\n            productFacetValues$.pipe(take(1)),\r\n            productFacetValues$.pipe(switchMap(() => formFacetValueIdChanges$)),\r\n        );\r\n        this.productChannels$ = this.entity$.pipe(map(p => p.channels));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    assignToChannel() {\r\n        this.productChannels$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(channels =>\r\n                    this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\r\n                        size: 'lg',\r\n                        locals: {\r\n                            productIds: [this.id],\r\n                            currentChannelIds: channels.map(c => c.id),\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    removeFromChannel(channelId: string) {\r\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\r\n            .pipe(\r\n                switchMap(({ channelCode }) =>\r\n                    this.modalService.dialog({\r\n                        title: _('catalog.remove-product-from-channel'),\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            {\r\n                                type: 'danger',\r\n                                label: _('catalog.remove-from-channel'),\r\n                                translationVars: { channelCode },\r\n                                returnValue: true,\r\n                            },\r\n                        ],\r\n                    }),\r\n                ),\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeProductsFromChannel({\r\n                              channelId,\r\n                              productIds: [this.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assignVariantToChannel(variant: ProductVariantFragment) {\r\n        return this.modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: [this.id],\r\n                    productVariantIds: [variant.id],\r\n                    currentChannelIds: variant.channels.map(c => c.id),\r\n                },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeVariantFromChannel({ channelId, variant }: { channelId: string; variant: ProductVariantFragment }) {\r\n        from(getChannelCodeFromUserStatus(this.dataService, channelId))\r\n            .pipe(\r\n                switchMap(({ channelCode }) =>\r\n                    this.modalService.dialog({\r\n                        title: _('catalog.remove-product-variant-from-channel'),\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            {\r\n                                type: 'danger',\r\n                                label: _('catalog.remove-from-channel'),\r\n                                translationVars: { channelCode },\r\n                                returnValue: true,\r\n                            },\r\n                        ],\r\n                    }),\r\n                ),\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeVariantsFromChannel({\r\n                              channelId,\r\n                              productVariantIds: [variant.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    /**\r\n     * If creating a new product, automatically generate the slug based on the product name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        const slugControl = this.detailForm.get('slug');\r\n        const currentTranslation = this.entity ? findTranslation(this.entity, this.languageCode) : undefined;\r\n        const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n        if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n            slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n        }\r\n    }\r\n\r\n    selectProductFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const productGroup = this.detailForm;\r\n                const currentFacetValueIds = productGroup.value.facetValueIds ?? [];\r\n                productGroup.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                productGroup.markAsDirty();\r\n                this.changeDetector.markForCheck();\r\n            }\r\n        });\r\n    }\r\n\r\n    removeProductFacetValue(facetValueId: string) {\r\n        const productGroup = this.detailForm;\r\n        const currentFacetValueIds = productGroup.value.facetValueIds ?? [];\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.modalService\r\n            .fromComponent(ApplyFacetDialogComponent, {\r\n                size: 'md',\r\n                closable: true,\r\n            })\r\n            .pipe(map(facetValues => facetValues && facetValues.map(v => v.id)));\r\n    }\r\n\r\n    create() {\r\n        const productGroup = this.detailForm;\r\n        if (!productGroup.dirty) {\r\n            return;\r\n        }\r\n\r\n        const newProduct = this.getUpdatedProduct(\r\n            {\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                enabled: true,\r\n                languageCode: this.languageCode,\r\n                name: '',\r\n                slug: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                description: '',\r\n                translations: [],\r\n                optionGroups: [],\r\n                facetValues: [],\r\n                channels: [],\r\n            },\r\n            productGroup as UntypedFormGroup,\r\n            this.languageCode,\r\n        ) as CreateProductInput;\r\n        this.productDetailService\r\n            .createProductWithVariants(newProduct, this.createVariantsConfig, this.languageCode)\r\n            .subscribe(\r\n                ({ createProductVariants, productId }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    // eslint-disable-next-line no-console\r\n                    console.error(err);\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) => {\r\n                    const productGroup = this.detailForm;\r\n                    let productInput: UpdateProductInput | undefined;\r\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\r\n\r\n                    if (productGroup.dirty || this.assetsChanged()) {\r\n                        productInput = this.getUpdatedProduct(\r\n                            product,\r\n                            productGroup as UntypedFormGroup,\r\n                            languageCode,\r\n                        ) as UpdateProductInput;\r\n                    }\r\n\r\n                    return this.productDetailService.updateProduct({\r\n                        product,\r\n                        languageCode,\r\n                        autoUpdate: this.detailForm.get(['autoUpdateVariantNames'])?.value ?? false,\r\n                        productInput,\r\n                        variantsInput,\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.updateSlugAfterSave(result);\r\n                    this.detailForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the product or current language.\r\n     */\r\n    protected setFormValues(\r\n        product: NonNullable<GetProductWithVariantsQuery['product']>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const currentTranslation = findTranslation(product, languageCode);\r\n        this.detailForm.patchValue({\r\n            enabled: product.enabled,\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            slug: currentTranslation ? currentTranslation.slug : '',\r\n            description: currentTranslation ? currentTranslation.description : '',\r\n            facetValueIds: product.facetValues.map(fv => fv.id),\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                product,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedProduct(\r\n        product: NonNullable<GetProductDetailQuery['product']>,\r\n        productFormGroup: UntypedFormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductInput | CreateProductInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: product,\r\n            updatedFields: productFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: product.name || '',\r\n                slug: product.slug || '',\r\n                description: product.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: productFormGroup.value.facetValueIds,\r\n        } as UpdateProductInput | CreateProductInput;\r\n    }\r\n\r\n    /**\r\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\r\n     */\r\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\r\n        const firstResult = results[0];\r\n        const slugControl = this.detailForm.get(['product', 'slug']);\r\n\r\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\r\n            return input.hasOwnProperty('updateProduct');\r\n        }\r\n\r\n        if (slugControl && isUpdateMutation(firstResult)) {\r\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\r\n        }\r\n    }\r\n}\r\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BulkAction,\r\n    createBulkRemoveFromChannelAction,\r\n    DataService,\r\n    DeletionResult,\r\n    DuplicateEntityDialogComponent,\r\n    GetProductListQuery,\r\n    isMultiChannel,\r\n    ItemOf,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { BulkAddFacetValuesDialogComponent } from '../bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\r\n\r\nimport { ProductListComponent } from './product-list.component';\r\n\r\nexport const deleteProductsBulkAction: BulkAction<\r\n    ItemOf<GetProductListQuery, 'products'>,\r\n    ProductListComponent\r\n> = {\r\n    location: 'product-list',\r\n    label: _('common.delete'),\r\n    icon: 'trash',\r\n    iconClass: 'is-danger',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteProduct) ||\r\n        userPermissions.includes(Permission.DeleteCatalog),\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const dataService = injector.get(DataService);\r\n        const notificationService = injector.get(NotificationService);\r\n        modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-bulk-delete-products'),\r\n                translationVars: {\r\n                    count: selection.length,\r\n                },\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? dataService.product.deleteProducts(unique(selection.map(p => p.id))) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                let deleted = 0;\r\n                const errors: string[] = [];\r\n                for (const item of result.deleteProducts) {\r\n                    if (item.result === DeletionResult.DELETED) {\r\n                        deleted++;\r\n                    } else if (item.message) {\r\n                        errors.push(item.message);\r\n                    }\r\n                }\r\n                if (0 < deleted) {\r\n                    notificationService.success(_('catalog.notify-bulk-delete-products-success'), {\r\n                        count: deleted,\r\n                    });\r\n                }\r\n                if (0 < errors.length) {\r\n                    notificationService.error(errors.join('\\n'));\r\n                }\r\n                hostComponent.refresh();\r\n                clearSelection();\r\n            });\r\n    },\r\n};\r\n\r\nexport const assignProductsToChannelBulkAction: BulkAction<\r\n    ItemOf<GetProductListQuery, 'products'>,\r\n    ProductListComponent\r\n> = {\r\n    location: 'product-list',\r\n    label: _('common.assign-to-channel'),\r\n    icon: 'layers',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\r\n    onClick: ({ injector, selection, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: unique(selection.map(p => p.id)),\r\n                    currentChannelIds: [],\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    clearSelection();\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport const removeProductsFromChannelBulkAction = createBulkRemoveFromChannelAction<\r\n    ItemOf<GetProductListQuery, 'products'>\r\n>({\r\n    location: 'product-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    getItemName: item => item.name,\r\n    bulkRemoveFromChannel: (dataService, productIds, channelId) =>\r\n        dataService.product\r\n            .removeProductsFromChannel({\r\n                channelId: channelId,\r\n                productIds,\r\n            })\r\n            .pipe(map(res => res.removeProductsFromChannel)),\r\n});\r\n\r\nexport const assignFacetValuesToProductsBulkAction: BulkAction<\r\n    ItemOf<GetProductListQuery, 'products'>,\r\n    ProductListComponent\r\n> = {\r\n    location: 'product-list',\r\n    label: _('catalog.edit-facet-values'),\r\n    icon: 'tag',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const notificationService = injector.get(NotificationService);\r\n        const mode = 'product';\r\n        const ids = unique(selection.map(p => p.id));\r\n        return modalService\r\n            .fromComponent(BulkAddFacetValuesDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    mode,\r\n                    ids,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    notificationService.success(_('common.notify-bulk-update-success'), {\r\n                        count: selection.length,\r\n                        entity: mode === 'product' ? 'Products' : 'ProductVariants',\r\n                    });\r\n                    clearSelection();\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport const duplicateProductsBulkAction: BulkAction<\r\n    ItemOf<GetProductListQuery, 'products'>,\r\n    ProductListComponent\r\n> = {\r\n    location: 'product-list',\r\n    label: _('common.duplicate'),\r\n    icon: 'copy',\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        modalService\r\n            .fromComponent(DuplicateEntityDialogComponent<ItemOf<GetProductListQuery, 'products'>>, {\r\n                locals: {\r\n                    entities: selection,\r\n                    entityName: 'Product',\r\n                    title: _('catalog.duplicate-products'),\r\n                    getEntityName: entity => entity.name,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    clearSelection();\r\n                    hostComponent.refresh();\r\n                }\r\n            });\r\n    },\r\n};\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items [locationId]=\"pageLocationId\"></vdr-action-bar-items>\r\n            <a\r\n                class=\"button primary mr-1\"\r\n                [routerLink]=\"['./create']\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\r\n            >\r\n                <clr-icon shape=\"plus\"></clr-icon>\r\n                {{ 'catalog.create-new-product' | translate }}\r\n            </a>\r\n            <vdr-action-bar-dropdown-menu [alwaysShow]=\"true\" [locationId]=\"pageLocationId\">\r\n                <button type=\"button\" vdrDropdownItem (click)=\"rebuildSearchIndex()\">\r\n                    <clr-icon shape=\"refresh\" class=\"\"></clr-icon>\r\n                    {{ 'catalog.rebuild-search-index' | translate }}\r\n                </button>\r\n            </vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<vdr-data-table-2\r\n    class=\"mt-2\"\r\n    [id]=\"dataTableListId\"\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    [filters]=\"filters\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    (visibleColumnsChange)=\"setVisibleColumns($event)\"\r\n>\r\n    <vdr-bulk-action-menu\r\n        [locationId]=\"dataTableListId\"\r\n        [hostComponent]=\"this\"\r\n        [selectionManager]=\"selectionManager\"\r\n    ></vdr-bulk-action-menu>\r\n    <vdr-dt2-search\r\n        [searchTermControl]=\"searchTermControl\"\r\n        [searchTermPlaceholder]=\"'settings.search-by-product-name-or-sku' | translate\"\r\n    />\r\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\" [hiddenByDefault]=\"true\" [sort]=\"sorts.get('id')\">\r\n        <ng-template let-product=\"item\">\r\n            {{ product.id }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.created-at' | translate\" id=\"created-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('createdAt')\"\r\n    >\r\n        <ng-template let-product=\"item\">\r\n            {{ product.createdAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column\r\n        [heading]=\"'common.updated-at' | translate\" id=\"updated-at\"\r\n        [hiddenByDefault]=\"true\"\r\n        [sort]=\"sorts.get('updatedAt')\"\r\n    >\r\n        <ng-template let-product=\"item\">\r\n            {{ product.updatedAt | localeDate : 'short' }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.image' | translate\" id=\"image\">\r\n        <ng-template let-product=\"item\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"product.featuredAsset as asset; else imagePlaceholder\"\r\n                    [src]=\"asset | assetPreview : 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'catalog.name' | translate\" id=\"name\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\r\n        <ng-template let-product=\"item\">\r\n            <a class=\"button-ghost\" [routerLink]=\"['./', product.id]\"\r\n                ><span>{{ product.name }}</span\r\n                ><clr-icon shape=\"arrow right\"\r\n            /></a>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.slug' | translate\" id=\"slug\" [sort]=\"sorts.get('slug')\">\r\n        <ng-template let-product=\"item\">\r\n            {{ product.slug }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'common.enabled' | translate\" id=\"enabled\">\r\n        <ng-template let-product=\"item\">\r\n            <vdr-chip *ngIf=\"product.enabled\" colorType=\"success\">{{\r\n                'common.enabled' | translate\r\n            }}</vdr-chip>\r\n            <vdr-chip *ngIf=\"!product.enabled\" colorType=\"warning\">{{\r\n                'common.disabled' | translate\r\n            }}</vdr-chip>\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-column [heading]=\"'catalog.number-of-variants' | translate\" id=\"number-of-variants\">\r\n        <ng-template let-product=\"item\">\r\n            {{ 'catalog.variant-count' | translate : { count: product.variantList?.totalItems } }}\r\n        </ng-template>\r\n    </vdr-dt2-column>\r\n    <vdr-dt2-custom-field-column\r\n        *ngFor=\"let customField of customFields\"\r\n        [customField]=\"customField\"\r\n        [sorts]=\"sorts\"\r\n    />\r\n</vdr-data-table-2>\r\n","import { Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    FacetValueFormInputComponent,\n    JobQueueService,\n    JobState,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    ProductListQueryDocument,\n    TypedBaseListComponent,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, lastValueFrom } from 'rxjs';\nimport { delay, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-products-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent\n    extends TypedBaseListComponent<typeof ProductListQueryDocument, 'products'>\n    implements OnInit\n{\n    pendingSearchIndexUpdates = 0;\n    dataTableListId = 'product-list';\n    pageLocationId = 'product-list';\n    readonly customFields = this.getCustomFieldConfig('Product');\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilters([\n            {\n                name: 'enabled',\n                type: { kind: 'boolean' },\n                label: _('common.enabled'),\n                filterField: 'enabled',\n            },\n            {\n                name: 'slug',\n                type: { kind: 'text' },\n                label: _('common.slug'),\n                filterField: 'slug',\n            },\n        ])\n        .addFilter({\n            name: 'facetValues',\n            type: {\n                kind: 'custom',\n                component: FacetValueFormInputComponent,\n                serializeValue: value => value.map(v => v.id).join(','),\n                deserializeValue: value => value.split(',').map(id => ({ id })),\n                getLabel: value => {\n                    if (value.length === 0) {\n                        return '';\n                    }\n                    if (value[0].name) {\n                        return value.map(v => v.name).join(', ');\n                    } else {\n                        return lastValueFrom(\n                            this.dataService.facet\n                                .getFacetValues({ filter: { id: { in: value.map(v => v.id) } } })\n                                .mapSingle(({ facetValues }) =>\n                                    facetValues.items.map(fv => fv.name).join(', '),\n                                ),\n                        );\n                    }\n                },\n            },\n            label: _('catalog.facet-values'),\n            toFilterInput: (value: any[]) => ({\n                facetValueId: {\n                    in: value.map(v => v.id),\n                },\n            }),\n        })\n        .addCustomFieldFilters(this.customFields)\n        .connectToRoute(this.route);\n\n    readonly sorts = this.createSortCollection()\n        .defaultSort('createdAt', 'DESC')\n        .addSorts([\n            { name: 'id' },\n            { name: 'createdAt' },\n            { name: 'updatedAt' },\n            { name: 'name' },\n            { name: 'slug' },\n        ])\n        .addCustomFieldSorts(this.customFields)\n        .connectToRoute(this.route);\n\n    constructor(\n        protected dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private jobQueueService: JobQueueService,\n    ) {\n        super();\n        this.configure({\n            document: ProductListQueryDocument,\n            getItems: data => data.products,\n            setVariables: (skip, take) => {\n                const searchTerm = this.searchTermControl.value;\n                let filterInput = this.filters.createFilterInput();\n                if (searchTerm) {\n                    filterInput = {\n                        name: {\n                            contains: searchTerm,\n                        },\n                        sku: {\n                            contains: searchTerm,\n                        },\n                    };\n                }\n                return {\n                    options: {\n                        skip,\n                        take,\n                        filter: {\n                            ...(filterInput ?? {}),\n                        },\n                        filterOperator: searchTerm ? LogicalOperator.OR : LogicalOperator.AND,\n                        sort: this.sorts.createSortInput(),\n                    },\n                };\n            },\n            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],\n        });\n    }\n\n    rebuildSearchIndex() {\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\n            this.notificationService.info(_('catalog.reindexing'));\n            this.jobQueueService.addJob(reindex.id, job => {\n                if (job.state === JobState.COMPLETED) {\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\n                    this.notificationService.success(_('catalog.reindex-successful'), {\n                        count: job.result.indexedItemCount,\n                        time,\n                    });\n                    this.refresh();\n                } else {\n                    this.notificationService.error(_('catalog.reindex-error'));\n                }\n            });\n        });\n    }\n\n    deleteProduct(productId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\n                // Short delay to allow the product to be removed from the search index before\n                // refreshing.\n                delay(500),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Product',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n}\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\r\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\r\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\r\n</div>\r\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\r\n    {{\r\n        'catalog.price-with-tax-in-default-zone'\r\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\r\n    }}\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-detail',\r\n    templateUrl: './variant-price-detail.component.html',\r\n    styleUrls: ['./variant-price-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\r\n    @Input() priceIncludesTax: boolean;\r\n    @Input() price: number;\r\n    @Input() currencyCode: string;\r\n    @Input() taxCategoryId: string;\r\n\r\n    grossPrice$: Observable<number>;\r\n    taxRate$: Observable<number>;\r\n\r\n    private priceChange$ = new BehaviorSubject<number>(0);\r\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const taxRates$ = this.dataService.settings\r\n            .getTaxRatesSimple(999, 0, 'cache-first')\r\n            .mapStream(data => data.taxRates.items);\r\n        const activeChannel$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\r\n            map(([channel, taxRates, taxCategoryId]) => {\r\n                const defaultTaxZone = channel.defaultTaxZone;\r\n                if (!defaultTaxZone) {\r\n                    return 0;\r\n                }\r\n                const applicableRate = taxRates.find(\r\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\r\n                );\r\n\r\n                if (!applicableRate) {\r\n                    return 0;\r\n                }\r\n                return applicableRate.value;\r\n            }),\r\n        );\r\n\r\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\r\n            map(([taxRate, price]) => Math.round(price * ((100 + taxRate) / 100))),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('price' in changes) {\r\n            this.priceChange$.next(changes.price.currentValue);\r\n        }\r\n        if ('taxCategoryId' in changes) {\r\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\r\n        }\r\n    }\r\n}\r\n","<div *ngIf=\"calculatedPriceDiffersFromInputPrice()\" class=\"price-strategy-detail\">\r\n    <vdr-form-item\r\n        [label]=\"'catalog.calculated-price' | translate\"\r\n        [tooltip]=\"'catalog.calculated-price-tooltip' | translate\"\r\n        for=\"price\"\r\n    >\r\n    </vdr-form-item>\r\n    <div class=\"form-grid mt-2\">\r\n        <vdr-form-item [label]=\"'common.price' | translate\">\r\n            {{ variant.price | localeCurrency : variant.currencyCode }}\r\n        </vdr-form-item>\r\n        <vdr-form-item [label]=\"'common.price-with-tax' | translate\">\r\n            {{ variant.priceWithTax | localeCurrency : variant.currencyCode }}\r\n        </vdr-form-item>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport {\r\n    CurrencyCode,\r\n    ProductVariantDetailQueryProductVariantFragmentFragment,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-strategy-detail',\r\n    templateUrl: './variant-price-strategy-detail.component.html',\r\n    styleUrls: ['./variant-price-strategy-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceStrategyDetailComponent {\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() variant: ProductVariantDetailQueryProductVariantFragmentFragment;\r\n    @Input() channelDefaultCurrencyCode: CurrencyCode;\r\n\r\n    calculatedPriceDiffersFromInputPrice(): boolean {\r\n        const defaultPrice =\r\n            this.variant.prices.find(p => p.currencyCode === this.channelDefaultCurrencyCode) ??\r\n            this.variant.prices[0];\r\n        if (!defaultPrice) {\r\n            return false;\r\n        }\r\n        if (this.channelPriceIncludesTax) {\r\n            return this.variant.priceWithTax !== defaultPrice.price;\r\n        } else {\r\n            return this.variant.price !== defaultPrice.price;\r\n        }\r\n    }\r\n}\r\n","<ng-select\r\n    *ngIf=\"(variants$ | async)?.length > 1\"\r\n    [items]=\"variants$ | async\"\r\n    appendTo=\"body\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedVariantId\"\r\n    [searchFn]=\"searchFn\"\r\n    [clearable]=\"false\"\r\n    [placeholder]=\"'catalog.quick-jump-placeholder' | translate\"\r\n    (change)=\"onSelect($event)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        {{ item.name }} ({{ item.sku }})\r\n    </ng-template>\r\n</ng-select>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    DataService,\r\n    GetProductVariantsQuickJumpDocument,\r\n    GetProductVariantsQuickJumpQuery,\r\n} from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst GET_PRODUCT_VARIANTS_QUICK_JUMP = gql`\r\n    query GetProductVariantsQuickJump($id: ID!) {\r\n        product(id: $id) {\r\n            id\r\n            variants {\r\n                id\r\n                name\r\n                sku\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n@Component({\r\n    selector: 'vdr-product-variant-quick-jump',\r\n    templateUrl: './product-variant-quick-jump.component.html',\r\n    styleUrls: ['./product-variant-quick-jump.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantQuickJumpComponent implements OnInit {\r\n    @Input() productId: string;\r\n    selectedVariantId: string | undefined;\r\n    variants$: Observable<NonNullable<GetProductVariantsQuickJumpQuery['product']>['variants']>;\r\n    constructor(private dataService: DataService, private router: Router) {}\r\n\r\n    ngOnInit() {\r\n        this.variants$ = this.dataService\r\n            .query(GetProductVariantsQuickJumpDocument, {\r\n                id: this.productId,\r\n            })\r\n            .mapSingle(data => data.product?.variants ?? []);\r\n    }\r\n\r\n    searchFn = (\r\n        term: string,\r\n        item: NonNullable<GetProductVariantsQuickJumpQuery['product']>['variants'][number],\r\n    ) =>\r\n        item.name.toLowerCase().includes(term.toLowerCase()) ||\r\n        item.sku.toLowerCase().includes(term.toLowerCase());\r\n\r\n    onSelect(item?: NonNullable<GetProductVariantsQuickJumpQuery['product']>['variants'][number]) {\r\n        if (item) {\r\n            this.router\r\n                .navigate(['catalog', 'products', this.productId, 'variants', item.id])\r\n                .then(() => (this.selectedVariantId = undefined));\r\n        }\r\n    }\r\n}\r\n","<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left [grow]=\"true\">\r\n            <div class=\"flex center\">\r\n                <ng-container *ngIf=\"availableLanguages$ | async as availableLanguages\">\r\n                    <vdr-language-selector\r\n                        *ngIf=\"availableLanguages.length > 1\"\r\n                        class=\"mr-2\"\r\n                        [disabled]=\"isNew$ | async\"\r\n                        [availableLanguageCodes]=\"availableLanguages\"\r\n                        [currentLanguageCode]=\"languageCode$ | async\"\r\n                        (languageCodeChange)=\"setLanguage($event)\"\r\n                    ></vdr-language-selector>\r\n                </ng-container>\r\n                <vdr-product-variant-quick-jump [productId]=\"entity?.product.id\" />\r\n            </div>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"product-variant-detail\"></vdr-action-bar-items>\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"\r\n                    (detailForm.invalid ||\r\n                        stockLevelsForm.invalid ||\r\n                        pricesForm.invalid ||\r\n                        (detailForm.pristine && stockLevelsForm.pristine && pricesForm.pristine)) &&\r\n                    !assetsChanged()\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n            <vdr-action-bar-dropdown-menu locationId=\"product-variant-detail\"></vdr-action-bar-dropdown-menu>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as variant\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar\r\n            ><vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            [formControl]=\"detailForm.get(['enabled'])\"\r\n                        />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <vdr-card *ngIf=\"variant.options.length\" [title]=\"'catalog.product-options' | translate\">\r\n                <div class=\"options\">\r\n                    <vdr-chip\r\n                        *ngFor=\"let option of variant.options | sort : 'groupId'\"\r\n                        [colorFrom]=\"optionGroupCode(option.groupId)\"\r\n                        [invert]=\"true\"\r\n                    >\r\n                        <span>{{ optionGroupCode(option.groupId) }}:</span>\r\n                        {{ optionName(option) }}\r\n                    </vdr-chip>\r\n                </div>\r\n                <div>\r\n                    <a\r\n                        [routerLink]=\"['../../', 'options']\"\r\n                        class=\"button-small mt-2\"\r\n                        *vdrIfPermissions=\"updatePermissions\"\r\n                    >\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'catalog.edit-options' | translate }}\r\n                    </a>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.facets' | translate\">\r\n                <div class=\"facets\">\r\n                    <vdr-facet-value-chip\r\n                        *ngFor=\"let facetValue of facetValues$ | async\"\r\n                        [facetValue]=\"facetValue\"\r\n                        [removable]=\"updatePermissions | hasPermission\"\r\n                        (remove)=\"removeFacetValue(facetValue.id)\"\r\n                    ></vdr-facet-value-chip>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        class=\"button-small mt-2\"\r\n                        *vdrIfPermissions=\"updatePermissions\"\r\n                        (click)=\"selectFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.add-facets' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card>\r\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n\r\n        <vdr-page-block>\r\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'catalog.sku' | translate\" for=\"sku\">\r\n                        <input\r\n                            id=\"sku\"\r\n                            type=\"text\"\r\n                            formControlName=\"sku\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"ProductVariant\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                />\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"product-variant-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            />\r\n            <vdr-card [title]=\"'catalog.assets' | translate\">\r\n                <vdr-assets\r\n                    [assets]=\"assetChanges.assets || variant.assets\"\r\n                    [featuredAsset]=\"assetChanges.featuredAsset || variant.featuredAsset\"\r\n                    [updatePermissions]=\"updatePermissions\"\r\n                    (change)=\"assetChanges = $event\"\r\n                />\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.price-and-tax' | translate\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'catalog.tax-category' | translate\" for=\"taxCategory\">\r\n                        <select name=\"taxCategory\" formControlName=\"taxCategoryId\">\r\n                            <option\r\n                                *ngFor=\"let taxCategory of taxCategories$ | async\"\r\n                                [value]=\"taxCategory.id\"\r\n                            >\r\n                                {{ taxCategory.name }}\r\n                            </option>\r\n                        </select>\r\n                    </vdr-form-field>\r\n                </div>\r\n                <div class=\"form-grid prices\" *ngFor=\"let price of pricesForm.controls\" [formGroup]=\"price\">\r\n                    <vdr-form-field\r\n                        [label]=\"\r\n                            ('catalog.price' | translate) +\r\n                            (1 < pricesForm.length ? ' (' + price.value.currencyCode + ')' : '')\r\n                        \"\r\n                        [tooltip]=\"\r\n                            1 < pricesForm.length && price.value.currencyCode === channelDefaultCurrencyCode\r\n                                ? ('catalog.default-currency' | translate)\r\n                                : undefined\r\n                        \"\r\n                        for=\"price\"\r\n                    >\r\n                        <div class=\"price-wrapper\" [class.pending-deletion]=\"price.value.delete === true\">\r\n                            <vdr-currency-input\r\n                                name=\"price\"\r\n                                [currencyCode]=\"price.value.currencyCode\"\r\n                                [readonly]=\"\r\n                                    !(updatePermissions | hasPermission) || price.value.delete === true\r\n                                \"\r\n                                formControlName=\"price\"\r\n                            />\r\n                            <div *ngIf=\"1 < pricesForm.controls.length\">\r\n                                <button\r\n                                    class=\"button-small delete-button\"\r\n                                    [disabled]=\"price.value.currencyCode === channelDefaultCurrencyCode\"\r\n                                    (click)=\"toggleDeletePrice(price.get('delete'))\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\"></clr-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </vdr-form-field>\r\n                    <vdr-variant-price-detail\r\n                        [price]=\"price.value.price\"\r\n                        [currencyCode]=\"price.value.currencyCode\"\r\n                        [priceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [taxCategoryId]=\"detailForm.get('taxCategoryId')!.value\"\r\n                    />\r\n                </div>\r\n                <vdr-variant-price-strategy-detail\r\n                    [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                    [channelDefaultCurrencyCode]=\"channelDefaultCurrencyCode\"\r\n                    [variant]=\"variant\"\r\n                />\r\n                <ng-container *ngIf=\"unusedCurrencyCodes$ | async as unusedCurrencyCodes\">\r\n                    <div *ngIf=\"unusedCurrencyCodes.length\">\r\n                        <vdr-dropdown>\r\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\r\n                                <clr-icon shape=\"plus\"></clr-icon>\r\n                                {{ 'catalog.add-price-in-another-currency' | translate }}\r\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu>\r\n                                <button\r\n                                    vdrDropdownItem\r\n                                    *ngFor=\"let currencyCode of unusedCurrencyCodes\"\r\n                                    (click)=\"addPriceInCurrency(currencyCode)\"\r\n                                >\r\n                                    {{ currencyCode | localeCurrencyName }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </div>\r\n                </ng-container>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.stock-levels' | translate\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field\r\n                        for=\"track-inventory\"\r\n                        [label]=\"'catalog.track-inventory' | translate\"\r\n                        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\r\n                    >\r\n                        <select\r\n                            name=\"track-inventory\"\r\n                            formControlName=\"trackInventory\"\r\n                            [disabled]=\"!(updatePermissions | hasPermission)\"\r\n                        >\r\n                            <option [value]=\"GlobalFlag.TRUE\">\r\n                                {{ 'catalog.track-inventory-true' | translate }}\r\n                            </option>\r\n                            <option [value]=\"GlobalFlag.FALSE\">\r\n                                {{ 'catalog.track-inventory-false' | translate }}\r\n                            </option>\r\n                            <option [value]=\"GlobalFlag.INHERIT\">\r\n                                {{ 'catalog.track-inventory-inherit' | translate }}\r\n                            </option>\r\n                        </select>\r\n                    </vdr-form-field>\r\n\r\n                    <vdr-form-item\r\n                        [label]=\"'catalog.out-of-stock-threshold' | translate\"\r\n                        [tooltip]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\r\n                    >\r\n                        <input\r\n                            type=\"number\"\r\n                            formControlName=\"outOfStockThreshold\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                            [vdrDisabled]=\"\r\n                                detailForm.get('useGlobalOutOfStockThreshold')?.value !== false ||\r\n                                inventoryIsNotTracked(detailForm)\r\n                            \"\r\n                        />\r\n                        <clr-toggle-wrapper>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                clrToggle\r\n                                name=\"useGlobalOutOfStockThreshold\"\r\n                                formControlName=\"useGlobalOutOfStockThreshold\"\r\n                                [vdrDisabled]=\"\r\n                                    !(updatePermissions | hasPermission) || inventoryIsNotTracked(detailForm)\r\n                                \"\r\n                            />\r\n                            <label\r\n                                >{{ 'catalog.use-global-value' | translate }} ({{\r\n                                    globalOutOfStockThreshold\r\n                                }})</label\r\n                            >\r\n                        </clr-toggle-wrapper>\r\n                    </vdr-form-item>\r\n                </div>\r\n                <div\r\n                    class=\"form-grid stock-levels\"\r\n                    *ngFor=\"let stockLevel of stockLevelsForm.controls\"\r\n                    [formGroup]=\"stockLevel\"\r\n                >\r\n                    <vdr-form-field\r\n                        [label]=\"\r\n                            stockLevel.get('stockLocationName')?.value +\r\n                            ': ' +\r\n                            ('catalog.stock-on-hand' | translate)\r\n                        \"\r\n                        [for]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\r\n                    >\r\n                        <input\r\n                            [id]=\"'stockOnHand_' + stockLevel.get('stockLocationId')?.value\"\r\n                            type=\"number\"\r\n                            formControlName=\"stockOnHand\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-item\r\n                        [label]=\"\r\n                            stockLevel.get('stockLocationName')?.value +\r\n                            ': ' +\r\n                            ('catalog.stock-allocated' | translate)\r\n                        \"\r\n                    >\r\n                        {{ stockLevel.get('stockAllocated')?.value }}\r\n                    </vdr-form-item>\r\n                </div>\r\n                <ng-container *ngIf=\"unusedStockLocation$ | async as unusedStockLocations\">\r\n                    <div *ngIf=\"unusedStockLocations.length\">\r\n                        <vdr-dropdown>\r\n                            <button class=\"button mt-2\" vdrDropdownTrigger>\r\n                                <clr-icon shape=\"plus\"></clr-icon>\r\n                                {{ 'catalog.add-stock-location' | translate }}\r\n                                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu>\r\n                                <button\r\n                                    vdrDropdownItem\r\n                                    *ngFor=\"let stockLocation of unusedStockLocations\"\r\n                                    (click)=\"addStockLocation(stockLocation)\"\r\n                                >\r\n                                    <clr-icon shape=\"map-marker\"></clr-icon> {{ stockLocation.name }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </div>\r\n                </ng-container>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, UntypedFormGroup } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CreateProductVariantInput,\r\n    createUpdatedTranslatable,\r\n    CurrencyCode,\r\n    DataService,\r\n    findTranslation,\r\n    getCustomFieldsDefaults,\r\n    GetProductVariantDetailDocument,\r\n    GetProductVariantDetailQuery,\r\n    GlobalFlag,\r\n    ItemOf,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ProductOptionFragment,\r\n    ProductVariantUpdateMutationDocument,\r\n    TypedBaseDetailComponent,\r\n    UpdateProductVariantInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { combineLatest, concat, Observable } from 'rxjs';\r\nimport {\r\n    distinctUntilChanged,\r\n    map,\r\n    mergeMap,\r\n    shareReplay,\r\n    skip,\r\n    switchMap,\r\n    switchMapTo,\r\n    take,\r\n    tap,\r\n} from 'rxjs/operators';\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\n\r\ninterface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\ninterface VariantFormValue {\r\n    id: string;\r\n    enabled: boolean;\r\n    sku: string;\r\n    name: string;\r\n    taxCategoryId: string;\r\n    stockOnHand: number;\r\n    useGlobalOutOfStockThreshold: boolean;\r\n    outOfStockThreshold: number;\r\n    trackInventory: GlobalFlag;\r\n    facetValueIds: string[][];\r\n    customFields?: any;\r\n}\r\ntype T = NonNullable<GetProductVariantDetailQuery['productVariant']>;\r\ntype T1 = T['stockLevels'];\r\n@Component({\r\n    selector: 'vdr-product-variant-detail',\r\n    templateUrl: './product-variant-detail.component.html',\r\n    styleUrls: ['./product-variant-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantDetailComponent\r\n    extends TypedBaseDetailComponent<typeof GetProductVariantDetailDocument, 'productVariant'>\r\n    implements OnInit, OnDestroy\r\n{\r\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    readonly customFields = this.getCustomFieldConfig('ProductVariant');\r\n    readonly customOptionFields = this.getCustomFieldConfig('ProductOption');\r\n    stockLevels$: Observable<NonNullable<GetProductVariantDetailQuery['productVariant']>['stockLevels']>;\r\n    detailForm = this.formBuilder.group<VariantFormValue>({\r\n        id: '',\r\n        enabled: false,\r\n        sku: '',\r\n        name: '',\r\n        taxCategoryId: '',\r\n        stockOnHand: 0,\r\n        useGlobalOutOfStockThreshold: true,\r\n        outOfStockThreshold: 0,\r\n        trackInventory: GlobalFlag.TRUE,\r\n        facetValueIds: [],\r\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n    });\r\n    stockLevelsForm = this.formBuilder.array<\r\n        FormGroup<{\r\n            stockLocationId: FormControl<string | null>;\r\n            stockLocationName: FormControl<string | null>;\r\n            stockOnHand: FormControl<number | null>;\r\n            stockAllocated: FormControl<number | null>;\r\n        }>\r\n    >([]);\r\n    pricesForm = this.formBuilder.array<\r\n        FormGroup<{\r\n            price: FormControl<number | null>;\r\n            currencyCode: FormControl<CurrencyCode | null>;\r\n            delete: FormControl<boolean | null>;\r\n        }>\r\n    >([]);\r\n    assetChanges: SelectedAssets = {};\r\n    taxCategories$: Observable<Array<ItemOf<GetProductVariantDetailQuery, 'taxCategories'>>>;\r\n    unusedStockLocation$: Observable<Array<ItemOf<GetProductVariantDetailQuery, 'stockLocations'>>>;\r\n    unusedCurrencyCodes$: Observable<string[]>;\r\n    channelPriceIncludesTax$: Observable<boolean>;\r\n    readonly GlobalFlag = GlobalFlag;\r\n    globalTrackInventory: boolean;\r\n    globalOutOfStockThreshold: number;\r\n    facetValues$: Observable<NonNullable<GetProductVariantDetailQuery['productVariant']>['facetValues']>;\r\n    channelDefaultCurrencyCode: CurrencyCode;\r\n\r\n    constructor(\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\r\n            this.globalTrackInventory = globalSettings.trackInventory;\r\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\r\n            this.changeDetector.markForCheck();\r\n        });\r\n        this.taxCategories$ = this.result$.pipe(map(data => data.taxCategories.items));\r\n        const availableCurrencyCodes$ = this.result$.pipe(\r\n            tap(data => (this.channelDefaultCurrencyCode = data.activeChannel.defaultCurrencyCode)),\r\n            map(data => data.activeChannel.availableCurrencyCodes),\r\n        );\r\n        this.unusedCurrencyCodes$ = combineLatest(this.pricesForm.valueChanges, availableCurrencyCodes$).pipe(\r\n            map(([prices, currencyCodes]) =>\r\n                currencyCodes.filter(code => !prices.map(p => p.currencyCode).includes(code)),\r\n            ),\r\n        );\r\n        const stockLocations$ = this.result$.pipe(map(data => data.stockLocations.items));\r\n        this.unusedStockLocation$ = combineLatest(this.entity$, stockLocations$).pipe(\r\n            map(([entity, stockLocations]) => {\r\n                const usedIds = entity.stockLevels.map(l => l.stockLocation.id);\r\n                return stockLocations.filter(l => !usedIds.includes(l.id));\r\n            }),\r\n        );\r\n        this.channelPriceIncludesTax$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\r\n            .pipe(shareReplay(1));\r\n        this.stockLevels$ = this.entity$.pipe(map(entity => entity?.stockLevels ?? []));\r\n        const facetValues$ = this.entity$.pipe(map(variant => variant.facetValues ?? []));\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const formFacetValueIdChanges$ = this.detailForm.get('facetValueIds')!.valueChanges.pipe(\r\n            skip(1),\r\n            distinctUntilChanged(),\r\n            switchMap(ids =>\r\n                this.dataService.facet\r\n                    .getFacetValues({ filter: { id: { in: ids } } })\r\n                    .mapSingle(({ facetValues }) => facetValues.items),\r\n            ),\r\n            shareReplay(1),\r\n        );\r\n        this.facetValues$ = concat(\r\n            facetValues$.pipe(take(1)),\r\n            facetValues$.pipe(switchMapTo(formFacetValueIdChanges$)),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    addPriceInCurrency(currencyCode: CurrencyCode) {\r\n        this.pricesForm.push(\r\n            this.formBuilder.group({\r\n                currencyCode,\r\n                price: 0,\r\n                delete: false as boolean,\r\n            }),\r\n        );\r\n    }\r\n\r\n    toggleDeletePrice(deleteFormControl: FormControl) {\r\n        deleteFormControl.setValue(!deleteFormControl.value);\r\n        deleteFormControl.markAsDirty();\r\n    }\r\n\r\n    addStockLocation(stockLocation: ItemOf<GetProductVariantDetailQuery, 'stockLocations'>) {\r\n        this.stockLevelsForm.push(\r\n            this.formBuilder.group({\r\n                stockLocationId: stockLocation.id,\r\n                stockLocationName: stockLocation.name,\r\n                stockOnHand: 0,\r\n                stockAllocated: 0,\r\n            }),\r\n        );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([variant, languageCode]) => {\r\n                    const input = pick(\r\n                        this.getUpdatedVariant(\r\n                            variant,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as UpdateProductVariantInput,\r\n                        [\r\n                            'id',\r\n                            'enabled',\r\n                            'translations',\r\n                            'sku',\r\n                            'taxCategoryId',\r\n                            'facetValueIds',\r\n                            'featuredAssetId',\r\n                            'assetIds',\r\n                            'trackInventory',\r\n                            'outOfStockThreshold',\r\n                            'useGlobalOutOfStockThreshold',\r\n                            'customFields',\r\n                        ],\r\n                    ) as UpdateProductVariantInput;\r\n                    if (this.stockLevelsForm.dirty) {\r\n                        input.stockLevels = this.stockLevelsForm.controls\r\n                            .filter(control => control.dirty)\r\n                            .map(control => ({\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                stockLocationId: control.value.stockLocationId!,\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                stockOnHand: control.value.stockOnHand!,\r\n                            }));\r\n                    }\r\n                    if (this.pricesForm.dirty) {\r\n                        input.prices = this.pricesForm.controls\r\n                            .filter(control => control.dirty)\r\n                            .map(control => ({\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                price: control.value.price!,\r\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                currencyCode: control.value.currencyCode!,\r\n                                delete: control.value.delete === true,\r\n                            }));\r\n                    }\r\n                    return this.dataService.mutate(ProductVariantUpdateMutationDocument, {\r\n                        input: [input],\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.stockLevelsForm.markAsPristine();\r\n                    this.pricesForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    inventoryIsNotTracked(formGroup: UntypedFormGroup): boolean {\r\n        const trackInventory = formGroup.get('trackInventory')?.value;\r\n        return (\r\n            trackInventory === GlobalFlag.FALSE ||\r\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\r\n        );\r\n    }\r\n\r\n    optionGroupCode(optionGroupId: string): string | undefined {\r\n        const group = this.entity?.product.optionGroups.find(g => g.id === optionGroupId);\r\n        return group?.code;\r\n    }\r\n\r\n    optionName(option: ProductOptionFragment) {\r\n        const translation =\r\n            option.translations.find(t => t.languageCode === this.languageCode) ?? option.translations[0];\r\n        return translation.name;\r\n    }\r\n\r\n    removeFacetValue(facetValueId: string) {\r\n        const productGroup = this.detailForm;\r\n        const currentFacetValueIds = productGroup.value.facetValueIds ?? [];\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    selectFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const currentFacetValueIds = this.detailForm.value.facetValueIds ?? [];\r\n                this.detailForm.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                this.detailForm.markAsDirty();\r\n            }\r\n        });\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.modalService\r\n            .fromComponent(ApplyFacetDialogComponent, {\r\n                size: 'md',\r\n                closable: true,\r\n            })\r\n            .pipe(map(facetValues => facetValues && facetValues.map(v => v.id)));\r\n    }\r\n\r\n    protected setFormValues(\r\n        variant: NonNullable<GetProductVariantDetailQuery['productVariant']>,\r\n        languageCode: LanguageCode,\r\n    ): void {\r\n        const variantTranslation = findTranslation(variant, languageCode);\r\n        const facetValueIds = variant.facetValues.map(fv => fv.id);\r\n        this.detailForm.patchValue({\r\n            id: variant.id,\r\n            enabled: variant.enabled,\r\n            sku: variant.sku,\r\n            name: variantTranslation ? variantTranslation.name : '',\r\n            taxCategoryId: variant.taxCategory.id,\r\n            stockOnHand: variant.stockLevels[0]?.stockOnHand ?? 0,\r\n            useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\r\n            outOfStockThreshold: variant.outOfStockThreshold,\r\n            trackInventory: variant.trackInventory,\r\n            facetValueIds,\r\n        });\r\n        this.stockLevelsForm.clear();\r\n        for (const stockLevel of variant.stockLevels) {\r\n            this.stockLevelsForm.push(\r\n                this.formBuilder.group({\r\n                    stockLocationId: stockLevel.stockLocation.id,\r\n                    stockLocationName: stockLevel.stockLocation.name,\r\n                    stockOnHand: stockLevel.stockOnHand,\r\n                    stockAllocated: stockLevel.stockAllocated,\r\n                }),\r\n            );\r\n        }\r\n        this.pricesForm.clear();\r\n        for (const price of variant.prices) {\r\n            this.pricesForm.push(\r\n                this.formBuilder.group({\r\n                    price: price.price,\r\n                    currencyCode: price.currencyCode,\r\n                    delete: false as boolean,\r\n                }),\r\n            );\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get('customFields'),\r\n                variant,\r\n                variantTranslation,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedVariant(\r\n        variant: NonNullable<GetProductVariantDetailQuery['productVariant']>,\r\n        variantFormGroup: typeof this.detailForm,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductVariantInput | CreateProductVariantInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: variant,\r\n            updatedFields: variantFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: variant.name || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: variantFormGroup.value.facetValueIds,\r\n            taxCategoryId: variantFormGroup.value.taxCategoryId,\r\n        } as UpdateProductVariantInput | CreateProductVariantInput;\r\n    }\r\n}\r\n","import { switchMap } from './switchMap';\nimport { isFunction } from '../util/isFunction';\nexport function switchMapTo(innerObservable, resultSelector) {\n    return isFunction(resultSelector) ? switchMap(() => innerObservable, resultSelector) : switchMap(() => innerObservable);\n}\n","import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BulkAction,\r\n    createBulkRemoveFromChannelAction,\r\n    DataService,\r\n    DeletionResult,\r\n    GetProductVariantListQuery,\r\n    isMultiChannel,\r\n    ItemOf,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ProductVariant,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { BulkAddFacetValuesDialogComponent } from '../bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\r\nimport { ProductVariantListComponent } from './product-variant-list.component';\r\n\r\nexport const assignProductVariantsToChannelBulkAction: BulkAction<\r\n    ItemOf<GetProductVariantListQuery, 'productVariants'>,\r\n    ProductVariantListComponent\r\n> = {\r\n    location: 'product-variant-list',\r\n    label: _('common.assign-to-channel'),\r\n    icon: 'layers',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    isVisible: ({ injector }) => isMultiChannel(injector.get(DataService)),\r\n    onClick: ({ injector, selection, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productVariantIds: unique(selection.map(p => p.id)),\r\n                    currentChannelIds: [],\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    clearSelection();\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport const removeProductVariantsFromChannelBulkAction = createBulkRemoveFromChannelAction<\r\n    ItemOf<GetProductVariantListQuery, 'productVariants'>\r\n>({\r\n    location: 'product-variant-list',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    getItemName: item => item.name,\r\n    bulkRemoveFromChannel: (dataService, ids, channelId) =>\r\n        dataService.product\r\n            .removeVariantsFromChannel({\r\n                channelId: channelId,\r\n                productVariantIds: ids,\r\n            })\r\n            .pipe(map(res => res.removeProductVariantsFromChannel)),\r\n});\r\n\r\nexport const deleteProductVariantsBulkAction: BulkAction<ProductVariant, ProductVariantListComponent> = {\r\n    location: 'product-variant-list',\r\n    label: _('common.delete'),\r\n    icon: 'trash',\r\n    iconClass: 'is-danger',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.DeleteProduct) ||\r\n        userPermissions.includes(Permission.DeleteCatalog),\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const dataService = injector.get(DataService);\r\n        const notificationService = injector.get(NotificationService);\r\n        modalService\r\n            .dialog({\r\n                title: _('common.confirm-bulk-delete'),\r\n                translationVars: {\r\n                    count: selection.length,\r\n                },\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? dataService.product.deleteProductVariants(unique(selection.map(p => p.id)))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(result => {\r\n                let deleted = 0;\r\n                const errors: string[] = [];\r\n                for (const item of result.deleteProductVariants) {\r\n                    if (item.result === DeletionResult.DELETED) {\r\n                        deleted++;\r\n                    } else if (item.message) {\r\n                        errors.push(item.message);\r\n                    }\r\n                }\r\n                if (0 < deleted) {\r\n                    notificationService.success(_('catalog.notify-bulk-delete-products-success'), {\r\n                        count: deleted,\r\n                    });\r\n                }\r\n                if (0 < errors.length) {\r\n                    notificationService.error(errors.join('\\n'));\r\n                }\r\n                hostComponent.refresh();\r\n                clearSelection();\r\n            });\r\n    },\r\n};\r\n\r\nexport const assignFacetValuesToProductVariantsBulkAction: BulkAction<\r\n    ItemOf<GetProductVariantListQuery, 'productVariants'>,\r\n    ProductVariantListComponent\r\n> = {\r\n    location: 'product-variant-list',\r\n    label: _('catalog.edit-facet-values'),\r\n    icon: 'tag',\r\n    requiresPermission: userPermissions =>\r\n        userPermissions.includes(Permission.UpdateCatalog) ||\r\n        userPermissions.includes(Permission.UpdateProduct),\r\n    onClick: ({ injector, selection, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const notificationService = injector.get(NotificationService);\r\n        const mode = 'variant';\r\n        const ids = unique(selection.map(p => p.id));\r\n        return modalService\r\n            .fromComponent(BulkAddFacetValuesDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    mode,\r\n                    ids,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    notificationService.success(_('common.notify-bulk-update-success'), {\r\n                        count: selection.length,\r\n                        entity: mode === 'variant' ? 'Products' : 'ProductVariants',\r\n                    });\r\n                    clearSelection();\r\n                }\r\n            });\r\n    },\r\n};\r\n","<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'common.name' | translate }}</th>\r\n            <th>{{ 'catalog.sku' | translate }}</th>\r\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\r\n                <th>{{ optionGroup.name }}</th>\r\n            </ng-container>\r\n            <th>{{ 'catalog.price' | translate }}</th>\r\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            <th>{{ 'common.enabled' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\r\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <div class=\"card-img\">\r\n                        <div class=\"featured-asset\">\r\n                            <img\r\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\r\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                            <ng-template #placeholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'common.name' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"sku\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'catalog.sku' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\r\n                    <td\r\n                        class=\"left align-middle\"\r\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\r\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\r\n                    >\r\n                        {{ option.name }}\r\n                    </td>\r\n                </ng-container>\r\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"!channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"priceWithTax\"\r\n                        ></vdr-currency-input>\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            step=\"1\"\r\n                            formControlName=\"stockOnHand\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            formControlName=\"enabled\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-toggle-wrapper>\r\n                </td>\r\n            </ng-container>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\nimport { UntypedFormArray, UntypedFormGroup } from '@angular/forms';\r\nimport { Asset, Permission, ProductDetailFragment, ProductVariantFragment } from '@vendure/admin-ui/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\ninterface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\ninterface PaginationConfig {\r\n    totalItems: number;\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-table',\r\n    templateUrl: './product-variants-table.component.html',\r\n    styleUrls: ['./product-variants-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\r\n    @Input('productVariantsFormArray') formArray: UntypedFormArray;\r\n    @Input() variants: ProductVariantFragment[];\r\n    @Input() paginationConfig: PaginationConfig;\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() optionGroups: ProductDetailFragment['optionGroups'];\r\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\r\n    formGroupMap = new Map<string, UntypedFormGroup>();\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    private subscription: Subscription;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.formArray.valueChanges\r\n            .pipe(\r\n                map(value => value.length),\r\n                debounceTime(1),\r\n                distinctUntilChanged(),\r\n            )\r\n            .subscribe(() => {\r\n                this.buildFormGroupMap();\r\n            });\r\n\r\n        this.buildFormGroupMap();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    trackByFn(index: number, item: any) {\r\n        if ((item as any).id != null) {\r\n            return (item as any).id;\r\n        } else {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    getFeaturedAsset(variant: ProductVariantFragment) {\r\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\r\n    }\r\n\r\n    optionGroupName(optionGroupId: string): string | undefined {\r\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\r\n        return group && group.name;\r\n    }\r\n\r\n    private buildFormGroupMap() {\r\n        this.formGroupMap.clear();\r\n        for (const controlGroup of this.formArray.controls) {\r\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as UntypedFormGroup);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\r\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\r\n    <input\r\n        id=\"name\"\r\n        type=\"text\"\r\n        #nameInput=\"ngModel\"\r\n        [(ngModel)]=\"name\"\r\n        required\r\n        (input)=\"updateCode($event.target.value)\"\r\n    />\r\n</vdr-form-field>\r\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\r\n</vdr-form-field>\r\n<clr-checkbox-wrapper>\r\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\r\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\r\n</clr-checkbox-wrapper>\r\n<section *ngIf=\"customFields.length\">\r\n    <label>{{ 'common.custom-fields' | translate }}</label>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"ProductOption\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"customFieldsForm\"\r\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</section>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"update()\"\r\n        [disabled]=\"\r\n            nameInput.invalid ||\r\n            codeInput.invalid ||\r\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\r\n        \"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.update-product-option' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    LanguageCode,\r\n    ProductVariantFragment,\r\n    UpdateProductOptionInput,\r\n    createUpdatedTranslatable,\r\n    Dialog,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-update-product-option-dialog',\r\n    templateUrl: './update-product-option-dialog.component.html',\r\n    styleUrls: ['./update-product-option-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpdateProductOptionDialogComponent\r\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit\r\n{\r\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\r\n    updateVariantName = true;\r\n    // Provided by caller\r\n    productOption: ProductVariantFragment['options'][number];\r\n    activeLanguage: LanguageCode;\r\n    name: string;\r\n    code: string;\r\n    customFields: CustomFieldConfig[];\r\n    codeInputTouched = false;\r\n    customFieldsForm: UntypedFormGroup;\r\n\r\n    ngOnInit(): void {\r\n        const currentTranslation = this.productOption.translations.find(\r\n            t => t.languageCode === this.activeLanguage,\r\n        );\r\n        this.name = currentTranslation?.name ?? '';\r\n        this.code = this.productOption.code;\r\n        this.customFieldsForm = new UntypedFormGroup({});\r\n        if (this.customFields) {\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? cfCurrentTranslation[key]\r\n                        : (this.productOption as any).customFields[key];\r\n                this.customFieldsForm.addControl(fieldDef.name, new UntypedFormControl(value));\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const result = createUpdatedTranslatable({\r\n            translatable: this.productOption,\r\n            languageCode: this.activeLanguage,\r\n            updatedFields: {\r\n                code: this.code,\r\n                name: this.name,\r\n                customFields: this.customFieldsForm.value,\r\n            },\r\n            customFieldConfig: this.customFields,\r\n            defaultTranslation: {\r\n                languageCode: this.activeLanguage,\r\n                name: '',\r\n            },\r\n        });\r\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    updateCode(nameValue: string) {\r\n        if (!this.codeInputTouched && !this.productOption.code) {\r\n            this.code = normalizeString(nameValue, '-');\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, ROUTES } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    AssetDetailQueryDocument,\r\n    BulkActionRegistryService,\r\n    CollectionDetailQueryDocument,\r\n    detailComponentWithResolver,\r\n    GetFacetDetailDocument,\r\n    GetProductDetailDocument,\r\n    GetProductVariantDetailDocument,\r\n    PageService,\r\n    SharedModule,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-types';\r\n\r\nimport { createRoutes } from './catalog.routes';\r\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { BulkAddFacetValuesDialogComponent } from './components/bulk-add-facet-values-dialog/bulk-add-facet-values-dialog.component';\r\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\r\nimport { CollectionDataTableComponent } from './components/collection-data-table/collection-data-table.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionBreadcrumbPipe } from './components/collection-list/collection-breadcrumb.pipe';\r\nimport {\r\n    assignCollectionsToChannelBulkAction,\r\n    deleteCollectionsBulkAction,\r\n    duplicateCollectionsBulkAction,\r\n    moveCollectionsBulkAction,\r\n    removeCollectionsFromChannelBulkAction,\r\n} from './components/collection-list/collection-list-bulk-actions';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\r\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\r\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\nimport { CreateFacetValueDialogComponent } from './components/create-facet-value-dialog/create-facet-value-dialog.component';\r\nimport { CreateProductOptionGroupDialogComponent } from './components/create-product-option-group-dialog/create-product-option-group-dialog.component';\r\nimport { CreateProductVariantDialogComponent } from './components/create-product-variant-dialog/create-product-variant-dialog.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport {\r\n    assignFacetsToChannelBulkAction,\r\n    deleteFacetsBulkAction,\r\n    duplicateFacetsBulkAction,\r\n    removeFacetsFromChannelBulkAction,\r\n} from './components/facet-list/facet-list-bulk-actions';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\r\nimport { MoveCollectionsDialogComponent } from './components/move-collections-dialog/move-collections-dialog.component';\r\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport {\r\n    assignFacetValuesToProductsBulkAction,\r\n    assignProductsToChannelBulkAction,\r\n    deleteProductsBulkAction,\r\n    duplicateProductsBulkAction,\r\n    removeProductsFromChannelBulkAction,\r\n} from './components/product-list/product-list-bulk-actions';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductVariantDetailComponent } from './components/product-variant-detail/product-variant-detail.component';\r\nimport {\r\n    assignFacetValuesToProductVariantsBulkAction,\r\n    assignProductVariantsToChannelBulkAction,\r\n    deleteProductVariantsBulkAction,\r\n    removeProductVariantsFromChannelBulkAction,\r\n} from './components/product-variant-list/product-variant-list-bulk-actions';\r\nimport { ProductVariantListComponent } from './components/product-variant-list/product-variant-list.component';\r\nimport { ProductVariantQuickJumpComponent } from './components/product-variant-quick-jump/product-variant-quick-jump.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\r\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\r\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\r\nimport { VariantPriceStrategyDetailComponent } from './components/variant-price-strategy-detail/variant-price-strategy-detail.component';\r\n\r\nconst CATALOG_COMPONENTS = [\r\n    ProductListComponent,\r\n    ProductDetailComponent,\r\n    FacetListComponent,\r\n    FacetDetailComponent,\r\n    GenerateProductVariantsComponent,\r\n    ApplyFacetDialogComponent,\r\n    AssetListComponent,\r\n    VariantPriceDetailComponent,\r\n    VariantPriceStrategyDetailComponent,\r\n    CollectionListComponent,\r\n    CollectionDetailComponent,\r\n    CollectionTreeComponent,\r\n    CollectionTreeNodeComponent,\r\n    CollectionContentsComponent,\r\n    ProductVariantsTableComponent,\r\n    OptionValueInputComponent,\r\n    UpdateProductOptionDialogComponent,\r\n    ProductVariantsEditorComponent,\r\n    AssignProductsToChannelDialogComponent,\r\n    AssetDetailComponent,\r\n    ConfirmVariantDeletionDialogComponent,\r\n    ProductOptionsEditorComponent,\r\n    BulkAddFacetValuesDialogComponent,\r\n    CollectionDataTableComponent,\r\n    CollectionBreadcrumbPipe,\r\n    MoveCollectionsDialogComponent,\r\n    ProductVariantListComponent,\r\n    ProductDetailComponent,\r\n    ProductVariantDetailComponent,\r\n    CreateProductVariantDialogComponent,\r\n    CreateProductOptionGroupDialogComponent,\r\n    ProductVariantQuickJumpComponent,\r\n    CreateFacetValueDialogComponent,\r\n];\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild([])],\r\n    exports: [...CATALOG_COMPONENTS],\r\n    declarations: [...CATALOG_COMPONENTS],\r\n    providers: [\r\n        {\r\n            provide: ROUTES,\r\n            useFactory: (pageService: PageService) => createRoutes(pageService),\r\n            multi: true,\r\n            deps: [PageService],\r\n        },\r\n    ],\r\n})\r\nexport class CatalogModule {\r\n    private static hasRegisteredTabsAndBulkActions = false;\r\n\r\n    constructor(bulkActionRegistryService: BulkActionRegistryService, pageService: PageService) {\r\n        if (CatalogModule.hasRegisteredTabsAndBulkActions) {\r\n            return;\r\n        }\r\n        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(assignProductsToChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(duplicateProductsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(removeProductsFromChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(deleteProductsBulkAction);\r\n\r\n        bulkActionRegistryService.registerBulkAction(assignFacetValuesToProductVariantsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(assignProductVariantsToChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(removeProductVariantsFromChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(deleteProductVariantsBulkAction);\r\n\r\n        bulkActionRegistryService.registerBulkAction(assignFacetsToChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(duplicateFacetsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(removeFacetsFromChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(deleteFacetsBulkAction);\r\n\r\n        bulkActionRegistryService.registerBulkAction(moveCollectionsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(assignCollectionsToChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(duplicateCollectionsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(removeCollectionsFromChannelBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(deleteCollectionsBulkAction);\r\n\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'product-list',\r\n            tab: _('catalog.products'),\r\n            route: '',\r\n            component: ProductListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'product-detail',\r\n            tab: _('catalog.product'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: ProductDetailComponent,\r\n                query: GetProductDetailDocument,\r\n                entityKey: 'product',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity ? entity.name : _('catalog.create-new-product'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'product-list',\r\n            tab: _('catalog.product-variants'),\r\n            route: 'variants',\r\n            component: ProductVariantListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'product-variant-detail',\r\n            tab: _('catalog.product-variants'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: ProductVariantDetailComponent,\r\n                query: GetProductVariantDetailDocument,\r\n                entityKey: 'productVariant',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: `${entity?.product.name}`,\r\n                        link: ['/catalog', 'products', entity?.product.id],\r\n                    },\r\n                    {\r\n                        label: `${entity?.name} (${entity?.sku})`,\r\n                        link: ['variants', entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'facet-list',\r\n            tab: _('catalog.facets'),\r\n            route: '',\r\n            component: FacetListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'facet-detail',\r\n            tab: _('catalog.facet'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: FacetDetailComponent,\r\n                query: GetFacetDetailDocument,\r\n                variables: {\r\n                    facetValueListOptions: {\r\n                        take: 10,\r\n                        skip: 0,\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    },\r\n                },\r\n                entityKey: 'facet',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity ? entity.name : _('catalog.create-new-facet'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'collection-list',\r\n            tab: _('catalog.collections'),\r\n            route: '',\r\n            component: CollectionListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'collection-detail',\r\n            tab: _('catalog.collection'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: CollectionDetailComponent,\r\n                query: CollectionDetailQueryDocument,\r\n                entityKey: 'collection',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity ? entity.name : _('catalog.create-new-collection'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'asset-list',\r\n            tab: _('catalog.assets'),\r\n            route: '',\r\n            component: AssetListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'asset-detail',\r\n            tab: _('catalog.asset'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: AssetDetailComponent,\r\n                query: AssetDetailQueryDocument,\r\n                entityKey: 'asset',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: `${entity?.name}`,\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        CatalogModule.hasRegisteredTabsAndBulkActions = true;\r\n    }\r\n}\r\n","import { gql } from 'apollo-angular';\r\n\r\nconst PRODUCT_LIST_QUERY_PRODUCT_FRAGMENT = gql`\r\n    fragment ProductListQueryProductFragment on Product {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n        enabled\r\n        languageCode\r\n        name\r\n        slug\r\n        featuredAsset {\r\n            id\r\n            createdAt\r\n            updatedAt\r\n            preview\r\n            focalPoint {\r\n                x\r\n                y\r\n            }\r\n        }\r\n        variantList {\r\n            totalItems\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PRODUCT_LIST_QUERY = gql`\r\n    query ProductListQuery($options: ProductListOptions) {\r\n        products(options: $options) {\r\n            items {\r\n                ...ProductListQueryProductFragment\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n    ${PRODUCT_LIST_QUERY_PRODUCT_FRAGMENT}\r\n`;\r\n","import { ASSET_FRAGMENT, PRODUCT_OPTION_FRAGMENT } from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\n\r\nexport const PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT = gql`\r\n    fragment ProductVariantDetailQueryProductVariantFragment on ProductVariant {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n        enabled\r\n        languageCode\r\n        name\r\n        price\r\n        currencyCode\r\n        prices {\r\n            price\r\n            currencyCode\r\n        }\r\n        priceWithTax\r\n        stockOnHand\r\n        stockAllocated\r\n        trackInventory\r\n        outOfStockThreshold\r\n        useGlobalOutOfStockThreshold\r\n        taxRateApplied {\r\n            id\r\n            name\r\n            value\r\n        }\r\n        taxCategory {\r\n            id\r\n            name\r\n        }\r\n        sku\r\n        options {\r\n            ...ProductOption\r\n        }\r\n        stockLevels {\r\n            id\r\n            createdAt\r\n            updatedAt\r\n            stockOnHand\r\n            stockAllocated\r\n            stockLocationId\r\n            stockLocation {\r\n                id\r\n                createdAt\r\n                updatedAt\r\n                name\r\n            }\r\n        }\r\n        facetValues {\r\n            id\r\n            code\r\n            name\r\n            facet {\r\n                id\r\n                name\r\n            }\r\n        }\r\n        featuredAsset {\r\n            ...Asset\r\n        }\r\n        assets {\r\n            ...Asset\r\n        }\r\n        translations {\r\n            id\r\n            languageCode\r\n            name\r\n        }\r\n        channels {\r\n            id\r\n            code\r\n        }\r\n        product {\r\n            id\r\n            name\r\n            optionGroups {\r\n                id\r\n                name\r\n                code\r\n                translations {\r\n                    id\r\n                    languageCode\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PRODUCT_VARIANT_DETAIL_QUERY = gql`\r\n    query GetProductVariantDetail($id: ID!) {\r\n        productVariant(id: $id) {\r\n            ...ProductVariantDetailQueryProductVariantFragment\r\n        }\r\n        stockLocations(options: { take: 100 }) {\r\n            items {\r\n                id\r\n                createdAt\r\n                updatedAt\r\n                name\r\n                description\r\n            }\r\n        }\r\n        taxCategories(options: { take: 100 }) {\r\n            items {\r\n                id\r\n                createdAt\r\n                updatedAt\r\n                name\r\n                isDefault\r\n            }\r\n            totalItems\r\n        }\r\n        activeChannel {\r\n            id\r\n            availableCurrencyCodes\r\n            defaultCurrencyCode\r\n        }\r\n    }\r\n    ${PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT}\r\n`;\r\n\r\nexport const PRODUCT_VARIANT_UPDATE_MUTATION = gql`\r\n    mutation ProductVariantUpdateMutation($input: [UpdateProductVariantInput!]!) {\r\n        updateProductVariants(input: $input) {\r\n            ...ProductVariantDetailQueryProductVariantFragment\r\n        }\r\n    }\r\n    ${PRODUCT_VARIANT_DETAIL_QUERY_PRODUCT_VARIANT_FRAGMENT}\r\n`;\r\n","import { ASSET_FRAGMENT } from '@vendure/admin-ui/core';\r\nimport { gql } from 'apollo-angular';\r\n\r\nconst PRODUCT_VARIANT_LIST_QUERY_PRODUCT_VARIANT_FRAGMENT = gql`\r\n    fragment ProductVariantListQueryProductVariantFragment on ProductVariant {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n        productId\r\n        enabled\r\n        languageCode\r\n        name\r\n        price\r\n        currencyCode\r\n        priceWithTax\r\n        trackInventory\r\n        outOfStockThreshold\r\n        stockLevels {\r\n            id\r\n            createdAt\r\n            updatedAt\r\n            stockLocationId\r\n            stockOnHand\r\n            stockAllocated\r\n            stockLocation {\r\n                id\r\n                createdAt\r\n                updatedAt\r\n                name\r\n            }\r\n        }\r\n        useGlobalOutOfStockThreshold\r\n        sku\r\n        featuredAsset {\r\n            ...Asset\r\n        }\r\n    }\r\n\r\n    ${ASSET_FRAGMENT}\r\n`;\r\n\r\nexport const PRODUCT_VARIANT_LIST_QUERY = gql`\r\n    query ProductVariantListQuery($options: ProductVariantListOptions!) {\r\n        productVariants(options: $options) {\r\n            items {\r\n                ...ProductVariantListQueryProductVariantFragment\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n    ${PRODUCT_VARIANT_LIST_QUERY_PRODUCT_VARIANT_FRAGMENT}\r\n`;\r\n","/* eslint-disable */\r\nexport type Maybe<T> = T;\r\nexport type InputMaybe<T> = T;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\r\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: { input: string | number; output: string | number; }\r\n  String: { input: string; output: string; }\r\n  Boolean: { input: boolean; output: boolean; }\r\n  Int: { input: number; output: number; }\r\n  Float: { input: number; output: number; }\r\n  DateTime: { input: any; output: any; }\r\n  JSON: { input: any; output: any; }\r\n  Money: { input: number; output: number; }\r\n  Upload: { input: any; output: any; }\r\n};\r\n\r\nexport type AddFulfillmentToOrderResult = CreateFulfillmentError | EmptyOrderLineSelectionError | Fulfillment | FulfillmentStateTransitionError | InsufficientStockOnHandError | InvalidFulfillmentHandlerError | ItemsAlreadyFulfilledError;\r\n\r\nexport type AddItemInput = {\r\n  productVariantId: Scalars['ID']['input'];\r\n  quantity: Scalars['Int']['input'];\r\n};\r\n\r\nexport type AddItemToDraftOrderInput = {\r\n  productVariantId: Scalars['ID']['input'];\r\n  quantity: Scalars['Int']['input'];\r\n};\r\n\r\nexport type AddManualPaymentToOrderResult = ManualPaymentStateError | Order;\r\n\r\nexport type AddNoteToCustomerInput = {\r\n  id: Scalars['ID']['input'];\r\n  isPublic: Scalars['Boolean']['input'];\r\n  note: Scalars['String']['input'];\r\n};\r\n\r\nexport type AddNoteToOrderInput = {\r\n  id: Scalars['ID']['input'];\r\n  isPublic: Scalars['Boolean']['input'];\r\n  note: Scalars['String']['input'];\r\n};\r\n\r\nexport type Address = Node & {\r\n  __typename?: 'Address';\r\n  city?: Maybe<Scalars['String']['output']>;\r\n  company?: Maybe<Scalars['String']['output']>;\r\n  country: Country;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  defaultBillingAddress?: Maybe<Scalars['Boolean']['output']>;\r\n  defaultShippingAddress?: Maybe<Scalars['Boolean']['output']>;\r\n  fullName?: Maybe<Scalars['String']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  phoneNumber?: Maybe<Scalars['String']['output']>;\r\n  postalCode?: Maybe<Scalars['String']['output']>;\r\n  province?: Maybe<Scalars['String']['output']>;\r\n  streetLine1: Scalars['String']['output'];\r\n  streetLine2?: Maybe<Scalars['String']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type AdjustDraftOrderLineInput = {\r\n  orderLineId: Scalars['ID']['input'];\r\n  quantity: Scalars['Int']['input'];\r\n};\r\n\r\nexport type Adjustment = {\r\n  __typename?: 'Adjustment';\r\n  adjustmentSource: Scalars['String']['output'];\r\n  amount: Scalars['Money']['output'];\r\n  data?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  type: AdjustmentType;\r\n};\r\n\r\nexport enum AdjustmentType {\r\n  DISTRIBUTED_ORDER_PROMOTION = 'DISTRIBUTED_ORDER_PROMOTION',\r\n  OTHER = 'OTHER',\r\n  PROMOTION = 'PROMOTION'\r\n}\r\n\r\nexport type Administrator = Node & {\r\n  __typename?: 'Administrator';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  emailAddress: Scalars['String']['output'];\r\n  firstName: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  lastName: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  user: User;\r\n};\r\n\r\nexport type AdministratorFilterParameter = {\r\n  _and?: InputMaybe<Array<AdministratorFilterParameter>>;\r\n  _or?: InputMaybe<Array<AdministratorFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  emailAddress?: InputMaybe<StringOperators>;\r\n  firstName?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  lastName?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type AdministratorList = PaginatedList & {\r\n  __typename?: 'AdministratorList';\r\n  items: Array<Administrator>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type AdministratorListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<AdministratorFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<AdministratorSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type AdministratorPaymentInput = {\r\n  metadata?: InputMaybe<Scalars['JSON']['input']>;\r\n  paymentMethod?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type AdministratorRefundInput = {\r\n  /**\r\n   * The amount to be refunded to this particular Payment. This was introduced in\r\n   * v2.2.0 as the preferred way to specify the refund amount. The `lines`, `shipping` and `adjustment`\r\n   * fields will be removed in a future version.\r\n   */\r\n  amount?: InputMaybe<Scalars['Money']['input']>;\r\n  paymentId: Scalars['ID']['input'];\r\n  reason?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type AdministratorSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  emailAddress?: InputMaybe<SortOrder>;\r\n  firstName?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  lastName?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type Allocation = Node & StockMovement & {\r\n  __typename?: 'Allocation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  orderLine: OrderLine;\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/** Returned if an attempting to refund an OrderItem which has already been refunded */\r\nexport type AlreadyRefundedError = ErrorResult & {\r\n  __typename?: 'AlreadyRefundedError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  refundId: Scalars['ID']['output'];\r\n};\r\n\r\nexport type ApplyCouponCodeResult = CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError | Order;\r\n\r\nexport type Asset = Node & {\r\n  __typename?: 'Asset';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  fileSize: Scalars['Int']['output'];\r\n  focalPoint?: Maybe<Coordinate>;\r\n  height: Scalars['Int']['output'];\r\n  id: Scalars['ID']['output'];\r\n  mimeType: Scalars['String']['output'];\r\n  name: Scalars['String']['output'];\r\n  preview: Scalars['String']['output'];\r\n  source: Scalars['String']['output'];\r\n  tags: Array<Tag>;\r\n  type: AssetType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  width: Scalars['Int']['output'];\r\n};\r\n\r\nexport type AssetFilterParameter = {\r\n  _and?: InputMaybe<Array<AssetFilterParameter>>;\r\n  _or?: InputMaybe<Array<AssetFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  fileSize?: InputMaybe<NumberOperators>;\r\n  height?: InputMaybe<NumberOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  mimeType?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  preview?: InputMaybe<StringOperators>;\r\n  source?: InputMaybe<StringOperators>;\r\n  type?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n  width?: InputMaybe<NumberOperators>;\r\n};\r\n\r\nexport type AssetList = PaginatedList & {\r\n  __typename?: 'AssetList';\r\n  items: Array<Asset>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type AssetListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<AssetFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<AssetSortParameter>;\r\n  tags?: InputMaybe<Array<Scalars['String']['input']>>;\r\n  tagsOperator?: InputMaybe<LogicalOperator>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type AssetSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  fileSize?: InputMaybe<SortOrder>;\r\n  height?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  mimeType?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  preview?: InputMaybe<SortOrder>;\r\n  source?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n  width?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport enum AssetType {\r\n  BINARY = 'BINARY',\r\n  IMAGE = 'IMAGE',\r\n  VIDEO = 'VIDEO'\r\n}\r\n\r\nexport type AssignAssetsToChannelInput = {\r\n  assetIds: Array<Scalars['ID']['input']>;\r\n  channelId: Scalars['ID']['input'];\r\n};\r\n\r\nexport type AssignCollectionsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  collectionIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignFacetsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  facetIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignPaymentMethodsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  paymentMethodIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignProductVariantsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  priceFactor?: InputMaybe<Scalars['Float']['input']>;\r\n  productVariantIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignProductsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  priceFactor?: InputMaybe<Scalars['Float']['input']>;\r\n  productIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignPromotionsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  promotionIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignShippingMethodsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  shippingMethodIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AssignStockLocationsToChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  stockLocationIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type AuthenticationInput = {\r\n  native?: InputMaybe<NativeAuthInput>;\r\n};\r\n\r\nexport type AuthenticationMethod = Node & {\r\n  __typename?: 'AuthenticationMethod';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  strategy: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type AuthenticationResult = CurrentUser | InvalidCredentialsError;\r\n\r\nexport type BooleanCustomFieldConfig = CustomField & {\r\n  __typename?: 'BooleanCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\n/** Operators for filtering on a list of Boolean fields */\r\nexport type BooleanListOperators = {\r\n  inList: Scalars['Boolean']['input'];\r\n};\r\n\r\n/** Operators for filtering on a Boolean field */\r\nexport type BooleanOperators = {\r\n  eq?: InputMaybe<Scalars['Boolean']['input']>;\r\n  isNull?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\n/** Returned if an attempting to cancel lines from an Order which is still active */\r\nexport type CancelActiveOrderError = ErrorResult & {\r\n  __typename?: 'CancelActiveOrderError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  orderState: Scalars['String']['output'];\r\n};\r\n\r\nexport type CancelOrderInput = {\r\n  /** Specify whether the shipping charges should also be cancelled. Defaults to false */\r\n  cancelShipping?: InputMaybe<Scalars['Boolean']['input']>;\r\n  /** Optionally specify which OrderLines to cancel. If not provided, all OrderLines will be cancelled */\r\n  lines?: InputMaybe<Array<OrderLineInput>>;\r\n  /** The id of the order to be cancelled */\r\n  orderId: Scalars['ID']['input'];\r\n  reason?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type CancelOrderResult = CancelActiveOrderError | EmptyOrderLineSelectionError | MultipleOrderError | Order | OrderStateTransitionError | QuantityTooGreatError;\r\n\r\n/** Returned if the Payment cancellation fails */\r\nexport type CancelPaymentError = ErrorResult & {\r\n  __typename?: 'CancelPaymentError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  paymentErrorMessage: Scalars['String']['output'];\r\n};\r\n\r\nexport type CancelPaymentResult = CancelPaymentError | Payment | PaymentStateTransitionError;\r\n\r\nexport type Cancellation = Node & StockMovement & {\r\n  __typename?: 'Cancellation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  orderLine: OrderLine;\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type Channel = Node & {\r\n  __typename?: 'Channel';\r\n  availableCurrencyCodes: Array<CurrencyCode>;\r\n  availableLanguageCodes?: Maybe<Array<LanguageCode>>;\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  /** @deprecated Use defaultCurrencyCode instead */\r\n  currencyCode: CurrencyCode;\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  defaultCurrencyCode: CurrencyCode;\r\n  defaultLanguageCode: LanguageCode;\r\n  defaultShippingZone?: Maybe<Zone>;\r\n  defaultTaxZone?: Maybe<Zone>;\r\n  id: Scalars['ID']['output'];\r\n  /** Not yet used - will be implemented in a future release. */\r\n  outOfStockThreshold?: Maybe<Scalars['Int']['output']>;\r\n  pricesIncludeTax: Scalars['Boolean']['output'];\r\n  seller?: Maybe<Seller>;\r\n  token: Scalars['String']['output'];\r\n  /** Not yet used - will be implemented in a future release. */\r\n  trackInventory?: Maybe<Scalars['Boolean']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/**\r\n * Returned when the default LanguageCode of a Channel is no longer found in the `availableLanguages`\r\n * of the GlobalSettings\r\n */\r\nexport type ChannelDefaultLanguageError = ErrorResult & {\r\n  __typename?: 'ChannelDefaultLanguageError';\r\n  channelCode: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  language: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type ChannelFilterParameter = {\r\n  _and?: InputMaybe<Array<ChannelFilterParameter>>;\r\n  _or?: InputMaybe<Array<ChannelFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  currencyCode?: InputMaybe<StringOperators>;\r\n  defaultCurrencyCode?: InputMaybe<StringOperators>;\r\n  defaultLanguageCode?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  outOfStockThreshold?: InputMaybe<NumberOperators>;\r\n  pricesIncludeTax?: InputMaybe<BooleanOperators>;\r\n  token?: InputMaybe<StringOperators>;\r\n  trackInventory?: InputMaybe<BooleanOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type ChannelList = PaginatedList & {\r\n  __typename?: 'ChannelList';\r\n  items: Array<Channel>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ChannelListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ChannelFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ChannelSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ChannelSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  outOfStockThreshold?: InputMaybe<SortOrder>;\r\n  token?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type Collection = Node & {\r\n  __typename?: 'Collection';\r\n  assets: Array<Asset>;\r\n  breadcrumbs: Array<CollectionBreadcrumb>;\r\n  children?: Maybe<Array<Collection>>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  featuredAsset?: Maybe<Asset>;\r\n  filters: Array<ConfigurableOperation>;\r\n  id: Scalars['ID']['output'];\r\n  inheritFilters: Scalars['Boolean']['output'];\r\n  isPrivate: Scalars['Boolean']['output'];\r\n  languageCode?: Maybe<LanguageCode>;\r\n  name: Scalars['String']['output'];\r\n  parent?: Maybe<Collection>;\r\n  parentId: Scalars['ID']['output'];\r\n  position: Scalars['Int']['output'];\r\n  productVariants: ProductVariantList;\r\n  slug: Scalars['String']['output'];\r\n  translations: Array<CollectionTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n\r\nexport type CollectionProductVariantsArgs = {\r\n  options?: InputMaybe<ProductVariantListOptions>;\r\n};\r\n\r\nexport type CollectionBreadcrumb = {\r\n  __typename?: 'CollectionBreadcrumb';\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  slug: Scalars['String']['output'];\r\n};\r\n\r\nexport type CollectionFilterParameter = {\r\n  _and?: InputMaybe<Array<CollectionFilterParameter>>;\r\n  _or?: InputMaybe<Array<CollectionFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  inheritFilters?: InputMaybe<BooleanOperators>;\r\n  isPrivate?: InputMaybe<BooleanOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  parentId?: InputMaybe<IdOperators>;\r\n  position?: InputMaybe<NumberOperators>;\r\n  slug?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type CollectionList = PaginatedList & {\r\n  __typename?: 'CollectionList';\r\n  items: Array<Collection>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type CollectionListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<CollectionFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<CollectionSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n  topLevelOnly?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\n/**\r\n * Which Collections are present in the products returned\r\n * by the search, and in what quantity.\r\n */\r\nexport type CollectionResult = {\r\n  __typename?: 'CollectionResult';\r\n  collection: Collection;\r\n  count: Scalars['Int']['output'];\r\n};\r\n\r\nexport type CollectionSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  parentId?: InputMaybe<SortOrder>;\r\n  position?: InputMaybe<SortOrder>;\r\n  slug?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type CollectionTranslation = {\r\n  __typename?: 'CollectionTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  slug: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ConfigArg = {\r\n  __typename?: 'ConfigArg';\r\n  name: Scalars['String']['output'];\r\n  value: Scalars['String']['output'];\r\n};\r\n\r\nexport type ConfigArgDefinition = {\r\n  __typename?: 'ConfigArgDefinition';\r\n  defaultValue?: Maybe<Scalars['JSON']['output']>;\r\n  description?: Maybe<Scalars['String']['output']>;\r\n  label?: Maybe<Scalars['String']['output']>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  required: Scalars['Boolean']['output'];\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type ConfigArgInput = {\r\n  name: Scalars['String']['input'];\r\n  /** A JSON stringified representation of the actual value */\r\n  value: Scalars['String']['input'];\r\n};\r\n\r\nexport type ConfigurableOperation = {\r\n  __typename?: 'ConfigurableOperation';\r\n  args: Array<ConfigArg>;\r\n  code: Scalars['String']['output'];\r\n};\r\n\r\nexport type ConfigurableOperationDefinition = {\r\n  __typename?: 'ConfigurableOperationDefinition';\r\n  args: Array<ConfigArgDefinition>;\r\n  code: Scalars['String']['output'];\r\n  description: Scalars['String']['output'];\r\n};\r\n\r\nexport type ConfigurableOperationInput = {\r\n  arguments: Array<ConfigArgInput>;\r\n  code: Scalars['String']['input'];\r\n};\r\n\r\nexport type Coordinate = {\r\n  __typename?: 'Coordinate';\r\n  x: Scalars['Float']['output'];\r\n  y: Scalars['Float']['output'];\r\n};\r\n\r\nexport type CoordinateInput = {\r\n  x: Scalars['Float']['input'];\r\n  y: Scalars['Float']['input'];\r\n};\r\n\r\n/**\r\n * A Country of the world which your shop operates in.\r\n *\r\n * The `code` field is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc. This code is used in certain inputs such as\r\n * `UpdateAddressInput` and `CreateAddressInput` to specify the country.\r\n */\r\nexport type Country = Node & Region & {\r\n  __typename?: 'Country';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  enabled: Scalars['Boolean']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  parent?: Maybe<Region>;\r\n  parentId?: Maybe<Scalars['ID']['output']>;\r\n  translations: Array<RegionTranslation>;\r\n  type: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type CountryFilterParameter = {\r\n  _and?: InputMaybe<Array<CountryFilterParameter>>;\r\n  _or?: InputMaybe<Array<CountryFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  parentId?: InputMaybe<IdOperators>;\r\n  type?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type CountryList = PaginatedList & {\r\n  __typename?: 'CountryList';\r\n  items: Array<Country>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type CountryListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<CountryFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<CountrySortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type CountrySortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  parentId?: InputMaybe<SortOrder>;\r\n  type?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type CountryTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeExpiredError = ErrorResult & {\r\n  __typename?: 'CouponCodeExpiredError';\r\n  couponCode: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeInvalidError = ErrorResult & {\r\n  __typename?: 'CouponCodeInvalidError';\r\n  couponCode: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeLimitError = ErrorResult & {\r\n  __typename?: 'CouponCodeLimitError';\r\n  couponCode: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  limit: Scalars['Int']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/**\r\n * Input used to create an Address.\r\n *\r\n * The countryCode must correspond to a `code` property of a Country that has been defined in the\r\n * Vendure server. The `code` property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\r\n * If an invalid code is passed, the mutation will fail.\r\n */\r\nexport type CreateAddressInput = {\r\n  city?: InputMaybe<Scalars['String']['input']>;\r\n  company?: InputMaybe<Scalars['String']['input']>;\r\n  countryCode: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  defaultBillingAddress?: InputMaybe<Scalars['Boolean']['input']>;\r\n  defaultShippingAddress?: InputMaybe<Scalars['Boolean']['input']>;\r\n  fullName?: InputMaybe<Scalars['String']['input']>;\r\n  phoneNumber?: InputMaybe<Scalars['String']['input']>;\r\n  postalCode?: InputMaybe<Scalars['String']['input']>;\r\n  province?: InputMaybe<Scalars['String']['input']>;\r\n  streetLine1: Scalars['String']['input'];\r\n  streetLine2?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type CreateAdministratorInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  emailAddress: Scalars['String']['input'];\r\n  firstName: Scalars['String']['input'];\r\n  lastName: Scalars['String']['input'];\r\n  password: Scalars['String']['input'];\r\n  roleIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type CreateAssetInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  file: Scalars['Upload']['input'];\r\n  tags?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\nexport type CreateAssetResult = Asset | MimeTypeError;\r\n\r\nexport type CreateChannelInput = {\r\n  availableCurrencyCodes?: InputMaybe<Array<CurrencyCode>>;\r\n  availableLanguageCodes?: InputMaybe<Array<LanguageCode>>;\r\n  code: Scalars['String']['input'];\r\n  /** @deprecated Use defaultCurrencyCode instead */\r\n  currencyCode?: InputMaybe<CurrencyCode>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  defaultCurrencyCode?: InputMaybe<CurrencyCode>;\r\n  defaultLanguageCode: LanguageCode;\r\n  defaultShippingZoneId: Scalars['ID']['input'];\r\n  defaultTaxZoneId: Scalars['ID']['input'];\r\n  outOfStockThreshold?: InputMaybe<Scalars['Int']['input']>;\r\n  pricesIncludeTax: Scalars['Boolean']['input'];\r\n  sellerId?: InputMaybe<Scalars['ID']['input']>;\r\n  token: Scalars['String']['input'];\r\n  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type CreateChannelResult = Channel | LanguageNotAvailableError;\r\n\r\nexport type CreateCollectionInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  filters: Array<ConfigurableOperationInput>;\r\n  inheritFilters?: InputMaybe<Scalars['Boolean']['input']>;\r\n  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;\r\n  parentId?: InputMaybe<Scalars['ID']['input']>;\r\n  translations: Array<CreateCollectionTranslationInput>;\r\n};\r\n\r\nexport type CreateCollectionTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description: Scalars['String']['input'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['input'];\r\n  slug: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateCountryInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled: Scalars['Boolean']['input'];\r\n  translations: Array<CountryTranslationInput>;\r\n};\r\n\r\nexport type CreateCustomerGroupInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  customerIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  name: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateCustomerInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  emailAddress: Scalars['String']['input'];\r\n  firstName: Scalars['String']['input'];\r\n  lastName: Scalars['String']['input'];\r\n  phoneNumber?: InputMaybe<Scalars['String']['input']>;\r\n  title?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type CreateCustomerResult = Customer | EmailAddressConflictError;\r\n\r\nexport type CreateFacetInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  isPrivate: Scalars['Boolean']['input'];\r\n  translations: Array<FacetTranslationInput>;\r\n  values?: InputMaybe<Array<CreateFacetValueWithFacetInput>>;\r\n};\r\n\r\nexport type CreateFacetValueInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  facetId: Scalars['ID']['input'];\r\n  translations: Array<FacetValueTranslationInput>;\r\n};\r\n\r\nexport type CreateFacetValueWithFacetInput = {\r\n  code: Scalars['String']['input'];\r\n  translations: Array<FacetValueTranslationInput>;\r\n};\r\n\r\n/** Returned if an error is thrown in a FulfillmentHandler's createFulfillment method */\r\nexport type CreateFulfillmentError = ErrorResult & {\r\n  __typename?: 'CreateFulfillmentError';\r\n  errorCode: ErrorCode;\r\n  fulfillmentHandlerError: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type CreateGroupOptionInput = {\r\n  code: Scalars['String']['input'];\r\n  translations: Array<ProductOptionGroupTranslationInput>;\r\n};\r\n\r\nexport type CreatePaymentMethodInput = {\r\n  checker?: InputMaybe<ConfigurableOperationInput>;\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled: Scalars['Boolean']['input'];\r\n  handler: ConfigurableOperationInput;\r\n  translations: Array<PaymentMethodTranslationInput>;\r\n};\r\n\r\nexport type CreateProductInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  facetValueIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  translations: Array<ProductTranslationInput>;\r\n};\r\n\r\nexport type CreateProductOptionGroupInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  options: Array<CreateGroupOptionInput>;\r\n  translations: Array<ProductOptionGroupTranslationInput>;\r\n};\r\n\r\nexport type CreateProductOptionInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  productOptionGroupId: Scalars['ID']['input'];\r\n  translations: Array<ProductOptionGroupTranslationInput>;\r\n};\r\n\r\nexport type CreateProductVariantInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  facetValueIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  optionIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  outOfStockThreshold?: InputMaybe<Scalars['Int']['input']>;\r\n  price?: InputMaybe<Scalars['Money']['input']>;\r\n  productId: Scalars['ID']['input'];\r\n  sku: Scalars['String']['input'];\r\n  stockLevels?: InputMaybe<Array<StockLevelInput>>;\r\n  stockOnHand?: InputMaybe<Scalars['Int']['input']>;\r\n  taxCategoryId?: InputMaybe<Scalars['ID']['input']>;\r\n  trackInventory?: InputMaybe<GlobalFlag>;\r\n  translations: Array<ProductVariantTranslationInput>;\r\n  useGlobalOutOfStockThreshold?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type CreateProductVariantOptionInput = {\r\n  code: Scalars['String']['input'];\r\n  optionGroupId: Scalars['ID']['input'];\r\n  translations: Array<ProductOptionTranslationInput>;\r\n};\r\n\r\nexport type CreatePromotionInput = {\r\n  actions: Array<ConfigurableOperationInput>;\r\n  conditions: Array<ConfigurableOperationInput>;\r\n  couponCode?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled: Scalars['Boolean']['input'];\r\n  endsAt?: InputMaybe<Scalars['DateTime']['input']>;\r\n  perCustomerUsageLimit?: InputMaybe<Scalars['Int']['input']>;\r\n  startsAt?: InputMaybe<Scalars['DateTime']['input']>;\r\n  translations: Array<PromotionTranslationInput>;\r\n  usageLimit?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type CreatePromotionResult = MissingConditionsError | Promotion;\r\n\r\nexport type CreateProvinceInput = {\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled: Scalars['Boolean']['input'];\r\n  translations: Array<ProvinceTranslationInput>;\r\n};\r\n\r\nexport type CreateRoleInput = {\r\n  channelIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  code: Scalars['String']['input'];\r\n  description: Scalars['String']['input'];\r\n  permissions: Array<Permission>;\r\n};\r\n\r\nexport type CreateSellerInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  name: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateShippingMethodInput = {\r\n  calculator: ConfigurableOperationInput;\r\n  checker: ConfigurableOperationInput;\r\n  code: Scalars['String']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  fulfillmentHandler: Scalars['String']['input'];\r\n  translations: Array<ShippingMethodTranslationInput>;\r\n};\r\n\r\nexport type CreateStockLocationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  name: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateTagInput = {\r\n  value: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateTaxCategoryInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  isDefault?: InputMaybe<Scalars['Boolean']['input']>;\r\n  name: Scalars['String']['input'];\r\n};\r\n\r\nexport type CreateTaxRateInput = {\r\n  categoryId: Scalars['ID']['input'];\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  customerGroupId?: InputMaybe<Scalars['ID']['input']>;\r\n  enabled: Scalars['Boolean']['input'];\r\n  name: Scalars['String']['input'];\r\n  value: Scalars['Float']['input'];\r\n  zoneId: Scalars['ID']['input'];\r\n};\r\n\r\nexport type CreateZoneInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  memberIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  name: Scalars['String']['input'];\r\n};\r\n\r\n/**\r\n * @description\r\n * ISO 4217 currency code\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum CurrencyCode {\r\n  /** United Arab Emirates dirham */\r\n  AED = 'AED',\r\n  /** Afghan afghani */\r\n  AFN = 'AFN',\r\n  /** Albanian lek */\r\n  ALL = 'ALL',\r\n  /** Armenian dram */\r\n  AMD = 'AMD',\r\n  /** Netherlands Antillean guilder */\r\n  ANG = 'ANG',\r\n  /** Angolan kwanza */\r\n  AOA = 'AOA',\r\n  /** Argentine peso */\r\n  ARS = 'ARS',\r\n  /** Australian dollar */\r\n  AUD = 'AUD',\r\n  /** Aruban florin */\r\n  AWG = 'AWG',\r\n  /** Azerbaijani manat */\r\n  AZN = 'AZN',\r\n  /** Bosnia and Herzegovina convertible mark */\r\n  BAM = 'BAM',\r\n  /** Barbados dollar */\r\n  BBD = 'BBD',\r\n  /** Bangladeshi taka */\r\n  BDT = 'BDT',\r\n  /** Bulgarian lev */\r\n  BGN = 'BGN',\r\n  /** Bahraini dinar */\r\n  BHD = 'BHD',\r\n  /** Burundian franc */\r\n  BIF = 'BIF',\r\n  /** Bermudian dollar */\r\n  BMD = 'BMD',\r\n  /** Brunei dollar */\r\n  BND = 'BND',\r\n  /** Boliviano */\r\n  BOB = 'BOB',\r\n  /** Brazilian real */\r\n  BRL = 'BRL',\r\n  /** Bahamian dollar */\r\n  BSD = 'BSD',\r\n  /** Bhutanese ngultrum */\r\n  BTN = 'BTN',\r\n  /** Botswana pula */\r\n  BWP = 'BWP',\r\n  /** Belarusian ruble */\r\n  BYN = 'BYN',\r\n  /** Belize dollar */\r\n  BZD = 'BZD',\r\n  /** Canadian dollar */\r\n  CAD = 'CAD',\r\n  /** Congolese franc */\r\n  CDF = 'CDF',\r\n  /** Swiss franc */\r\n  CHF = 'CHF',\r\n  /** Chilean peso */\r\n  CLP = 'CLP',\r\n  /** Renminbi (Chinese) yuan */\r\n  CNY = 'CNY',\r\n  /** Colombian peso */\r\n  COP = 'COP',\r\n  /** Costa Rican colon */\r\n  CRC = 'CRC',\r\n  /** Cuban convertible peso */\r\n  CUC = 'CUC',\r\n  /** Cuban peso */\r\n  CUP = 'CUP',\r\n  /** Cape Verde escudo */\r\n  CVE = 'CVE',\r\n  /** Czech koruna */\r\n  CZK = 'CZK',\r\n  /** Djiboutian franc */\r\n  DJF = 'DJF',\r\n  /** Danish krone */\r\n  DKK = 'DKK',\r\n  /** Dominican peso */\r\n  DOP = 'DOP',\r\n  /** Algerian dinar */\r\n  DZD = 'DZD',\r\n  /** Egyptian pound */\r\n  EGP = 'EGP',\r\n  /** Eritrean nakfa */\r\n  ERN = 'ERN',\r\n  /** Ethiopian birr */\r\n  ETB = 'ETB',\r\n  /** Euro */\r\n  EUR = 'EUR',\r\n  /** Fiji dollar */\r\n  FJD = 'FJD',\r\n  /** Falkland Islands pound */\r\n  FKP = 'FKP',\r\n  /** Pound sterling */\r\n  GBP = 'GBP',\r\n  /** Georgian lari */\r\n  GEL = 'GEL',\r\n  /** Ghanaian cedi */\r\n  GHS = 'GHS',\r\n  /** Gibraltar pound */\r\n  GIP = 'GIP',\r\n  /** Gambian dalasi */\r\n  GMD = 'GMD',\r\n  /** Guinean franc */\r\n  GNF = 'GNF',\r\n  /** Guatemalan quetzal */\r\n  GTQ = 'GTQ',\r\n  /** Guyanese dollar */\r\n  GYD = 'GYD',\r\n  /** Hong Kong dollar */\r\n  HKD = 'HKD',\r\n  /** Honduran lempira */\r\n  HNL = 'HNL',\r\n  /** Croatian kuna */\r\n  HRK = 'HRK',\r\n  /** Haitian gourde */\r\n  HTG = 'HTG',\r\n  /** Hungarian forint */\r\n  HUF = 'HUF',\r\n  /** Indonesian rupiah */\r\n  IDR = 'IDR',\r\n  /** Israeli new shekel */\r\n  ILS = 'ILS',\r\n  /** Indian rupee */\r\n  INR = 'INR',\r\n  /** Iraqi dinar */\r\n  IQD = 'IQD',\r\n  /** Iranian rial */\r\n  IRR = 'IRR',\r\n  /** Icelandic króna */\r\n  ISK = 'ISK',\r\n  /** Jamaican dollar */\r\n  JMD = 'JMD',\r\n  /** Jordanian dinar */\r\n  JOD = 'JOD',\r\n  /** Japanese yen */\r\n  JPY = 'JPY',\r\n  /** Kenyan shilling */\r\n  KES = 'KES',\r\n  /** Kyrgyzstani som */\r\n  KGS = 'KGS',\r\n  /** Cambodian riel */\r\n  KHR = 'KHR',\r\n  /** Comoro franc */\r\n  KMF = 'KMF',\r\n  /** North Korean won */\r\n  KPW = 'KPW',\r\n  /** South Korean won */\r\n  KRW = 'KRW',\r\n  /** Kuwaiti dinar */\r\n  KWD = 'KWD',\r\n  /** Cayman Islands dollar */\r\n  KYD = 'KYD',\r\n  /** Kazakhstani tenge */\r\n  KZT = 'KZT',\r\n  /** Lao kip */\r\n  LAK = 'LAK',\r\n  /** Lebanese pound */\r\n  LBP = 'LBP',\r\n  /** Sri Lankan rupee */\r\n  LKR = 'LKR',\r\n  /** Liberian dollar */\r\n  LRD = 'LRD',\r\n  /** Lesotho loti */\r\n  LSL = 'LSL',\r\n  /** Libyan dinar */\r\n  LYD = 'LYD',\r\n  /** Moroccan dirham */\r\n  MAD = 'MAD',\r\n  /** Moldovan leu */\r\n  MDL = 'MDL',\r\n  /** Malagasy ariary */\r\n  MGA = 'MGA',\r\n  /** Macedonian denar */\r\n  MKD = 'MKD',\r\n  /** Myanmar kyat */\r\n  MMK = 'MMK',\r\n  /** Mongolian tögrög */\r\n  MNT = 'MNT',\r\n  /** Macanese pataca */\r\n  MOP = 'MOP',\r\n  /** Mauritanian ouguiya */\r\n  MRU = 'MRU',\r\n  /** Mauritian rupee */\r\n  MUR = 'MUR',\r\n  /** Maldivian rufiyaa */\r\n  MVR = 'MVR',\r\n  /** Malawian kwacha */\r\n  MWK = 'MWK',\r\n  /** Mexican peso */\r\n  MXN = 'MXN',\r\n  /** Malaysian ringgit */\r\n  MYR = 'MYR',\r\n  /** Mozambican metical */\r\n  MZN = 'MZN',\r\n  /** Namibian dollar */\r\n  NAD = 'NAD',\r\n  /** Nigerian naira */\r\n  NGN = 'NGN',\r\n  /** Nicaraguan córdoba */\r\n  NIO = 'NIO',\r\n  /** Norwegian krone */\r\n  NOK = 'NOK',\r\n  /** Nepalese rupee */\r\n  NPR = 'NPR',\r\n  /** New Zealand dollar */\r\n  NZD = 'NZD',\r\n  /** Omani rial */\r\n  OMR = 'OMR',\r\n  /** Panamanian balboa */\r\n  PAB = 'PAB',\r\n  /** Peruvian sol */\r\n  PEN = 'PEN',\r\n  /** Papua New Guinean kina */\r\n  PGK = 'PGK',\r\n  /** Philippine peso */\r\n  PHP = 'PHP',\r\n  /** Pakistani rupee */\r\n  PKR = 'PKR',\r\n  /** Polish złoty */\r\n  PLN = 'PLN',\r\n  /** Paraguayan guaraní */\r\n  PYG = 'PYG',\r\n  /** Qatari riyal */\r\n  QAR = 'QAR',\r\n  /** Romanian leu */\r\n  RON = 'RON',\r\n  /** Serbian dinar */\r\n  RSD = 'RSD',\r\n  /** Russian ruble */\r\n  RUB = 'RUB',\r\n  /** Rwandan franc */\r\n  RWF = 'RWF',\r\n  /** Saudi riyal */\r\n  SAR = 'SAR',\r\n  /** Solomon Islands dollar */\r\n  SBD = 'SBD',\r\n  /** Seychelles rupee */\r\n  SCR = 'SCR',\r\n  /** Sudanese pound */\r\n  SDG = 'SDG',\r\n  /** Swedish krona/kronor */\r\n  SEK = 'SEK',\r\n  /** Singapore dollar */\r\n  SGD = 'SGD',\r\n  /** Saint Helena pound */\r\n  SHP = 'SHP',\r\n  /** Sierra Leonean leone */\r\n  SLL = 'SLL',\r\n  /** Somali shilling */\r\n  SOS = 'SOS',\r\n  /** Surinamese dollar */\r\n  SRD = 'SRD',\r\n  /** South Sudanese pound */\r\n  SSP = 'SSP',\r\n  /** São Tomé and Príncipe dobra */\r\n  STN = 'STN',\r\n  /** Salvadoran colón */\r\n  SVC = 'SVC',\r\n  /** Syrian pound */\r\n  SYP = 'SYP',\r\n  /** Swazi lilangeni */\r\n  SZL = 'SZL',\r\n  /** Thai baht */\r\n  THB = 'THB',\r\n  /** Tajikistani somoni */\r\n  TJS = 'TJS',\r\n  /** Turkmenistan manat */\r\n  TMT = 'TMT',\r\n  /** Tunisian dinar */\r\n  TND = 'TND',\r\n  /** Tongan paʻanga */\r\n  TOP = 'TOP',\r\n  /** Turkish lira */\r\n  TRY = 'TRY',\r\n  /** Trinidad and Tobago dollar */\r\n  TTD = 'TTD',\r\n  /** New Taiwan dollar */\r\n  TWD = 'TWD',\r\n  /** Tanzanian shilling */\r\n  TZS = 'TZS',\r\n  /** Ukrainian hryvnia */\r\n  UAH = 'UAH',\r\n  /** Ugandan shilling */\r\n  UGX = 'UGX',\r\n  /** United States dollar */\r\n  USD = 'USD',\r\n  /** Uruguayan peso */\r\n  UYU = 'UYU',\r\n  /** Uzbekistan som */\r\n  UZS = 'UZS',\r\n  /** Venezuelan bolívar soberano */\r\n  VES = 'VES',\r\n  /** Vietnamese đồng */\r\n  VND = 'VND',\r\n  /** Vanuatu vatu */\r\n  VUV = 'VUV',\r\n  /** Samoan tala */\r\n  WST = 'WST',\r\n  /** CFA franc BEAC */\r\n  XAF = 'XAF',\r\n  /** East Caribbean dollar */\r\n  XCD = 'XCD',\r\n  /** CFA franc BCEAO */\r\n  XOF = 'XOF',\r\n  /** CFP franc (franc Pacifique) */\r\n  XPF = 'XPF',\r\n  /** Yemeni rial */\r\n  YER = 'YER',\r\n  /** South African rand */\r\n  ZAR = 'ZAR',\r\n  /** Zambian kwacha */\r\n  ZMW = 'ZMW',\r\n  /** Zimbabwean dollar */\r\n  ZWL = 'ZWL'\r\n}\r\n\r\nexport type CurrentUser = {\r\n  __typename?: 'CurrentUser';\r\n  channels: Array<CurrentUserChannel>;\r\n  id: Scalars['ID']['output'];\r\n  identifier: Scalars['String']['output'];\r\n};\r\n\r\nexport type CurrentUserChannel = {\r\n  __typename?: 'CurrentUserChannel';\r\n  code: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  permissions: Array<Permission>;\r\n  token: Scalars['String']['output'];\r\n};\r\n\r\nexport type CustomField = {\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type CustomFieldConfig = BooleanCustomFieldConfig | DateTimeCustomFieldConfig | FloatCustomFieldConfig | IntCustomFieldConfig | LocaleStringCustomFieldConfig | LocaleTextCustomFieldConfig | RelationCustomFieldConfig | StringCustomFieldConfig | TextCustomFieldConfig;\r\n\r\n/**\r\n * This type is deprecated in v2.2 in favor of the EntityCustomFields type,\r\n * which allows custom fields to be defined on user-supplies entities.\r\n */\r\nexport type CustomFields = {\r\n  __typename?: 'CustomFields';\r\n  Address: Array<CustomFieldConfig>;\r\n  Administrator: Array<CustomFieldConfig>;\r\n  Asset: Array<CustomFieldConfig>;\r\n  Channel: Array<CustomFieldConfig>;\r\n  Collection: Array<CustomFieldConfig>;\r\n  Customer: Array<CustomFieldConfig>;\r\n  CustomerGroup: Array<CustomFieldConfig>;\r\n  Facet: Array<CustomFieldConfig>;\r\n  FacetValue: Array<CustomFieldConfig>;\r\n  Fulfillment: Array<CustomFieldConfig>;\r\n  GlobalSettings: Array<CustomFieldConfig>;\r\n  Order: Array<CustomFieldConfig>;\r\n  OrderLine: Array<CustomFieldConfig>;\r\n  PaymentMethod: Array<CustomFieldConfig>;\r\n  Product: Array<CustomFieldConfig>;\r\n  ProductOption: Array<CustomFieldConfig>;\r\n  ProductOptionGroup: Array<CustomFieldConfig>;\r\n  ProductVariant: Array<CustomFieldConfig>;\r\n  ProductVariantPrice: Array<CustomFieldConfig>;\r\n  Promotion: Array<CustomFieldConfig>;\r\n  Region: Array<CustomFieldConfig>;\r\n  Seller: Array<CustomFieldConfig>;\r\n  ShippingMethod: Array<CustomFieldConfig>;\r\n  StockLocation: Array<CustomFieldConfig>;\r\n  TaxCategory: Array<CustomFieldConfig>;\r\n  TaxRate: Array<CustomFieldConfig>;\r\n  User: Array<CustomFieldConfig>;\r\n  Zone: Array<CustomFieldConfig>;\r\n};\r\n\r\nexport type Customer = Node & {\r\n  __typename?: 'Customer';\r\n  addresses?: Maybe<Array<Address>>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  emailAddress: Scalars['String']['output'];\r\n  firstName: Scalars['String']['output'];\r\n  groups: Array<CustomerGroup>;\r\n  history: HistoryEntryList;\r\n  id: Scalars['ID']['output'];\r\n  lastName: Scalars['String']['output'];\r\n  orders: OrderList;\r\n  phoneNumber?: Maybe<Scalars['String']['output']>;\r\n  title?: Maybe<Scalars['String']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  user?: Maybe<User>;\r\n};\r\n\r\n\r\nexport type CustomerHistoryArgs = {\r\n  options?: InputMaybe<HistoryEntryListOptions>;\r\n};\r\n\r\n\r\nexport type CustomerOrdersArgs = {\r\n  options?: InputMaybe<OrderListOptions>;\r\n};\r\n\r\nexport type CustomerFilterParameter = {\r\n  _and?: InputMaybe<Array<CustomerFilterParameter>>;\r\n  _or?: InputMaybe<Array<CustomerFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  emailAddress?: InputMaybe<StringOperators>;\r\n  firstName?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  lastName?: InputMaybe<StringOperators>;\r\n  phoneNumber?: InputMaybe<StringOperators>;\r\n  postalCode?: InputMaybe<StringOperators>;\r\n  title?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type CustomerGroup = Node & {\r\n  __typename?: 'CustomerGroup';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  customers: CustomerList;\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n\r\nexport type CustomerGroupCustomersArgs = {\r\n  options?: InputMaybe<CustomerListOptions>;\r\n};\r\n\r\nexport type CustomerGroupFilterParameter = {\r\n  _and?: InputMaybe<Array<CustomerGroupFilterParameter>>;\r\n  _or?: InputMaybe<Array<CustomerGroupFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type CustomerGroupList = PaginatedList & {\r\n  __typename?: 'CustomerGroupList';\r\n  items: Array<CustomerGroup>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type CustomerGroupListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<CustomerGroupFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<CustomerGroupSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type CustomerGroupSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type CustomerList = PaginatedList & {\r\n  __typename?: 'CustomerList';\r\n  items: Array<Customer>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type CustomerListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<CustomerFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<CustomerSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type CustomerSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  emailAddress?: InputMaybe<SortOrder>;\r\n  firstName?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  lastName?: InputMaybe<SortOrder>;\r\n  phoneNumber?: InputMaybe<SortOrder>;\r\n  title?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\n/** Operators for filtering on a list of Date fields */\r\nexport type DateListOperators = {\r\n  inList: Scalars['DateTime']['input'];\r\n};\r\n\r\n/** Operators for filtering on a DateTime field */\r\nexport type DateOperators = {\r\n  after?: InputMaybe<Scalars['DateTime']['input']>;\r\n  before?: InputMaybe<Scalars['DateTime']['input']>;\r\n  between?: InputMaybe<DateRange>;\r\n  eq?: InputMaybe<Scalars['DateTime']['input']>;\r\n  isNull?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type DateRange = {\r\n  end: Scalars['DateTime']['input'];\r\n  start: Scalars['DateTime']['input'];\r\n};\r\n\r\n/**\r\n * Expects the same validation formats as the `<input type=\"datetime-local\">` HTML element.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes\r\n */\r\nexport type DateTimeCustomFieldConfig = CustomField & {\r\n  __typename?: 'DateTimeCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  max?: Maybe<Scalars['String']['output']>;\r\n  min?: Maybe<Scalars['String']['output']>;\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  step?: Maybe<Scalars['Int']['output']>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type DeleteAssetInput = {\r\n  assetId: Scalars['ID']['input'];\r\n  deleteFromAllChannels?: InputMaybe<Scalars['Boolean']['input']>;\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type DeleteAssetsInput = {\r\n  assetIds: Array<Scalars['ID']['input']>;\r\n  deleteFromAllChannels?: InputMaybe<Scalars['Boolean']['input']>;\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type DeleteStockLocationInput = {\r\n  id: Scalars['ID']['input'];\r\n  transferToLocationId?: InputMaybe<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type DeletionResponse = {\r\n  __typename?: 'DeletionResponse';\r\n  message?: Maybe<Scalars['String']['output']>;\r\n  result: DeletionResult;\r\n};\r\n\r\nexport enum DeletionResult {\r\n  /** The entity was successfully deleted */\r\n  DELETED = 'DELETED',\r\n  /** Deletion did not take place, reason given in message */\r\n  NOT_DELETED = 'NOT_DELETED'\r\n}\r\n\r\nexport type Discount = {\r\n  __typename?: 'Discount';\r\n  adjustmentSource: Scalars['String']['output'];\r\n  amount: Scalars['Money']['output'];\r\n  amountWithTax: Scalars['Money']['output'];\r\n  description: Scalars['String']['output'];\r\n  type: AdjustmentType;\r\n};\r\n\r\nexport type DuplicateEntityError = ErrorResult & {\r\n  __typename?: 'DuplicateEntityError';\r\n  duplicationError: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type DuplicateEntityInput = {\r\n  duplicatorInput: ConfigurableOperationInput;\r\n  entityId: Scalars['ID']['input'];\r\n  entityName: Scalars['String']['input'];\r\n};\r\n\r\nexport type DuplicateEntityResult = DuplicateEntityError | DuplicateEntitySuccess;\r\n\r\nexport type DuplicateEntitySuccess = {\r\n  __typename?: 'DuplicateEntitySuccess';\r\n  newEntityId: Scalars['ID']['output'];\r\n};\r\n\r\n/** Returned when attempting to create a Customer with an email address already registered to an existing User. */\r\nexport type EmailAddressConflictError = ErrorResult & {\r\n  __typename?: 'EmailAddressConflictError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if no OrderLines have been specified for the operation */\r\nexport type EmptyOrderLineSelectionError = ErrorResult & {\r\n  __typename?: 'EmptyOrderLineSelectionError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type EntityCustomFields = {\r\n  __typename?: 'EntityCustomFields';\r\n  customFields: Array<CustomFieldConfig>;\r\n  entityName: Scalars['String']['output'];\r\n};\r\n\r\nexport type EntityDuplicatorDefinition = {\r\n  __typename?: 'EntityDuplicatorDefinition';\r\n  args: Array<ConfigArgDefinition>;\r\n  code: Scalars['String']['output'];\r\n  description: Scalars['String']['output'];\r\n  forEntities: Array<Scalars['String']['output']>;\r\n  requiresPermission: Array<Permission>;\r\n};\r\n\r\nexport enum ErrorCode {\r\n  ALREADY_REFUNDED_ERROR = 'ALREADY_REFUNDED_ERROR',\r\n  CANCEL_ACTIVE_ORDER_ERROR = 'CANCEL_ACTIVE_ORDER_ERROR',\r\n  CANCEL_PAYMENT_ERROR = 'CANCEL_PAYMENT_ERROR',\r\n  CHANNEL_DEFAULT_LANGUAGE_ERROR = 'CHANNEL_DEFAULT_LANGUAGE_ERROR',\r\n  COUPON_CODE_EXPIRED_ERROR = 'COUPON_CODE_EXPIRED_ERROR',\r\n  COUPON_CODE_INVALID_ERROR = 'COUPON_CODE_INVALID_ERROR',\r\n  COUPON_CODE_LIMIT_ERROR = 'COUPON_CODE_LIMIT_ERROR',\r\n  CREATE_FULFILLMENT_ERROR = 'CREATE_FULFILLMENT_ERROR',\r\n  DUPLICATE_ENTITY_ERROR = 'DUPLICATE_ENTITY_ERROR',\r\n  EMAIL_ADDRESS_CONFLICT_ERROR = 'EMAIL_ADDRESS_CONFLICT_ERROR',\r\n  EMPTY_ORDER_LINE_SELECTION_ERROR = 'EMPTY_ORDER_LINE_SELECTION_ERROR',\r\n  FACET_IN_USE_ERROR = 'FACET_IN_USE_ERROR',\r\n  FULFILLMENT_STATE_TRANSITION_ERROR = 'FULFILLMENT_STATE_TRANSITION_ERROR',\r\n  GUEST_CHECKOUT_ERROR = 'GUEST_CHECKOUT_ERROR',\r\n  INELIGIBLE_SHIPPING_METHOD_ERROR = 'INELIGIBLE_SHIPPING_METHOD_ERROR',\r\n  INSUFFICIENT_STOCK_ERROR = 'INSUFFICIENT_STOCK_ERROR',\r\n  INSUFFICIENT_STOCK_ON_HAND_ERROR = 'INSUFFICIENT_STOCK_ON_HAND_ERROR',\r\n  INVALID_CREDENTIALS_ERROR = 'INVALID_CREDENTIALS_ERROR',\r\n  INVALID_FULFILLMENT_HANDLER_ERROR = 'INVALID_FULFILLMENT_HANDLER_ERROR',\r\n  ITEMS_ALREADY_FULFILLED_ERROR = 'ITEMS_ALREADY_FULFILLED_ERROR',\r\n  LANGUAGE_NOT_AVAILABLE_ERROR = 'LANGUAGE_NOT_AVAILABLE_ERROR',\r\n  MANUAL_PAYMENT_STATE_ERROR = 'MANUAL_PAYMENT_STATE_ERROR',\r\n  MIME_TYPE_ERROR = 'MIME_TYPE_ERROR',\r\n  MISSING_CONDITIONS_ERROR = 'MISSING_CONDITIONS_ERROR',\r\n  MULTIPLE_ORDER_ERROR = 'MULTIPLE_ORDER_ERROR',\r\n  NATIVE_AUTH_STRATEGY_ERROR = 'NATIVE_AUTH_STRATEGY_ERROR',\r\n  NEGATIVE_QUANTITY_ERROR = 'NEGATIVE_QUANTITY_ERROR',\r\n  NOTHING_TO_REFUND_ERROR = 'NOTHING_TO_REFUND_ERROR',\r\n  NO_ACTIVE_ORDER_ERROR = 'NO_ACTIVE_ORDER_ERROR',\r\n  NO_CHANGES_SPECIFIED_ERROR = 'NO_CHANGES_SPECIFIED_ERROR',\r\n  ORDER_LIMIT_ERROR = 'ORDER_LIMIT_ERROR',\r\n  ORDER_MODIFICATION_ERROR = 'ORDER_MODIFICATION_ERROR',\r\n  ORDER_MODIFICATION_STATE_ERROR = 'ORDER_MODIFICATION_STATE_ERROR',\r\n  ORDER_STATE_TRANSITION_ERROR = 'ORDER_STATE_TRANSITION_ERROR',\r\n  PAYMENT_METHOD_MISSING_ERROR = 'PAYMENT_METHOD_MISSING_ERROR',\r\n  PAYMENT_ORDER_MISMATCH_ERROR = 'PAYMENT_ORDER_MISMATCH_ERROR',\r\n  PAYMENT_STATE_TRANSITION_ERROR = 'PAYMENT_STATE_TRANSITION_ERROR',\r\n  PRODUCT_OPTION_IN_USE_ERROR = 'PRODUCT_OPTION_IN_USE_ERROR',\r\n  QUANTITY_TOO_GREAT_ERROR = 'QUANTITY_TOO_GREAT_ERROR',\r\n  REFUND_AMOUNT_ERROR = 'REFUND_AMOUNT_ERROR',\r\n  REFUND_ORDER_STATE_ERROR = 'REFUND_ORDER_STATE_ERROR',\r\n  REFUND_PAYMENT_ID_MISSING_ERROR = 'REFUND_PAYMENT_ID_MISSING_ERROR',\r\n  REFUND_STATE_TRANSITION_ERROR = 'REFUND_STATE_TRANSITION_ERROR',\r\n  SETTLE_PAYMENT_ERROR = 'SETTLE_PAYMENT_ERROR',\r\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n}\r\n\r\nexport type ErrorResult = {\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type Facet = Node & {\r\n  __typename?: 'Facet';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  isPrivate: Scalars['Boolean']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  translations: Array<FacetTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  /** Returns a paginated, sortable, filterable list of the Facet's values. Added in v2.1.0. */\r\n  valueList: FacetValueList;\r\n  values: Array<FacetValue>;\r\n};\r\n\r\n\r\nexport type FacetValueListArgs = {\r\n  options?: InputMaybe<FacetValueListOptions>;\r\n};\r\n\r\nexport type FacetFilterParameter = {\r\n  _and?: InputMaybe<Array<FacetFilterParameter>>;\r\n  _or?: InputMaybe<Array<FacetFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  isPrivate?: InputMaybe<BooleanOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type FacetInUseError = ErrorResult & {\r\n  __typename?: 'FacetInUseError';\r\n  errorCode: ErrorCode;\r\n  facetCode: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  productCount: Scalars['Int']['output'];\r\n  variantCount: Scalars['Int']['output'];\r\n};\r\n\r\nexport type FacetList = PaginatedList & {\r\n  __typename?: 'FacetList';\r\n  items: Array<Facet>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type FacetListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<FacetFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<FacetSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type FacetSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type FacetTranslation = {\r\n  __typename?: 'FacetTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type FacetTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type FacetValue = Node & {\r\n  __typename?: 'FacetValue';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  facet: Facet;\r\n  facetId: Scalars['ID']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  translations: Array<FacetValueTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/**\r\n * Used to construct boolean expressions for filtering search results\r\n * by FacetValue ID. Examples:\r\n *\r\n * * ID=1 OR ID=2: `{ facetValueFilters: [{ or: [1,2] }] }`\r\n * * ID=1 AND ID=2: `{ facetValueFilters: [{ and: 1 }, { and: 2 }] }`\r\n * * ID=1 AND (ID=2 OR ID=3): `{ facetValueFilters: [{ and: 1 }, { or: [2,3] }] }`\r\n */\r\nexport type FacetValueFilterInput = {\r\n  and?: InputMaybe<Scalars['ID']['input']>;\r\n  or?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n};\r\n\r\nexport type FacetValueFilterParameter = {\r\n  _and?: InputMaybe<Array<FacetValueFilterParameter>>;\r\n  _or?: InputMaybe<Array<FacetValueFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  facetId?: InputMaybe<IdOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type FacetValueList = PaginatedList & {\r\n  __typename?: 'FacetValueList';\r\n  items: Array<FacetValue>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type FacetValueListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<FacetValueFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<FacetValueSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\n/**\r\n * Which FacetValues are present in the products returned\r\n * by the search, and in what quantity.\r\n */\r\nexport type FacetValueResult = {\r\n  __typename?: 'FacetValueResult';\r\n  count: Scalars['Int']['output'];\r\n  facetValue: FacetValue;\r\n};\r\n\r\nexport type FacetValueSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  facetId?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type FacetValueTranslation = {\r\n  __typename?: 'FacetValueTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type FacetValueTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type FloatCustomFieldConfig = CustomField & {\r\n  __typename?: 'FloatCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  max?: Maybe<Scalars['Float']['output']>;\r\n  min?: Maybe<Scalars['Float']['output']>;\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  step?: Maybe<Scalars['Float']['output']>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type FulfillOrderInput = {\r\n  handler: ConfigurableOperationInput;\r\n  lines: Array<OrderLineInput>;\r\n};\r\n\r\nexport type Fulfillment = Node & {\r\n  __typename?: 'Fulfillment';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  lines: Array<FulfillmentLine>;\r\n  method: Scalars['String']['output'];\r\n  nextStates: Array<Scalars['String']['output']>;\r\n  state: Scalars['String']['output'];\r\n  /** @deprecated Use the `lines` field instead */\r\n  summary: Array<FulfillmentLine>;\r\n  trackingCode?: Maybe<Scalars['String']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type FulfillmentLine = {\r\n  __typename?: 'FulfillmentLine';\r\n  fulfillment: Fulfillment;\r\n  fulfillmentId: Scalars['ID']['output'];\r\n  orderLine: OrderLine;\r\n  orderLineId: Scalars['ID']['output'];\r\n  quantity: Scalars['Int']['output'];\r\n};\r\n\r\n/** Returned when there is an error in transitioning the Fulfillment state */\r\nexport type FulfillmentStateTransitionError = ErrorResult & {\r\n  __typename?: 'FulfillmentStateTransitionError';\r\n  errorCode: ErrorCode;\r\n  fromState: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  toState: Scalars['String']['output'];\r\n  transitionError: Scalars['String']['output'];\r\n};\r\n\r\nexport enum GlobalFlag {\r\n  FALSE = 'FALSE',\r\n  INHERIT = 'INHERIT',\r\n  TRUE = 'TRUE'\r\n}\r\n\r\nexport type GlobalSettings = {\r\n  __typename?: 'GlobalSettings';\r\n  availableLanguages: Array<LanguageCode>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  outOfStockThreshold: Scalars['Int']['output'];\r\n  serverConfig: ServerConfig;\r\n  trackInventory: Scalars['Boolean']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/** Returned when attempting to set the Customer on a guest checkout when the configured GuestCheckoutStrategy does not allow it. */\r\nexport type GuestCheckoutError = ErrorResult & {\r\n  __typename?: 'GuestCheckoutError';\r\n  errorCode: ErrorCode;\r\n  errorDetail: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type HistoryEntry = Node & {\r\n  __typename?: 'HistoryEntry';\r\n  administrator?: Maybe<Administrator>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  data: Scalars['JSON']['output'];\r\n  id: Scalars['ID']['output'];\r\n  isPublic: Scalars['Boolean']['output'];\r\n  type: HistoryEntryType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type HistoryEntryFilterParameter = {\r\n  _and?: InputMaybe<Array<HistoryEntryFilterParameter>>;\r\n  _or?: InputMaybe<Array<HistoryEntryFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  isPublic?: InputMaybe<BooleanOperators>;\r\n  type?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type HistoryEntryList = PaginatedList & {\r\n  __typename?: 'HistoryEntryList';\r\n  items: Array<HistoryEntry>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type HistoryEntryListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<HistoryEntryFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<HistoryEntrySortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type HistoryEntrySortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport enum HistoryEntryType {\r\n  CUSTOMER_ADDED_TO_GROUP = 'CUSTOMER_ADDED_TO_GROUP',\r\n  CUSTOMER_ADDRESS_CREATED = 'CUSTOMER_ADDRESS_CREATED',\r\n  CUSTOMER_ADDRESS_DELETED = 'CUSTOMER_ADDRESS_DELETED',\r\n  CUSTOMER_ADDRESS_UPDATED = 'CUSTOMER_ADDRESS_UPDATED',\r\n  CUSTOMER_DETAIL_UPDATED = 'CUSTOMER_DETAIL_UPDATED',\r\n  CUSTOMER_EMAIL_UPDATE_REQUESTED = 'CUSTOMER_EMAIL_UPDATE_REQUESTED',\r\n  CUSTOMER_EMAIL_UPDATE_VERIFIED = 'CUSTOMER_EMAIL_UPDATE_VERIFIED',\r\n  CUSTOMER_NOTE = 'CUSTOMER_NOTE',\r\n  CUSTOMER_PASSWORD_RESET_REQUESTED = 'CUSTOMER_PASSWORD_RESET_REQUESTED',\r\n  CUSTOMER_PASSWORD_RESET_VERIFIED = 'CUSTOMER_PASSWORD_RESET_VERIFIED',\r\n  CUSTOMER_PASSWORD_UPDATED = 'CUSTOMER_PASSWORD_UPDATED',\r\n  CUSTOMER_REGISTERED = 'CUSTOMER_REGISTERED',\r\n  CUSTOMER_REMOVED_FROM_GROUP = 'CUSTOMER_REMOVED_FROM_GROUP',\r\n  CUSTOMER_VERIFIED = 'CUSTOMER_VERIFIED',\r\n  ORDER_CANCELLATION = 'ORDER_CANCELLATION',\r\n  ORDER_COUPON_APPLIED = 'ORDER_COUPON_APPLIED',\r\n  ORDER_COUPON_REMOVED = 'ORDER_COUPON_REMOVED',\r\n  ORDER_CUSTOMER_UPDATED = 'ORDER_CUSTOMER_UPDATED',\r\n  ORDER_FULFILLMENT = 'ORDER_FULFILLMENT',\r\n  ORDER_FULFILLMENT_TRANSITION = 'ORDER_FULFILLMENT_TRANSITION',\r\n  ORDER_MODIFIED = 'ORDER_MODIFIED',\r\n  ORDER_NOTE = 'ORDER_NOTE',\r\n  ORDER_PAYMENT_TRANSITION = 'ORDER_PAYMENT_TRANSITION',\r\n  ORDER_REFUND_TRANSITION = 'ORDER_REFUND_TRANSITION',\r\n  ORDER_STATE_TRANSITION = 'ORDER_STATE_TRANSITION'\r\n}\r\n\r\n/** Operators for filtering on a list of ID fields */\r\nexport type IdListOperators = {\r\n  inList: Scalars['ID']['input'];\r\n};\r\n\r\n/** Operators for filtering on an ID field */\r\nexport type IdOperators = {\r\n  eq?: InputMaybe<Scalars['String']['input']>;\r\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\r\n  isNull?: InputMaybe<Scalars['Boolean']['input']>;\r\n  notEq?: InputMaybe<Scalars['String']['input']>;\r\n  notIn?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\nexport type ImportInfo = {\r\n  __typename?: 'ImportInfo';\r\n  errors?: Maybe<Array<Scalars['String']['output']>>;\r\n  imported: Scalars['Int']['output'];\r\n  processed: Scalars['Int']['output'];\r\n};\r\n\r\n/** Returned when attempting to set a ShippingMethod for which the Order is not eligible */\r\nexport type IneligibleShippingMethodError = ErrorResult & {\r\n  __typename?: 'IneligibleShippingMethodError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned when attempting to add more items to the Order than are available */\r\nexport type InsufficientStockError = ErrorResult & {\r\n  __typename?: 'InsufficientStockError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  order: Order;\r\n  quantityAvailable: Scalars['Int']['output'];\r\n};\r\n\r\n/**\r\n * Returned if attempting to create a Fulfillment when there is insufficient\r\n * stockOnHand of a ProductVariant to satisfy the requested quantity.\r\n */\r\nexport type InsufficientStockOnHandError = ErrorResult & {\r\n  __typename?: 'InsufficientStockOnHandError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  productVariantId: Scalars['ID']['output'];\r\n  productVariantName: Scalars['String']['output'];\r\n  stockOnHand: Scalars['Int']['output'];\r\n};\r\n\r\nexport type IntCustomFieldConfig = CustomField & {\r\n  __typename?: 'IntCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  max?: Maybe<Scalars['Int']['output']>;\r\n  min?: Maybe<Scalars['Int']['output']>;\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  step?: Maybe<Scalars['Int']['output']>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\n/** Returned if the user authentication credentials are not valid */\r\nexport type InvalidCredentialsError = ErrorResult & {\r\n  __typename?: 'InvalidCredentialsError';\r\n  authenticationError: Scalars['String']['output'];\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if the specified FulfillmentHandler code is not valid */\r\nexport type InvalidFulfillmentHandlerError = ErrorResult & {\r\n  __typename?: 'InvalidFulfillmentHandlerError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if the specified items are already part of a Fulfillment */\r\nexport type ItemsAlreadyFulfilledError = ErrorResult & {\r\n  __typename?: 'ItemsAlreadyFulfilledError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type Job = Node & {\r\n  __typename?: 'Job';\r\n  attempts: Scalars['Int']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  data?: Maybe<Scalars['JSON']['output']>;\r\n  duration: Scalars['Int']['output'];\r\n  error?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  isSettled: Scalars['Boolean']['output'];\r\n  progress: Scalars['Float']['output'];\r\n  queueName: Scalars['String']['output'];\r\n  result?: Maybe<Scalars['JSON']['output']>;\r\n  retries: Scalars['Int']['output'];\r\n  settledAt?: Maybe<Scalars['DateTime']['output']>;\r\n  startedAt?: Maybe<Scalars['DateTime']['output']>;\r\n  state: JobState;\r\n};\r\n\r\nexport type JobBufferSize = {\r\n  __typename?: 'JobBufferSize';\r\n  bufferId: Scalars['String']['output'];\r\n  size: Scalars['Int']['output'];\r\n};\r\n\r\nexport type JobFilterParameter = {\r\n  _and?: InputMaybe<Array<JobFilterParameter>>;\r\n  _or?: InputMaybe<Array<JobFilterParameter>>;\r\n  attempts?: InputMaybe<NumberOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  duration?: InputMaybe<NumberOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  isSettled?: InputMaybe<BooleanOperators>;\r\n  progress?: InputMaybe<NumberOperators>;\r\n  queueName?: InputMaybe<StringOperators>;\r\n  retries?: InputMaybe<NumberOperators>;\r\n  settledAt?: InputMaybe<DateOperators>;\r\n  startedAt?: InputMaybe<DateOperators>;\r\n  state?: InputMaybe<StringOperators>;\r\n};\r\n\r\nexport type JobList = PaginatedList & {\r\n  __typename?: 'JobList';\r\n  items: Array<Job>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type JobListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<JobFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<JobSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type JobQueue = {\r\n  __typename?: 'JobQueue';\r\n  name: Scalars['String']['output'];\r\n  running: Scalars['Boolean']['output'];\r\n};\r\n\r\nexport type JobSortParameter = {\r\n  attempts?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  duration?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  progress?: InputMaybe<SortOrder>;\r\n  queueName?: InputMaybe<SortOrder>;\r\n  retries?: InputMaybe<SortOrder>;\r\n  settledAt?: InputMaybe<SortOrder>;\r\n  startedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\n/**\r\n * @description\r\n * The state of a Job in the JobQueue\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum JobState {\r\n  CANCELLED = 'CANCELLED',\r\n  COMPLETED = 'COMPLETED',\r\n  FAILED = 'FAILED',\r\n  PENDING = 'PENDING',\r\n  RETRYING = 'RETRYING',\r\n  RUNNING = 'RUNNING'\r\n}\r\n\r\n/**\r\n * @description\r\n * Languages in the form of a ISO 639-1 language code with optional\r\n * region or script modifier (e.g. de_AT). The selection available is based\r\n * on the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\r\n * and includes the major spoken languages of the world and any widely-used variants.\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum LanguageCode {\r\n  /** Afrikaans */\r\n  af = 'af',\r\n  /** Akan */\r\n  ak = 'ak',\r\n  /** Amharic */\r\n  am = 'am',\r\n  /** Arabic */\r\n  ar = 'ar',\r\n  /** Assamese */\r\n  as = 'as',\r\n  /** Azerbaijani */\r\n  az = 'az',\r\n  /** Belarusian */\r\n  be = 'be',\r\n  /** Bulgarian */\r\n  bg = 'bg',\r\n  /** Bambara */\r\n  bm = 'bm',\r\n  /** Bangla */\r\n  bn = 'bn',\r\n  /** Tibetan */\r\n  bo = 'bo',\r\n  /** Breton */\r\n  br = 'br',\r\n  /** Bosnian */\r\n  bs = 'bs',\r\n  /** Catalan */\r\n  ca = 'ca',\r\n  /** Chechen */\r\n  ce = 'ce',\r\n  /** Corsican */\r\n  co = 'co',\r\n  /** Czech */\r\n  cs = 'cs',\r\n  /** Church Slavic */\r\n  cu = 'cu',\r\n  /** Welsh */\r\n  cy = 'cy',\r\n  /** Danish */\r\n  da = 'da',\r\n  /** German */\r\n  de = 'de',\r\n  /** Austrian German */\r\n  de_AT = 'de_AT',\r\n  /** Swiss High German */\r\n  de_CH = 'de_CH',\r\n  /** Dzongkha */\r\n  dz = 'dz',\r\n  /** Ewe */\r\n  ee = 'ee',\r\n  /** Greek */\r\n  el = 'el',\r\n  /** English */\r\n  en = 'en',\r\n  /** Australian English */\r\n  en_AU = 'en_AU',\r\n  /** Canadian English */\r\n  en_CA = 'en_CA',\r\n  /** British English */\r\n  en_GB = 'en_GB',\r\n  /** American English */\r\n  en_US = 'en_US',\r\n  /** Esperanto */\r\n  eo = 'eo',\r\n  /** Spanish */\r\n  es = 'es',\r\n  /** European Spanish */\r\n  es_ES = 'es_ES',\r\n  /** Mexican Spanish */\r\n  es_MX = 'es_MX',\r\n  /** Estonian */\r\n  et = 'et',\r\n  /** Basque */\r\n  eu = 'eu',\r\n  /** Persian */\r\n  fa = 'fa',\r\n  /** Dari */\r\n  fa_AF = 'fa_AF',\r\n  /** Fulah */\r\n  ff = 'ff',\r\n  /** Finnish */\r\n  fi = 'fi',\r\n  /** Faroese */\r\n  fo = 'fo',\r\n  /** French */\r\n  fr = 'fr',\r\n  /** Canadian French */\r\n  fr_CA = 'fr_CA',\r\n  /** Swiss French */\r\n  fr_CH = 'fr_CH',\r\n  /** Western Frisian */\r\n  fy = 'fy',\r\n  /** Irish */\r\n  ga = 'ga',\r\n  /** Scottish Gaelic */\r\n  gd = 'gd',\r\n  /** Galician */\r\n  gl = 'gl',\r\n  /** Gujarati */\r\n  gu = 'gu',\r\n  /** Manx */\r\n  gv = 'gv',\r\n  /** Hausa */\r\n  ha = 'ha',\r\n  /** Hebrew */\r\n  he = 'he',\r\n  /** Hindi */\r\n  hi = 'hi',\r\n  /** Croatian */\r\n  hr = 'hr',\r\n  /** Haitian Creole */\r\n  ht = 'ht',\r\n  /** Hungarian */\r\n  hu = 'hu',\r\n  /** Armenian */\r\n  hy = 'hy',\r\n  /** Interlingua */\r\n  ia = 'ia',\r\n  /** Indonesian */\r\n  id = 'id',\r\n  /** Igbo */\r\n  ig = 'ig',\r\n  /** Sichuan Yi */\r\n  ii = 'ii',\r\n  /** Icelandic */\r\n  is = 'is',\r\n  /** Italian */\r\n  it = 'it',\r\n  /** Japanese */\r\n  ja = 'ja',\r\n  /** Javanese */\r\n  jv = 'jv',\r\n  /** Georgian */\r\n  ka = 'ka',\r\n  /** Kikuyu */\r\n  ki = 'ki',\r\n  /** Kazakh */\r\n  kk = 'kk',\r\n  /** Kalaallisut */\r\n  kl = 'kl',\r\n  /** Khmer */\r\n  km = 'km',\r\n  /** Kannada */\r\n  kn = 'kn',\r\n  /** Korean */\r\n  ko = 'ko',\r\n  /** Kashmiri */\r\n  ks = 'ks',\r\n  /** Kurdish */\r\n  ku = 'ku',\r\n  /** Cornish */\r\n  kw = 'kw',\r\n  /** Kyrgyz */\r\n  ky = 'ky',\r\n  /** Latin */\r\n  la = 'la',\r\n  /** Luxembourgish */\r\n  lb = 'lb',\r\n  /** Ganda */\r\n  lg = 'lg',\r\n  /** Lingala */\r\n  ln = 'ln',\r\n  /** Lao */\r\n  lo = 'lo',\r\n  /** Lithuanian */\r\n  lt = 'lt',\r\n  /** Luba-Katanga */\r\n  lu = 'lu',\r\n  /** Latvian */\r\n  lv = 'lv',\r\n  /** Malagasy */\r\n  mg = 'mg',\r\n  /** Maori */\r\n  mi = 'mi',\r\n  /** Macedonian */\r\n  mk = 'mk',\r\n  /** Malayalam */\r\n  ml = 'ml',\r\n  /** Mongolian */\r\n  mn = 'mn',\r\n  /** Marathi */\r\n  mr = 'mr',\r\n  /** Malay */\r\n  ms = 'ms',\r\n  /** Maltese */\r\n  mt = 'mt',\r\n  /** Burmese */\r\n  my = 'my',\r\n  /** Norwegian Bokmål */\r\n  nb = 'nb',\r\n  /** North Ndebele */\r\n  nd = 'nd',\r\n  /** Nepali */\r\n  ne = 'ne',\r\n  /** Dutch */\r\n  nl = 'nl',\r\n  /** Flemish */\r\n  nl_BE = 'nl_BE',\r\n  /** Norwegian Nynorsk */\r\n  nn = 'nn',\r\n  /** Nyanja */\r\n  ny = 'ny',\r\n  /** Oromo */\r\n  om = 'om',\r\n  /** Odia */\r\n  or = 'or',\r\n  /** Ossetic */\r\n  os = 'os',\r\n  /** Punjabi */\r\n  pa = 'pa',\r\n  /** Polish */\r\n  pl = 'pl',\r\n  /** Pashto */\r\n  ps = 'ps',\r\n  /** Portuguese */\r\n  pt = 'pt',\r\n  /** Brazilian Portuguese */\r\n  pt_BR = 'pt_BR',\r\n  /** European Portuguese */\r\n  pt_PT = 'pt_PT',\r\n  /** Quechua */\r\n  qu = 'qu',\r\n  /** Romansh */\r\n  rm = 'rm',\r\n  /** Rundi */\r\n  rn = 'rn',\r\n  /** Romanian */\r\n  ro = 'ro',\r\n  /** Moldavian */\r\n  ro_MD = 'ro_MD',\r\n  /** Russian */\r\n  ru = 'ru',\r\n  /** Kinyarwanda */\r\n  rw = 'rw',\r\n  /** Sanskrit */\r\n  sa = 'sa',\r\n  /** Sindhi */\r\n  sd = 'sd',\r\n  /** Northern Sami */\r\n  se = 'se',\r\n  /** Sango */\r\n  sg = 'sg',\r\n  /** Sinhala */\r\n  si = 'si',\r\n  /** Slovak */\r\n  sk = 'sk',\r\n  /** Slovenian */\r\n  sl = 'sl',\r\n  /** Samoan */\r\n  sm = 'sm',\r\n  /** Shona */\r\n  sn = 'sn',\r\n  /** Somali */\r\n  so = 'so',\r\n  /** Albanian */\r\n  sq = 'sq',\r\n  /** Serbian */\r\n  sr = 'sr',\r\n  /** Southern Sotho */\r\n  st = 'st',\r\n  /** Sundanese */\r\n  su = 'su',\r\n  /** Swedish */\r\n  sv = 'sv',\r\n  /** Swahili */\r\n  sw = 'sw',\r\n  /** Congo Swahili */\r\n  sw_CD = 'sw_CD',\r\n  /** Tamil */\r\n  ta = 'ta',\r\n  /** Telugu */\r\n  te = 'te',\r\n  /** Tajik */\r\n  tg = 'tg',\r\n  /** Thai */\r\n  th = 'th',\r\n  /** Tigrinya */\r\n  ti = 'ti',\r\n  /** Turkmen */\r\n  tk = 'tk',\r\n  /** Tongan */\r\n  to = 'to',\r\n  /** Turkish */\r\n  tr = 'tr',\r\n  /** Tatar */\r\n  tt = 'tt',\r\n  /** Uyghur */\r\n  ug = 'ug',\r\n  /** Ukrainian */\r\n  uk = 'uk',\r\n  /** Urdu */\r\n  ur = 'ur',\r\n  /** Uzbek */\r\n  uz = 'uz',\r\n  /** Vietnamese */\r\n  vi = 'vi',\r\n  /** Volapük */\r\n  vo = 'vo',\r\n  /** Wolof */\r\n  wo = 'wo',\r\n  /** Xhosa */\r\n  xh = 'xh',\r\n  /** Yiddish */\r\n  yi = 'yi',\r\n  /** Yoruba */\r\n  yo = 'yo',\r\n  /** Chinese */\r\n  zh = 'zh',\r\n  /** Simplified Chinese */\r\n  zh_Hans = 'zh_Hans',\r\n  /** Traditional Chinese */\r\n  zh_Hant = 'zh_Hant',\r\n  /** Zulu */\r\n  zu = 'zu'\r\n}\r\n\r\n/** Returned if attempting to set a Channel's defaultLanguageCode to a language which is not enabled in GlobalSettings */\r\nexport type LanguageNotAvailableError = ErrorResult & {\r\n  __typename?: 'LanguageNotAvailableError';\r\n  errorCode: ErrorCode;\r\n  languageCode: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type LocaleStringCustomFieldConfig = CustomField & {\r\n  __typename?: 'LocaleStringCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  length?: Maybe<Scalars['Int']['output']>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  pattern?: Maybe<Scalars['String']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type LocaleTextCustomFieldConfig = CustomField & {\r\n  __typename?: 'LocaleTextCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type LocalizedString = {\r\n  __typename?: 'LocalizedString';\r\n  languageCode: LanguageCode;\r\n  value: Scalars['String']['output'];\r\n};\r\n\r\nexport enum LogicalOperator {\r\n  AND = 'AND',\r\n  OR = 'OR'\r\n}\r\n\r\nexport type ManualPaymentInput = {\r\n  metadata?: InputMaybe<Scalars['JSON']['input']>;\r\n  method: Scalars['String']['input'];\r\n  orderId: Scalars['ID']['input'];\r\n  transactionId?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/**\r\n * Returned when a call to addManualPaymentToOrder is made but the Order\r\n * is not in the required state.\r\n */\r\nexport type ManualPaymentStateError = ErrorResult & {\r\n  __typename?: 'ManualPaymentStateError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport enum MetricInterval {\r\n  Daily = 'Daily'\r\n}\r\n\r\nexport type MetricSummary = {\r\n  __typename?: 'MetricSummary';\r\n  entries: Array<MetricSummaryEntry>;\r\n  interval: MetricInterval;\r\n  title: Scalars['String']['output'];\r\n  type: MetricType;\r\n};\r\n\r\nexport type MetricSummaryEntry = {\r\n  __typename?: 'MetricSummaryEntry';\r\n  label: Scalars['String']['output'];\r\n  value: Scalars['Float']['output'];\r\n};\r\n\r\nexport type MetricSummaryInput = {\r\n  interval: MetricInterval;\r\n  refresh?: InputMaybe<Scalars['Boolean']['input']>;\r\n  types: Array<MetricType>;\r\n};\r\n\r\nexport enum MetricType {\r\n  AverageOrderValue = 'AverageOrderValue',\r\n  OrderCount = 'OrderCount',\r\n  OrderTotal = 'OrderTotal'\r\n}\r\n\r\nexport type MimeTypeError = ErrorResult & {\r\n  __typename?: 'MimeTypeError';\r\n  errorCode: ErrorCode;\r\n  fileName: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  mimeType: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned if a PromotionCondition has neither a couponCode nor any conditions set */\r\nexport type MissingConditionsError = ErrorResult & {\r\n  __typename?: 'MissingConditionsError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type ModifyOrderInput = {\r\n  addItems?: InputMaybe<Array<AddItemInput>>;\r\n  adjustOrderLines?: InputMaybe<Array<OrderLineInput>>;\r\n  couponCodes?: InputMaybe<Array<Scalars['String']['input']>>;\r\n  dryRun: Scalars['Boolean']['input'];\r\n  note?: InputMaybe<Scalars['String']['input']>;\r\n  options?: InputMaybe<ModifyOrderOptions>;\r\n  orderId: Scalars['ID']['input'];\r\n  /**\r\n   * Deprecated in v2.2.0. Use `refunds` instead to allow multiple refunds to be\r\n   * applied in the case that multiple payment methods have been used on the order.\r\n   */\r\n  refund?: InputMaybe<AdministratorRefundInput>;\r\n  refunds?: InputMaybe<Array<AdministratorRefundInput>>;\r\n  /** Added in v2.2 */\r\n  shippingMethodIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  surcharges?: InputMaybe<Array<SurchargeInput>>;\r\n  updateBillingAddress?: InputMaybe<UpdateOrderAddressInput>;\r\n  updateShippingAddress?: InputMaybe<UpdateOrderAddressInput>;\r\n};\r\n\r\nexport type ModifyOrderOptions = {\r\n  freezePromotions?: InputMaybe<Scalars['Boolean']['input']>;\r\n  recalculateShipping?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type ModifyOrderResult = CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError | IneligibleShippingMethodError | InsufficientStockError | NegativeQuantityError | NoChangesSpecifiedError | Order | OrderLimitError | OrderModificationStateError | PaymentMethodMissingError | RefundPaymentIdMissingError;\r\n\r\nexport type MoveCollectionInput = {\r\n  collectionId: Scalars['ID']['input'];\r\n  index: Scalars['Int']['input'];\r\n  parentId: Scalars['ID']['input'];\r\n};\r\n\r\n/** Returned if an operation has specified OrderLines from multiple Orders */\r\nexport type MultipleOrderError = ErrorResult & {\r\n  __typename?: 'MultipleOrderError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  /** Add Customers to a CustomerGroup */\r\n  addCustomersToGroup: CustomerGroup;\r\n  addFulfillmentToOrder: AddFulfillmentToOrderResult;\r\n  /** Adds an item to the draft Order. */\r\n  addItemToDraftOrder: UpdateOrderItemsResult;\r\n  /**\r\n   * Used to manually create a new Payment against an Order.\r\n   * This can be used by an Administrator when an Order is in the ArrangingPayment state.\r\n   *\r\n   * It is also used when a completed Order\r\n   * has been modified (using `modifyOrder`) and the price has increased. The extra payment\r\n   * can then be manually arranged by the administrator, and the details used to create a new\r\n   * Payment.\r\n   */\r\n  addManualPaymentToOrder: AddManualPaymentToOrderResult;\r\n  /** Add members to a Zone */\r\n  addMembersToZone: Zone;\r\n  addNoteToCustomer: Customer;\r\n  addNoteToOrder: Order;\r\n  /** Add an OptionGroup to a Product */\r\n  addOptionGroupToProduct: Product;\r\n  /** Adjusts a draft OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' of type `OrderLineCustomFieldsInput` will be available. */\r\n  adjustDraftOrderLine: UpdateOrderItemsResult;\r\n  /** Applies the given coupon code to the draft Order */\r\n  applyCouponCodeToDraftOrder: ApplyCouponCodeResult;\r\n  /** Assign assets to channel */\r\n  assignAssetsToChannel: Array<Asset>;\r\n  /** Assigns Collections to the specified Channel */\r\n  assignCollectionsToChannel: Array<Collection>;\r\n  /** Assigns Facets to the specified Channel */\r\n  assignFacetsToChannel: Array<Facet>;\r\n  /** Assigns PaymentMethods to the specified Channel */\r\n  assignPaymentMethodsToChannel: Array<PaymentMethod>;\r\n  /** Assigns ProductVariants to the specified Channel */\r\n  assignProductVariantsToChannel: Array<ProductVariant>;\r\n  /** Assigns all ProductVariants of Product to the specified Channel */\r\n  assignProductsToChannel: Array<Product>;\r\n  /** Assigns Promotions to the specified Channel */\r\n  assignPromotionsToChannel: Array<Promotion>;\r\n  /** Assign a Role to an Administrator */\r\n  assignRoleToAdministrator: Administrator;\r\n  /** Assigns ShippingMethods to the specified Channel */\r\n  assignShippingMethodsToChannel: Array<ShippingMethod>;\r\n  /** Assigns StockLocations to the specified Channel */\r\n  assignStockLocationsToChannel: Array<StockLocation>;\r\n  /** Authenticates the user using a named authentication strategy */\r\n  authenticate: AuthenticationResult;\r\n  cancelJob: Job;\r\n  cancelOrder: CancelOrderResult;\r\n  cancelPayment: CancelPaymentResult;\r\n  /** Create a new Administrator */\r\n  createAdministrator: Administrator;\r\n  /** Create a new Asset */\r\n  createAssets: Array<CreateAssetResult>;\r\n  /** Create a new Channel */\r\n  createChannel: CreateChannelResult;\r\n  /** Create a new Collection */\r\n  createCollection: Collection;\r\n  /** Create a new Country */\r\n  createCountry: Country;\r\n  /** Create a new Customer. If a password is provided, a new User will also be created an linked to the Customer. */\r\n  createCustomer: CreateCustomerResult;\r\n  /** Create a new Address and associate it with the Customer specified by customerId */\r\n  createCustomerAddress: Address;\r\n  /** Create a new CustomerGroup */\r\n  createCustomerGroup: CustomerGroup;\r\n  /** Creates a draft Order */\r\n  createDraftOrder: Order;\r\n  /** Create a new Facet */\r\n  createFacet: Facet;\r\n  /** Create one or more FacetValues */\r\n  createFacetValues: Array<FacetValue>;\r\n  /** Create existing PaymentMethod */\r\n  createPaymentMethod: PaymentMethod;\r\n  /** Create a new Product */\r\n  createProduct: Product;\r\n  /** Create a new ProductOption within a ProductOptionGroup */\r\n  createProductOption: ProductOption;\r\n  /** Create a new ProductOptionGroup */\r\n  createProductOptionGroup: ProductOptionGroup;\r\n  /** Create a set of ProductVariants based on the OptionGroups assigned to the given Product */\r\n  createProductVariants: Array<Maybe<ProductVariant>>;\r\n  createPromotion: CreatePromotionResult;\r\n  /** Create a new Province */\r\n  createProvince: Province;\r\n  /** Create a new Role */\r\n  createRole: Role;\r\n  /** Create a new Seller */\r\n  createSeller: Seller;\r\n  /** Create a new ShippingMethod */\r\n  createShippingMethod: ShippingMethod;\r\n  createStockLocation: StockLocation;\r\n  /** Create a new Tag */\r\n  createTag: Tag;\r\n  /** Create a new TaxCategory */\r\n  createTaxCategory: TaxCategory;\r\n  /** Create a new TaxRate */\r\n  createTaxRate: TaxRate;\r\n  /** Create a new Zone */\r\n  createZone: Zone;\r\n  /** Delete an Administrator */\r\n  deleteAdministrator: DeletionResponse;\r\n  /** Delete multiple Administrators */\r\n  deleteAdministrators: Array<DeletionResponse>;\r\n  /** Delete an Asset */\r\n  deleteAsset: DeletionResponse;\r\n  /** Delete multiple Assets */\r\n  deleteAssets: DeletionResponse;\r\n  /** Delete a Channel */\r\n  deleteChannel: DeletionResponse;\r\n  /** Delete multiple Channels */\r\n  deleteChannels: Array<DeletionResponse>;\r\n  /** Delete a Collection and all of its descendants */\r\n  deleteCollection: DeletionResponse;\r\n  /** Delete multiple Collections and all of their descendants */\r\n  deleteCollections: Array<DeletionResponse>;\r\n  /** Delete multiple Countries */\r\n  deleteCountries: Array<DeletionResponse>;\r\n  /** Delete a Country */\r\n  deleteCountry: DeletionResponse;\r\n  /** Delete a Customer */\r\n  deleteCustomer: DeletionResponse;\r\n  /** Update an existing Address */\r\n  deleteCustomerAddress: Success;\r\n  /** Delete a CustomerGroup */\r\n  deleteCustomerGroup: DeletionResponse;\r\n  /** Delete multiple CustomerGroups */\r\n  deleteCustomerGroups: Array<DeletionResponse>;\r\n  deleteCustomerNote: DeletionResponse;\r\n  /** Deletes Customers */\r\n  deleteCustomers: Array<DeletionResponse>;\r\n  /** Deletes a draft Order */\r\n  deleteDraftOrder: DeletionResponse;\r\n  /** Delete an existing Facet */\r\n  deleteFacet: DeletionResponse;\r\n  /** Delete one or more FacetValues */\r\n  deleteFacetValues: Array<DeletionResponse>;\r\n  /** Delete multiple existing Facets */\r\n  deleteFacets: Array<DeletionResponse>;\r\n  deleteOrderNote: DeletionResponse;\r\n  /** Delete a PaymentMethod */\r\n  deletePaymentMethod: DeletionResponse;\r\n  /** Delete multiple PaymentMethods */\r\n  deletePaymentMethods: Array<DeletionResponse>;\r\n  /** Delete a Product */\r\n  deleteProduct: DeletionResponse;\r\n  /** Delete a ProductOption */\r\n  deleteProductOption: DeletionResponse;\r\n  /** Delete a ProductVariant */\r\n  deleteProductVariant: DeletionResponse;\r\n  /** Delete multiple ProductVariants */\r\n  deleteProductVariants: Array<DeletionResponse>;\r\n  /** Delete multiple Products */\r\n  deleteProducts: Array<DeletionResponse>;\r\n  deletePromotion: DeletionResponse;\r\n  deletePromotions: Array<DeletionResponse>;\r\n  /** Delete a Province */\r\n  deleteProvince: DeletionResponse;\r\n  /** Delete an existing Role */\r\n  deleteRole: DeletionResponse;\r\n  /** Delete multiple Roles */\r\n  deleteRoles: Array<DeletionResponse>;\r\n  /** Delete a Seller */\r\n  deleteSeller: DeletionResponse;\r\n  /** Delete multiple Sellers */\r\n  deleteSellers: Array<DeletionResponse>;\r\n  /** Delete a ShippingMethod */\r\n  deleteShippingMethod: DeletionResponse;\r\n  /** Delete multiple ShippingMethods */\r\n  deleteShippingMethods: Array<DeletionResponse>;\r\n  deleteStockLocation: DeletionResponse;\r\n  deleteStockLocations: Array<DeletionResponse>;\r\n  /** Delete an existing Tag */\r\n  deleteTag: DeletionResponse;\r\n  /** Deletes multiple TaxCategories */\r\n  deleteTaxCategories: Array<DeletionResponse>;\r\n  /** Deletes a TaxCategory */\r\n  deleteTaxCategory: DeletionResponse;\r\n  /** Delete a TaxRate */\r\n  deleteTaxRate: DeletionResponse;\r\n  /** Delete multiple TaxRates */\r\n  deleteTaxRates: Array<DeletionResponse>;\r\n  /** Delete a Zone */\r\n  deleteZone: DeletionResponse;\r\n  /** Delete a Zone */\r\n  deleteZones: Array<DeletionResponse>;\r\n  /**\r\n   * Duplicate an existing entity using a specific EntityDuplicator.\r\n   * Since v2.2.0.\r\n   */\r\n  duplicateEntity: DuplicateEntityResult;\r\n  flushBufferedJobs: Success;\r\n  importProducts?: Maybe<ImportInfo>;\r\n  /**\r\n   * Authenticates the user using the native authentication strategy. This mutation is an alias for authenticate({ native: { ... }})\r\n   *\r\n   * The `rememberMe` option applies when using cookie-based sessions, and if `true` it will set the maxAge of the session cookie\r\n   * to 1 year.\r\n   */\r\n  login: NativeAuthenticationResult;\r\n  logout: Success;\r\n  /**\r\n   * Allows an Order to be modified after it has been completed by the Customer. The Order must first\r\n   * be in the `Modifying` state.\r\n   */\r\n  modifyOrder: ModifyOrderResult;\r\n  /** Move a Collection to a different parent or index */\r\n  moveCollection: Collection;\r\n  refundOrder: RefundOrderResult;\r\n  reindex: Job;\r\n  /** Removes Collections from the specified Channel */\r\n  removeCollectionsFromChannel: Array<Collection>;\r\n  /** Removes the given coupon code from the draft Order */\r\n  removeCouponCodeFromDraftOrder?: Maybe<Order>;\r\n  /** Remove Customers from a CustomerGroup */\r\n  removeCustomersFromGroup: CustomerGroup;\r\n  /** Remove an OrderLine from the draft Order */\r\n  removeDraftOrderLine: RemoveOrderItemsResult;\r\n  /** Removes Facets from the specified Channel */\r\n  removeFacetsFromChannel: Array<RemoveFacetFromChannelResult>;\r\n  /** Remove members from a Zone */\r\n  removeMembersFromZone: Zone;\r\n  /**\r\n   * Remove an OptionGroup from a Product. If the OptionGroup is in use by any ProductVariants\r\n   * the mutation will return a ProductOptionInUseError, and the OptionGroup will not be removed.\r\n   * Setting the `force` argument to `true` will override this and remove the OptionGroup anyway,\r\n   * as well as removing any of the group's options from the Product's ProductVariants.\r\n   */\r\n  removeOptionGroupFromProduct: RemoveOptionGroupFromProductResult;\r\n  /** Removes PaymentMethods from the specified Channel */\r\n  removePaymentMethodsFromChannel: Array<PaymentMethod>;\r\n  /** Removes ProductVariants from the specified Channel */\r\n  removeProductVariantsFromChannel: Array<ProductVariant>;\r\n  /** Removes all ProductVariants of Product from the specified Channel */\r\n  removeProductsFromChannel: Array<Product>;\r\n  /** Removes Promotions from the specified Channel */\r\n  removePromotionsFromChannel: Array<Promotion>;\r\n  /** Remove all settled jobs in the given queues older than the given date. Returns the number of jobs deleted. */\r\n  removeSettledJobs: Scalars['Int']['output'];\r\n  /** Removes ShippingMethods from the specified Channel */\r\n  removeShippingMethodsFromChannel: Array<ShippingMethod>;\r\n  /** Removes StockLocations from the specified Channel */\r\n  removeStockLocationsFromChannel: Array<StockLocation>;\r\n  runPendingSearchIndexUpdates: Success;\r\n  setCustomerForDraftOrder: SetCustomerForDraftOrderResult;\r\n  /** Sets the billing address for a draft Order */\r\n  setDraftOrderBillingAddress: Order;\r\n  /** Allows any custom fields to be set for the active order */\r\n  setDraftOrderCustomFields: Order;\r\n  /** Sets the shipping address for a draft Order */\r\n  setDraftOrderShippingAddress: Order;\r\n  /** Sets the shipping method by id, which can be obtained with the `eligibleShippingMethodsForDraftOrder` query */\r\n  setDraftOrderShippingMethod: SetOrderShippingMethodResult;\r\n  setOrderCustomFields?: Maybe<Order>;\r\n  /** Allows a different Customer to be assigned to an Order. Added in v2.2.0. */\r\n  setOrderCustomer?: Maybe<Order>;\r\n  settlePayment: SettlePaymentResult;\r\n  settleRefund: SettleRefundResult;\r\n  transitionFulfillmentToState: TransitionFulfillmentToStateResult;\r\n  transitionOrderToState?: Maybe<TransitionOrderToStateResult>;\r\n  transitionPaymentToState: TransitionPaymentToStateResult;\r\n  /** Update the active (currently logged-in) Administrator */\r\n  updateActiveAdministrator: Administrator;\r\n  /** Update an existing Administrator */\r\n  updateAdministrator: Administrator;\r\n  /** Update an existing Asset */\r\n  updateAsset: Asset;\r\n  /** Update an existing Channel */\r\n  updateChannel: UpdateChannelResult;\r\n  /** Update an existing Collection */\r\n  updateCollection: Collection;\r\n  /** Update an existing Country */\r\n  updateCountry: Country;\r\n  /** Update an existing Customer */\r\n  updateCustomer: UpdateCustomerResult;\r\n  /** Update an existing Address */\r\n  updateCustomerAddress: Address;\r\n  /** Update an existing CustomerGroup */\r\n  updateCustomerGroup: CustomerGroup;\r\n  updateCustomerNote: HistoryEntry;\r\n  /** Update an existing Facet */\r\n  updateFacet: Facet;\r\n  /** Update one or more FacetValues */\r\n  updateFacetValues: Array<FacetValue>;\r\n  updateGlobalSettings: UpdateGlobalSettingsResult;\r\n  updateOrderNote: HistoryEntry;\r\n  /** Update an existing PaymentMethod */\r\n  updatePaymentMethod: PaymentMethod;\r\n  /** Update an existing Product */\r\n  updateProduct: Product;\r\n  /** Create a new ProductOption within a ProductOptionGroup */\r\n  updateProductOption: ProductOption;\r\n  /** Update an existing ProductOptionGroup */\r\n  updateProductOptionGroup: ProductOptionGroup;\r\n  /** Update existing ProductVariants */\r\n  updateProductVariants: Array<Maybe<ProductVariant>>;\r\n  /** Update multiple existing Products */\r\n  updateProducts: Array<Product>;\r\n  updatePromotion: UpdatePromotionResult;\r\n  /** Update an existing Province */\r\n  updateProvince: Province;\r\n  /** Update an existing Role */\r\n  updateRole: Role;\r\n  /** Update an existing Seller */\r\n  updateSeller: Seller;\r\n  /** Update an existing ShippingMethod */\r\n  updateShippingMethod: ShippingMethod;\r\n  updateStockLocation: StockLocation;\r\n  /** Update an existing Tag */\r\n  updateTag: Tag;\r\n  /** Update an existing TaxCategory */\r\n  updateTaxCategory: TaxCategory;\r\n  /** Update an existing TaxRate */\r\n  updateTaxRate: TaxRate;\r\n  /** Update an existing Zone */\r\n  updateZone: Zone;\r\n};\r\n\r\n\r\nexport type MutationAddCustomersToGroupArgs = {\r\n  customerGroupId: Scalars['ID']['input'];\r\n  customerIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationAddFulfillmentToOrderArgs = {\r\n  input: FulfillOrderInput;\r\n};\r\n\r\n\r\nexport type MutationAddItemToDraftOrderArgs = {\r\n  input: AddItemToDraftOrderInput;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationAddManualPaymentToOrderArgs = {\r\n  input: ManualPaymentInput;\r\n};\r\n\r\n\r\nexport type MutationAddMembersToZoneArgs = {\r\n  memberIds: Array<Scalars['ID']['input']>;\r\n  zoneId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationAddNoteToCustomerArgs = {\r\n  input: AddNoteToCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationAddNoteToOrderArgs = {\r\n  input: AddNoteToOrderInput;\r\n};\r\n\r\n\r\nexport type MutationAddOptionGroupToProductArgs = {\r\n  optionGroupId: Scalars['ID']['input'];\r\n  productId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationAdjustDraftOrderLineArgs = {\r\n  input: AdjustDraftOrderLineInput;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationApplyCouponCodeToDraftOrderArgs = {\r\n  couponCode: Scalars['String']['input'];\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationAssignAssetsToChannelArgs = {\r\n  input: AssignAssetsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignCollectionsToChannelArgs = {\r\n  input: AssignCollectionsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignFacetsToChannelArgs = {\r\n  input: AssignFacetsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignPaymentMethodsToChannelArgs = {\r\n  input: AssignPaymentMethodsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignProductVariantsToChannelArgs = {\r\n  input: AssignProductVariantsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignProductsToChannelArgs = {\r\n  input: AssignProductsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignPromotionsToChannelArgs = {\r\n  input: AssignPromotionsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignRoleToAdministratorArgs = {\r\n  administratorId: Scalars['ID']['input'];\r\n  roleId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationAssignShippingMethodsToChannelArgs = {\r\n  input: AssignShippingMethodsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAssignStockLocationsToChannelArgs = {\r\n  input: AssignStockLocationsToChannelInput;\r\n};\r\n\r\n\r\nexport type MutationAuthenticateArgs = {\r\n  input: AuthenticationInput;\r\n  rememberMe?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\n\r\nexport type MutationCancelJobArgs = {\r\n  jobId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationCancelOrderArgs = {\r\n  input: CancelOrderInput;\r\n};\r\n\r\n\r\nexport type MutationCancelPaymentArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationCreateAdministratorArgs = {\r\n  input: CreateAdministratorInput;\r\n};\r\n\r\n\r\nexport type MutationCreateAssetsArgs = {\r\n  input: Array<CreateAssetInput>;\r\n};\r\n\r\n\r\nexport type MutationCreateChannelArgs = {\r\n  input: CreateChannelInput;\r\n};\r\n\r\n\r\nexport type MutationCreateCollectionArgs = {\r\n  input: CreateCollectionInput;\r\n};\r\n\r\n\r\nexport type MutationCreateCountryArgs = {\r\n  input: CreateCountryInput;\r\n};\r\n\r\n\r\nexport type MutationCreateCustomerArgs = {\r\n  input: CreateCustomerInput;\r\n  password?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n\r\nexport type MutationCreateCustomerAddressArgs = {\r\n  customerId: Scalars['ID']['input'];\r\n  input: CreateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationCreateCustomerGroupArgs = {\r\n  input: CreateCustomerGroupInput;\r\n};\r\n\r\n\r\nexport type MutationCreateFacetArgs = {\r\n  input: CreateFacetInput;\r\n};\r\n\r\n\r\nexport type MutationCreateFacetValuesArgs = {\r\n  input: Array<CreateFacetValueInput>;\r\n};\r\n\r\n\r\nexport type MutationCreatePaymentMethodArgs = {\r\n  input: CreatePaymentMethodInput;\r\n};\r\n\r\n\r\nexport type MutationCreateProductArgs = {\r\n  input: CreateProductInput;\r\n};\r\n\r\n\r\nexport type MutationCreateProductOptionArgs = {\r\n  input: CreateProductOptionInput;\r\n};\r\n\r\n\r\nexport type MutationCreateProductOptionGroupArgs = {\r\n  input: CreateProductOptionGroupInput;\r\n};\r\n\r\n\r\nexport type MutationCreateProductVariantsArgs = {\r\n  input: Array<CreateProductVariantInput>;\r\n};\r\n\r\n\r\nexport type MutationCreatePromotionArgs = {\r\n  input: CreatePromotionInput;\r\n};\r\n\r\n\r\nexport type MutationCreateProvinceArgs = {\r\n  input: CreateProvinceInput;\r\n};\r\n\r\n\r\nexport type MutationCreateRoleArgs = {\r\n  input: CreateRoleInput;\r\n};\r\n\r\n\r\nexport type MutationCreateSellerArgs = {\r\n  input: CreateSellerInput;\r\n};\r\n\r\n\r\nexport type MutationCreateShippingMethodArgs = {\r\n  input: CreateShippingMethodInput;\r\n};\r\n\r\n\r\nexport type MutationCreateStockLocationArgs = {\r\n  input: CreateStockLocationInput;\r\n};\r\n\r\n\r\nexport type MutationCreateTagArgs = {\r\n  input: CreateTagInput;\r\n};\r\n\r\n\r\nexport type MutationCreateTaxCategoryArgs = {\r\n  input: CreateTaxCategoryInput;\r\n};\r\n\r\n\r\nexport type MutationCreateTaxRateArgs = {\r\n  input: CreateTaxRateInput;\r\n};\r\n\r\n\r\nexport type MutationCreateZoneArgs = {\r\n  input: CreateZoneInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteAdministratorArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteAdministratorsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteAssetArgs = {\r\n  input: DeleteAssetInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteAssetsArgs = {\r\n  input: DeleteAssetsInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteChannelArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteChannelsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteCollectionArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCollectionsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteCountriesArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteCountryArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerAddressArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerGroupArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerGroupsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerNoteArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomersArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteDraftOrderArgs = {\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteFacetArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteFacetValuesArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteFacetsArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteOrderNoteArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeletePaymentMethodArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeletePaymentMethodsArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteProductArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteProductOptionArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteProductVariantArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteProductVariantsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteProductsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeletePromotionArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeletePromotionsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteProvinceArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteRoleArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteRolesArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteSellerArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteSellersArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteShippingMethodArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteShippingMethodsArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteStockLocationArgs = {\r\n  input: DeleteStockLocationInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteStockLocationsArgs = {\r\n  input: Array<DeleteStockLocationInput>;\r\n};\r\n\r\n\r\nexport type MutationDeleteTagArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteTaxCategoriesArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteTaxCategoryArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteTaxRateArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteTaxRatesArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDeleteZoneArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationDeleteZonesArgs = {\r\n  ids: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationDuplicateEntityArgs = {\r\n  input: DuplicateEntityInput;\r\n};\r\n\r\n\r\nexport type MutationFlushBufferedJobsArgs = {\r\n  bufferIds?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\n\r\nexport type MutationImportProductsArgs = {\r\n  csvFile: Scalars['Upload']['input'];\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  password: Scalars['String']['input'];\r\n  rememberMe?: InputMaybe<Scalars['Boolean']['input']>;\r\n  username: Scalars['String']['input'];\r\n};\r\n\r\n\r\nexport type MutationModifyOrderArgs = {\r\n  input: ModifyOrderInput;\r\n};\r\n\r\n\r\nexport type MutationMoveCollectionArgs = {\r\n  input: MoveCollectionInput;\r\n};\r\n\r\n\r\nexport type MutationRefundOrderArgs = {\r\n  input: RefundOrderInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveCollectionsFromChannelArgs = {\r\n  input: RemoveCollectionsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveCouponCodeFromDraftOrderArgs = {\r\n  couponCode: Scalars['String']['input'];\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationRemoveCustomersFromGroupArgs = {\r\n  customerGroupId: Scalars['ID']['input'];\r\n  customerIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type MutationRemoveDraftOrderLineArgs = {\r\n  orderId: Scalars['ID']['input'];\r\n  orderLineId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationRemoveFacetsFromChannelArgs = {\r\n  input: RemoveFacetsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveMembersFromZoneArgs = {\r\n  memberIds: Array<Scalars['ID']['input']>;\r\n  zoneId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationRemoveOptionGroupFromProductArgs = {\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n  optionGroupId: Scalars['ID']['input'];\r\n  productId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationRemovePaymentMethodsFromChannelArgs = {\r\n  input: RemovePaymentMethodsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveProductVariantsFromChannelArgs = {\r\n  input: RemoveProductVariantsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveProductsFromChannelArgs = {\r\n  input: RemoveProductsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemovePromotionsFromChannelArgs = {\r\n  input: RemovePromotionsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveSettledJobsArgs = {\r\n  olderThan?: InputMaybe<Scalars['DateTime']['input']>;\r\n  queueNames?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\n\r\nexport type MutationRemoveShippingMethodsFromChannelArgs = {\r\n  input: RemoveShippingMethodsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationRemoveStockLocationsFromChannelArgs = {\r\n  input: RemoveStockLocationsFromChannelInput;\r\n};\r\n\r\n\r\nexport type MutationSetCustomerForDraftOrderArgs = {\r\n  customerId?: InputMaybe<Scalars['ID']['input']>;\r\n  input?: InputMaybe<CreateCustomerInput>;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSetDraftOrderBillingAddressArgs = {\r\n  input: CreateAddressInput;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSetDraftOrderCustomFieldsArgs = {\r\n  input: UpdateOrderInput;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSetDraftOrderShippingAddressArgs = {\r\n  input: CreateAddressInput;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSetDraftOrderShippingMethodArgs = {\r\n  orderId: Scalars['ID']['input'];\r\n  shippingMethodId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSetOrderCustomFieldsArgs = {\r\n  input: UpdateOrderInput;\r\n};\r\n\r\n\r\nexport type MutationSetOrderCustomerArgs = {\r\n  input: SetOrderCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationSettlePaymentArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type MutationSettleRefundArgs = {\r\n  input: SettleRefundInput;\r\n};\r\n\r\n\r\nexport type MutationTransitionFulfillmentToStateArgs = {\r\n  id: Scalars['ID']['input'];\r\n  state: Scalars['String']['input'];\r\n};\r\n\r\n\r\nexport type MutationTransitionOrderToStateArgs = {\r\n  id: Scalars['ID']['input'];\r\n  state: Scalars['String']['input'];\r\n};\r\n\r\n\r\nexport type MutationTransitionPaymentToStateArgs = {\r\n  id: Scalars['ID']['input'];\r\n  state: Scalars['String']['input'];\r\n};\r\n\r\n\r\nexport type MutationUpdateActiveAdministratorArgs = {\r\n  input: UpdateActiveAdministratorInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateAdministratorArgs = {\r\n  input: UpdateAdministratorInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateAssetArgs = {\r\n  input: UpdateAssetInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateChannelArgs = {\r\n  input: UpdateChannelInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCollectionArgs = {\r\n  input: UpdateCollectionInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCountryArgs = {\r\n  input: UpdateCountryInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerArgs = {\r\n  input: UpdateCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerAddressArgs = {\r\n  input: UpdateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerGroupArgs = {\r\n  input: UpdateCustomerGroupInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerNoteArgs = {\r\n  input: UpdateCustomerNoteInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateFacetArgs = {\r\n  input: UpdateFacetInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateFacetValuesArgs = {\r\n  input: Array<UpdateFacetValueInput>;\r\n};\r\n\r\n\r\nexport type MutationUpdateGlobalSettingsArgs = {\r\n  input: UpdateGlobalSettingsInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateOrderNoteArgs = {\r\n  input: UpdateOrderNoteInput;\r\n};\r\n\r\n\r\nexport type MutationUpdatePaymentMethodArgs = {\r\n  input: UpdatePaymentMethodInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateProductArgs = {\r\n  input: UpdateProductInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateProductOptionArgs = {\r\n  input: UpdateProductOptionInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateProductOptionGroupArgs = {\r\n  input: UpdateProductOptionGroupInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateProductVariantsArgs = {\r\n  input: Array<UpdateProductVariantInput>;\r\n};\r\n\r\n\r\nexport type MutationUpdateProductsArgs = {\r\n  input: Array<UpdateProductInput>;\r\n};\r\n\r\n\r\nexport type MutationUpdatePromotionArgs = {\r\n  input: UpdatePromotionInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateProvinceArgs = {\r\n  input: UpdateProvinceInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateRoleArgs = {\r\n  input: UpdateRoleInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateSellerArgs = {\r\n  input: UpdateSellerInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateShippingMethodArgs = {\r\n  input: UpdateShippingMethodInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateStockLocationArgs = {\r\n  input: UpdateStockLocationInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateTagArgs = {\r\n  input: UpdateTagInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateTaxCategoryArgs = {\r\n  input: UpdateTaxCategoryInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateTaxRateArgs = {\r\n  input: UpdateTaxRateInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateZoneArgs = {\r\n  input: UpdateZoneInput;\r\n};\r\n\r\nexport type NativeAuthInput = {\r\n  password: Scalars['String']['input'];\r\n  username: Scalars['String']['input'];\r\n};\r\n\r\n/** Returned when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured. */\r\nexport type NativeAuthStrategyError = ErrorResult & {\r\n  __typename?: 'NativeAuthStrategyError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type NativeAuthenticationResult = CurrentUser | InvalidCredentialsError | NativeAuthStrategyError;\r\n\r\n/** Returned when attempting to set a negative OrderLine quantity. */\r\nexport type NegativeQuantityError = ErrorResult & {\r\n  __typename?: 'NegativeQuantityError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/**\r\n * Returned when invoking a mutation which depends on there being an active Order on the\r\n * current session.\r\n */\r\nexport type NoActiveOrderError = ErrorResult & {\r\n  __typename?: 'NoActiveOrderError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned when a call to modifyOrder fails to specify any changes */\r\nexport type NoChangesSpecifiedError = ErrorResult & {\r\n  __typename?: 'NoChangesSpecifiedError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type Node = {\r\n  id: Scalars['ID']['output'];\r\n};\r\n\r\n/** Returned if an attempting to refund an Order but neither items nor shipping refund was specified */\r\nexport type NothingToRefundError = ErrorResult & {\r\n  __typename?: 'NothingToRefundError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Operators for filtering on a list of Number fields */\r\nexport type NumberListOperators = {\r\n  inList: Scalars['Float']['input'];\r\n};\r\n\r\n/** Operators for filtering on a Int or Float field */\r\nexport type NumberOperators = {\r\n  between?: InputMaybe<NumberRange>;\r\n  eq?: InputMaybe<Scalars['Float']['input']>;\r\n  gt?: InputMaybe<Scalars['Float']['input']>;\r\n  gte?: InputMaybe<Scalars['Float']['input']>;\r\n  isNull?: InputMaybe<Scalars['Boolean']['input']>;\r\n  lt?: InputMaybe<Scalars['Float']['input']>;\r\n  lte?: InputMaybe<Scalars['Float']['input']>;\r\n};\r\n\r\nexport type NumberRange = {\r\n  end: Scalars['Float']['input'];\r\n  start: Scalars['Float']['input'];\r\n};\r\n\r\nexport type Order = Node & {\r\n  __typename?: 'Order';\r\n  /** An order is active as long as the payment process has not been completed */\r\n  active: Scalars['Boolean']['output'];\r\n  aggregateOrder?: Maybe<Order>;\r\n  aggregateOrderId?: Maybe<Scalars['ID']['output']>;\r\n  billingAddress?: Maybe<OrderAddress>;\r\n  channels: Array<Channel>;\r\n  /** A unique code for the Order */\r\n  code: Scalars['String']['output'];\r\n  /** An array of all coupon codes applied to the Order */\r\n  couponCodes: Array<Scalars['String']['output']>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  currencyCode: CurrencyCode;\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  customer?: Maybe<Customer>;\r\n  discounts: Array<Discount>;\r\n  fulfillments?: Maybe<Array<Fulfillment>>;\r\n  history: HistoryEntryList;\r\n  id: Scalars['ID']['output'];\r\n  lines: Array<OrderLine>;\r\n  modifications: Array<OrderModification>;\r\n  nextStates: Array<Scalars['String']['output']>;\r\n  /**\r\n   * The date & time that the Order was placed, i.e. the Customer\r\n   * completed the checkout and the Order is no longer \"active\"\r\n   */\r\n  orderPlacedAt?: Maybe<Scalars['DateTime']['output']>;\r\n  payments?: Maybe<Array<Payment>>;\r\n  /** Promotions applied to the order. Only gets populated after the payment process has completed. */\r\n  promotions: Array<Promotion>;\r\n  sellerOrders?: Maybe<Array<Order>>;\r\n  shipping: Scalars['Money']['output'];\r\n  shippingAddress?: Maybe<OrderAddress>;\r\n  shippingLines: Array<ShippingLine>;\r\n  shippingWithTax: Scalars['Money']['output'];\r\n  state: Scalars['String']['output'];\r\n  /**\r\n   * The subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\r\n   * discounts which have been prorated (proportionally distributed) amongst the items of each OrderLine.\r\n   * To get a total of all OrderLines which does not account for prorated discounts, use the\r\n   * sum of `OrderLine.discountedLinePrice` values.\r\n   */\r\n  subTotal: Scalars['Money']['output'];\r\n  /** Same as subTotal, but inclusive of tax */\r\n  subTotalWithTax: Scalars['Money']['output'];\r\n  /**\r\n   * Surcharges are arbitrary modifications to the Order total which are neither\r\n   * ProductVariants nor discounts resulting from applied Promotions. For example,\r\n   * one-off discounts based on customer interaction, or surcharges based on payment\r\n   * methods.\r\n   */\r\n  surcharges: Array<Surcharge>;\r\n  /** A summary of the taxes being applied to this Order */\r\n  taxSummary: Array<OrderTaxSummary>;\r\n  /** Equal to subTotal plus shipping */\r\n  total: Scalars['Money']['output'];\r\n  totalQuantity: Scalars['Int']['output'];\r\n  /** The final payable amount. Equal to subTotalWithTax plus shippingWithTax */\r\n  totalWithTax: Scalars['Money']['output'];\r\n  type: OrderType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n\r\nexport type OrderHistoryArgs = {\r\n  options?: InputMaybe<HistoryEntryListOptions>;\r\n};\r\n\r\nexport type OrderAddress = {\r\n  __typename?: 'OrderAddress';\r\n  city?: Maybe<Scalars['String']['output']>;\r\n  company?: Maybe<Scalars['String']['output']>;\r\n  country?: Maybe<Scalars['String']['output']>;\r\n  countryCode?: Maybe<Scalars['String']['output']>;\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  fullName?: Maybe<Scalars['String']['output']>;\r\n  phoneNumber?: Maybe<Scalars['String']['output']>;\r\n  postalCode?: Maybe<Scalars['String']['output']>;\r\n  province?: Maybe<Scalars['String']['output']>;\r\n  streetLine1?: Maybe<Scalars['String']['output']>;\r\n  streetLine2?: Maybe<Scalars['String']['output']>;\r\n};\r\n\r\nexport type OrderFilterParameter = {\r\n  _and?: InputMaybe<Array<OrderFilterParameter>>;\r\n  _or?: InputMaybe<Array<OrderFilterParameter>>;\r\n  active?: InputMaybe<BooleanOperators>;\r\n  aggregateOrderId?: InputMaybe<IdOperators>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  currencyCode?: InputMaybe<StringOperators>;\r\n  customerLastName?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  orderPlacedAt?: InputMaybe<DateOperators>;\r\n  shipping?: InputMaybe<NumberOperators>;\r\n  shippingWithTax?: InputMaybe<NumberOperators>;\r\n  state?: InputMaybe<StringOperators>;\r\n  subTotal?: InputMaybe<NumberOperators>;\r\n  subTotalWithTax?: InputMaybe<NumberOperators>;\r\n  total?: InputMaybe<NumberOperators>;\r\n  totalQuantity?: InputMaybe<NumberOperators>;\r\n  totalWithTax?: InputMaybe<NumberOperators>;\r\n  transactionId?: InputMaybe<StringOperators>;\r\n  type?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\n/** Returned when the maximum order size limit has been reached. */\r\nexport type OrderLimitError = ErrorResult & {\r\n  __typename?: 'OrderLimitError';\r\n  errorCode: ErrorCode;\r\n  maxItems: Scalars['Int']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type OrderLine = Node & {\r\n  __typename?: 'OrderLine';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  /** The price of the line including discounts, excluding tax */\r\n  discountedLinePrice: Scalars['Money']['output'];\r\n  /** The price of the line including discounts and tax */\r\n  discountedLinePriceWithTax: Scalars['Money']['output'];\r\n  /**\r\n   * The price of a single unit including discounts, excluding tax.\r\n   *\r\n   * If Order-level discounts have been applied, this will not be the\r\n   * actual taxable unit price (see `proratedUnitPrice`), but is generally the\r\n   * correct price to display to customers to avoid confusion\r\n   * about the internal handling of distributed Order-level discounts.\r\n   */\r\n  discountedUnitPrice: Scalars['Money']['output'];\r\n  /** The price of a single unit including discounts and tax */\r\n  discountedUnitPriceWithTax: Scalars['Money']['output'];\r\n  discounts: Array<Discount>;\r\n  featuredAsset?: Maybe<Asset>;\r\n  fulfillmentLines?: Maybe<Array<FulfillmentLine>>;\r\n  id: Scalars['ID']['output'];\r\n  /** The total price of the line excluding tax and discounts. */\r\n  linePrice: Scalars['Money']['output'];\r\n  /** The total price of the line including tax but excluding discounts. */\r\n  linePriceWithTax: Scalars['Money']['output'];\r\n  /** The total tax on this line */\r\n  lineTax: Scalars['Money']['output'];\r\n  order: Order;\r\n  /** The quantity at the time the Order was placed */\r\n  orderPlacedQuantity: Scalars['Int']['output'];\r\n  productVariant: ProductVariant;\r\n  /**\r\n   * The actual line price, taking into account both item discounts _and_ prorated (proportionally-distributed)\r\n   * Order-level discounts. This value is the true economic value of the OrderLine, and is used in tax\r\n   * and refund calculations.\r\n   */\r\n  proratedLinePrice: Scalars['Money']['output'];\r\n  /** The proratedLinePrice including tax */\r\n  proratedLinePriceWithTax: Scalars['Money']['output'];\r\n  /**\r\n   * The actual unit price, taking into account both item discounts _and_ prorated (proportionally-distributed)\r\n   * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\r\n   * and refund calculations.\r\n   */\r\n  proratedUnitPrice: Scalars['Money']['output'];\r\n  /** The proratedUnitPrice including tax */\r\n  proratedUnitPriceWithTax: Scalars['Money']['output'];\r\n  /** The quantity of items purchased */\r\n  quantity: Scalars['Int']['output'];\r\n  taxLines: Array<TaxLine>;\r\n  taxRate: Scalars['Float']['output'];\r\n  /** The price of a single unit, excluding tax and discounts */\r\n  unitPrice: Scalars['Money']['output'];\r\n  /** Non-zero if the unitPrice has changed since it was initially added to Order */\r\n  unitPriceChangeSinceAdded: Scalars['Money']['output'];\r\n  /** The price of a single unit, including tax but excluding discounts */\r\n  unitPriceWithTax: Scalars['Money']['output'];\r\n  /** Non-zero if the unitPriceWithTax has changed since it was initially added to Order */\r\n  unitPriceWithTaxChangeSinceAdded: Scalars['Money']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type OrderLineInput = {\r\n  orderLineId: Scalars['ID']['input'];\r\n  quantity: Scalars['Int']['input'];\r\n};\r\n\r\nexport type OrderList = PaginatedList & {\r\n  __typename?: 'OrderList';\r\n  items: Array<Order>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type OrderListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<OrderFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<OrderSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type OrderModification = Node & {\r\n  __typename?: 'OrderModification';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  isSettled: Scalars['Boolean']['output'];\r\n  lines: Array<OrderModificationLine>;\r\n  note: Scalars['String']['output'];\r\n  payment?: Maybe<Payment>;\r\n  priceChange: Scalars['Money']['output'];\r\n  refund?: Maybe<Refund>;\r\n  surcharges?: Maybe<Array<Surcharge>>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/** Returned when attempting to modify the contents of an Order that is not in the `AddingItems` state. */\r\nexport type OrderModificationError = ErrorResult & {\r\n  __typename?: 'OrderModificationError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type OrderModificationLine = {\r\n  __typename?: 'OrderModificationLine';\r\n  modification: OrderModification;\r\n  modificationId: Scalars['ID']['output'];\r\n  orderLine: OrderLine;\r\n  orderLineId: Scalars['ID']['output'];\r\n  quantity: Scalars['Int']['output'];\r\n};\r\n\r\n/** Returned when attempting to modify the contents of an Order that is not in the `Modifying` state. */\r\nexport type OrderModificationStateError = ErrorResult & {\r\n  __typename?: 'OrderModificationStateError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type OrderProcessState = {\r\n  __typename?: 'OrderProcessState';\r\n  name: Scalars['String']['output'];\r\n  to: Array<Scalars['String']['output']>;\r\n};\r\n\r\nexport type OrderSortParameter = {\r\n  aggregateOrderId?: InputMaybe<SortOrder>;\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  customerLastName?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  orderPlacedAt?: InputMaybe<SortOrder>;\r\n  shipping?: InputMaybe<SortOrder>;\r\n  shippingWithTax?: InputMaybe<SortOrder>;\r\n  state?: InputMaybe<SortOrder>;\r\n  subTotal?: InputMaybe<SortOrder>;\r\n  subTotalWithTax?: InputMaybe<SortOrder>;\r\n  total?: InputMaybe<SortOrder>;\r\n  totalQuantity?: InputMaybe<SortOrder>;\r\n  totalWithTax?: InputMaybe<SortOrder>;\r\n  transactionId?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\n/** Returned if there is an error in transitioning the Order state */\r\nexport type OrderStateTransitionError = ErrorResult & {\r\n  __typename?: 'OrderStateTransitionError';\r\n  errorCode: ErrorCode;\r\n  fromState: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  toState: Scalars['String']['output'];\r\n  transitionError: Scalars['String']['output'];\r\n};\r\n\r\n/**\r\n * A summary of the taxes being applied to this order, grouped\r\n * by taxRate.\r\n */\r\nexport type OrderTaxSummary = {\r\n  __typename?: 'OrderTaxSummary';\r\n  /** A description of this tax */\r\n  description: Scalars['String']['output'];\r\n  /** The total net price of OrderLines to which this taxRate applies */\r\n  taxBase: Scalars['Money']['output'];\r\n  /** The taxRate as a percentage */\r\n  taxRate: Scalars['Float']['output'];\r\n  /** The total tax being applied to the Order at this taxRate */\r\n  taxTotal: Scalars['Money']['output'];\r\n};\r\n\r\nexport enum OrderType {\r\n  Aggregate = 'Aggregate',\r\n  Regular = 'Regular',\r\n  Seller = 'Seller'\r\n}\r\n\r\nexport type PaginatedList = {\r\n  items: Array<Node>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type Payment = Node & {\r\n  __typename?: 'Payment';\r\n  amount: Scalars['Money']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  errorMessage?: Maybe<Scalars['String']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  metadata?: Maybe<Scalars['JSON']['output']>;\r\n  method: Scalars['String']['output'];\r\n  nextStates: Array<Scalars['String']['output']>;\r\n  refunds: Array<Refund>;\r\n  state: Scalars['String']['output'];\r\n  transactionId?: Maybe<Scalars['String']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type PaymentMethod = Node & {\r\n  __typename?: 'PaymentMethod';\r\n  checker?: Maybe<ConfigurableOperation>;\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  enabled: Scalars['Boolean']['output'];\r\n  handler: ConfigurableOperation;\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  translations: Array<PaymentMethodTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type PaymentMethodFilterParameter = {\r\n  _and?: InputMaybe<Array<PaymentMethodFilterParameter>>;\r\n  _or?: InputMaybe<Array<PaymentMethodFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type PaymentMethodList = PaginatedList & {\r\n  __typename?: 'PaymentMethodList';\r\n  items: Array<PaymentMethod>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type PaymentMethodListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<PaymentMethodFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<PaymentMethodSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\n/**\r\n * Returned when a call to modifyOrder fails to include a paymentMethod even\r\n * though the price has increased as a result of the changes.\r\n */\r\nexport type PaymentMethodMissingError = ErrorResult & {\r\n  __typename?: 'PaymentMethodMissingError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type PaymentMethodQuote = {\r\n  __typename?: 'PaymentMethodQuote';\r\n  code: Scalars['String']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  eligibilityMessage?: Maybe<Scalars['String']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  isEligible: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n};\r\n\r\nexport type PaymentMethodSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type PaymentMethodTranslation = {\r\n  __typename?: 'PaymentMethodTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type PaymentMethodTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/** Returned if an attempting to refund a Payment against OrderLines from a different Order */\r\nexport type PaymentOrderMismatchError = ErrorResult & {\r\n  __typename?: 'PaymentOrderMismatchError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned when there is an error in transitioning the Payment state */\r\nexport type PaymentStateTransitionError = ErrorResult & {\r\n  __typename?: 'PaymentStateTransitionError';\r\n  errorCode: ErrorCode;\r\n  fromState: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  toState: Scalars['String']['output'];\r\n  transitionError: Scalars['String']['output'];\r\n};\r\n\r\n/**\r\n * @description\r\n * Permissions for administrators and customers. Used to control access to\r\n * GraphQL resolvers via the {@link Allow} decorator.\r\n *\r\n * ## Understanding Permission.Owner\r\n *\r\n * `Permission.Owner` is a special permission which is used in some Vendure resolvers to indicate that that resolver should only\r\n * be accessible to the \"owner\" of that resource.\r\n *\r\n * For example, the Shop API `activeCustomer` query resolver should only return the Customer object for the \"owner\" of that Customer, i.e.\r\n * based on the activeUserId of the current session. As a result, the resolver code looks like this:\r\n *\r\n * @example\r\n * ```TypeScript\r\n * \\@Query()\r\n * \\@Allow(Permission.Owner)\r\n * async activeCustomer(\\@Ctx() ctx: RequestContext): Promise<Customer | undefined> {\r\n *   const userId = ctx.activeUserId;\r\n *   if (userId) {\r\n *     return this.customerService.findOneByUserId(ctx, userId);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Here we can see that the \"ownership\" must be enforced by custom logic inside the resolver. Since \"ownership\" cannot be defined generally\r\n * nor statically encoded at build-time, any resolvers using `Permission.Owner` **must** include logic to enforce that only the owner\r\n * of the resource has access. If not, then it is the equivalent of using `Permission.Public`.\r\n *\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum Permission {\r\n  /** Authenticated means simply that the user is logged in */\r\n  Authenticated = 'Authenticated',\r\n  /** Grants permission to create Administrator */\r\n  CreateAdministrator = 'CreateAdministrator',\r\n  /** Grants permission to create Asset */\r\n  CreateAsset = 'CreateAsset',\r\n  /** Grants permission to create Products, Facets, Assets, Collections */\r\n  CreateCatalog = 'CreateCatalog',\r\n  /** Grants permission to create Channel */\r\n  CreateChannel = 'CreateChannel',\r\n  /** Grants permission to create Collection */\r\n  CreateCollection = 'CreateCollection',\r\n  /** Grants permission to create Country */\r\n  CreateCountry = 'CreateCountry',\r\n  /** Grants permission to create Customer */\r\n  CreateCustomer = 'CreateCustomer',\r\n  /** Grants permission to create CustomerGroup */\r\n  CreateCustomerGroup = 'CreateCustomerGroup',\r\n  /** Grants permission to create Facet */\r\n  CreateFacet = 'CreateFacet',\r\n  /** Grants permission to create Order */\r\n  CreateOrder = 'CreateOrder',\r\n  /** Grants permission to create PaymentMethod */\r\n  CreatePaymentMethod = 'CreatePaymentMethod',\r\n  /** Grants permission to create Product */\r\n  CreateProduct = 'CreateProduct',\r\n  /** Grants permission to create Promotion */\r\n  CreatePromotion = 'CreatePromotion',\r\n  /** Grants permission to create Seller */\r\n  CreateSeller = 'CreateSeller',\r\n  /** Grants permission to create PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  CreateSettings = 'CreateSettings',\r\n  /** Grants permission to create ShippingMethod */\r\n  CreateShippingMethod = 'CreateShippingMethod',\r\n  /** Grants permission to create StockLocation */\r\n  CreateStockLocation = 'CreateStockLocation',\r\n  /** Grants permission to create System */\r\n  CreateSystem = 'CreateSystem',\r\n  /** Grants permission to create Tag */\r\n  CreateTag = 'CreateTag',\r\n  /** Grants permission to create TaxCategory */\r\n  CreateTaxCategory = 'CreateTaxCategory',\r\n  /** Grants permission to create TaxRate */\r\n  CreateTaxRate = 'CreateTaxRate',\r\n  /** Grants permission to create Zone */\r\n  CreateZone = 'CreateZone',\r\n  /** Grants permission to delete Administrator */\r\n  DeleteAdministrator = 'DeleteAdministrator',\r\n  /** Grants permission to delete Asset */\r\n  DeleteAsset = 'DeleteAsset',\r\n  /** Grants permission to delete Products, Facets, Assets, Collections */\r\n  DeleteCatalog = 'DeleteCatalog',\r\n  /** Grants permission to delete Channel */\r\n  DeleteChannel = 'DeleteChannel',\r\n  /** Grants permission to delete Collection */\r\n  DeleteCollection = 'DeleteCollection',\r\n  /** Grants permission to delete Country */\r\n  DeleteCountry = 'DeleteCountry',\r\n  /** Grants permission to delete Customer */\r\n  DeleteCustomer = 'DeleteCustomer',\r\n  /** Grants permission to delete CustomerGroup */\r\n  DeleteCustomerGroup = 'DeleteCustomerGroup',\r\n  /** Grants permission to delete Facet */\r\n  DeleteFacet = 'DeleteFacet',\r\n  /** Grants permission to delete Order */\r\n  DeleteOrder = 'DeleteOrder',\r\n  /** Grants permission to delete PaymentMethod */\r\n  DeletePaymentMethod = 'DeletePaymentMethod',\r\n  /** Grants permission to delete Product */\r\n  DeleteProduct = 'DeleteProduct',\r\n  /** Grants permission to delete Promotion */\r\n  DeletePromotion = 'DeletePromotion',\r\n  /** Grants permission to delete Seller */\r\n  DeleteSeller = 'DeleteSeller',\r\n  /** Grants permission to delete PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  DeleteSettings = 'DeleteSettings',\r\n  /** Grants permission to delete ShippingMethod */\r\n  DeleteShippingMethod = 'DeleteShippingMethod',\r\n  /** Grants permission to delete StockLocation */\r\n  DeleteStockLocation = 'DeleteStockLocation',\r\n  /** Grants permission to delete System */\r\n  DeleteSystem = 'DeleteSystem',\r\n  /** Grants permission to delete Tag */\r\n  DeleteTag = 'DeleteTag',\r\n  /** Grants permission to delete TaxCategory */\r\n  DeleteTaxCategory = 'DeleteTaxCategory',\r\n  /** Grants permission to delete TaxRate */\r\n  DeleteTaxRate = 'DeleteTaxRate',\r\n  /** Grants permission to delete Zone */\r\n  DeleteZone = 'DeleteZone',\r\n  /** Owner means the user owns this entity, e.g. a Customer's own Order */\r\n  Owner = 'Owner',\r\n  /** Public means any unauthenticated user may perform the operation */\r\n  Public = 'Public',\r\n  /** Grants permission to read Administrator */\r\n  ReadAdministrator = 'ReadAdministrator',\r\n  /** Grants permission to read Asset */\r\n  ReadAsset = 'ReadAsset',\r\n  /** Grants permission to read Products, Facets, Assets, Collections */\r\n  ReadCatalog = 'ReadCatalog',\r\n  /** Grants permission to read Channel */\r\n  ReadChannel = 'ReadChannel',\r\n  /** Grants permission to read Collection */\r\n  ReadCollection = 'ReadCollection',\r\n  /** Grants permission to read Country */\r\n  ReadCountry = 'ReadCountry',\r\n  /** Grants permission to read Customer */\r\n  ReadCustomer = 'ReadCustomer',\r\n  /** Grants permission to read CustomerGroup */\r\n  ReadCustomerGroup = 'ReadCustomerGroup',\r\n  /** Grants permission to read Facet */\r\n  ReadFacet = 'ReadFacet',\r\n  /** Grants permission to read Order */\r\n  ReadOrder = 'ReadOrder',\r\n  /** Grants permission to read PaymentMethod */\r\n  ReadPaymentMethod = 'ReadPaymentMethod',\r\n  /** Grants permission to read Product */\r\n  ReadProduct = 'ReadProduct',\r\n  /** Grants permission to read Promotion */\r\n  ReadPromotion = 'ReadPromotion',\r\n  /** Grants permission to read Seller */\r\n  ReadSeller = 'ReadSeller',\r\n  /** Grants permission to read PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  ReadSettings = 'ReadSettings',\r\n  /** Grants permission to read ShippingMethod */\r\n  ReadShippingMethod = 'ReadShippingMethod',\r\n  /** Grants permission to read StockLocation */\r\n  ReadStockLocation = 'ReadStockLocation',\r\n  /** Grants permission to read System */\r\n  ReadSystem = 'ReadSystem',\r\n  /** Grants permission to read Tag */\r\n  ReadTag = 'ReadTag',\r\n  /** Grants permission to read TaxCategory */\r\n  ReadTaxCategory = 'ReadTaxCategory',\r\n  /** Grants permission to read TaxRate */\r\n  ReadTaxRate = 'ReadTaxRate',\r\n  /** Grants permission to read Zone */\r\n  ReadZone = 'ReadZone',\r\n  /** SuperAdmin has unrestricted access to all operations */\r\n  SuperAdmin = 'SuperAdmin',\r\n  /** Grants permission to update Administrator */\r\n  UpdateAdministrator = 'UpdateAdministrator',\r\n  /** Grants permission to update Asset */\r\n  UpdateAsset = 'UpdateAsset',\r\n  /** Grants permission to update Products, Facets, Assets, Collections */\r\n  UpdateCatalog = 'UpdateCatalog',\r\n  /** Grants permission to update Channel */\r\n  UpdateChannel = 'UpdateChannel',\r\n  /** Grants permission to update Collection */\r\n  UpdateCollection = 'UpdateCollection',\r\n  /** Grants permission to update Country */\r\n  UpdateCountry = 'UpdateCountry',\r\n  /** Grants permission to update Customer */\r\n  UpdateCustomer = 'UpdateCustomer',\r\n  /** Grants permission to update CustomerGroup */\r\n  UpdateCustomerGroup = 'UpdateCustomerGroup',\r\n  /** Grants permission to update Facet */\r\n  UpdateFacet = 'UpdateFacet',\r\n  /** Grants permission to update GlobalSettings */\r\n  UpdateGlobalSettings = 'UpdateGlobalSettings',\r\n  /** Grants permission to update Order */\r\n  UpdateOrder = 'UpdateOrder',\r\n  /** Grants permission to update PaymentMethod */\r\n  UpdatePaymentMethod = 'UpdatePaymentMethod',\r\n  /** Grants permission to update Product */\r\n  UpdateProduct = 'UpdateProduct',\r\n  /** Grants permission to update Promotion */\r\n  UpdatePromotion = 'UpdatePromotion',\r\n  /** Grants permission to update Seller */\r\n  UpdateSeller = 'UpdateSeller',\r\n  /** Grants permission to update PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  UpdateSettings = 'UpdateSettings',\r\n  /** Grants permission to update ShippingMethod */\r\n  UpdateShippingMethod = 'UpdateShippingMethod',\r\n  /** Grants permission to update StockLocation */\r\n  UpdateStockLocation = 'UpdateStockLocation',\r\n  /** Grants permission to update System */\r\n  UpdateSystem = 'UpdateSystem',\r\n  /** Grants permission to update Tag */\r\n  UpdateTag = 'UpdateTag',\r\n  /** Grants permission to update TaxCategory */\r\n  UpdateTaxCategory = 'UpdateTaxCategory',\r\n  /** Grants permission to update TaxRate */\r\n  UpdateTaxRate = 'UpdateTaxRate',\r\n  /** Grants permission to update Zone */\r\n  UpdateZone = 'UpdateZone'\r\n}\r\n\r\nexport type PermissionDefinition = {\r\n  __typename?: 'PermissionDefinition';\r\n  assignable: Scalars['Boolean']['output'];\r\n  description: Scalars['String']['output'];\r\n  name: Scalars['String']['output'];\r\n};\r\n\r\nexport type PreviewCollectionVariantsInput = {\r\n  filters: Array<ConfigurableOperationInput>;\r\n  inheritFilters: Scalars['Boolean']['input'];\r\n  parentId?: InputMaybe<Scalars['ID']['input']>;\r\n};\r\n\r\n/** The price range where the result has more than one price */\r\nexport type PriceRange = {\r\n  __typename?: 'PriceRange';\r\n  max: Scalars['Money']['output'];\r\n  min: Scalars['Money']['output'];\r\n};\r\n\r\nexport type Product = Node & {\r\n  __typename?: 'Product';\r\n  assets: Array<Asset>;\r\n  channels: Array<Channel>;\r\n  collections: Array<Collection>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  enabled: Scalars['Boolean']['output'];\r\n  facetValues: Array<FacetValue>;\r\n  featuredAsset?: Maybe<Asset>;\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  optionGroups: Array<ProductOptionGroup>;\r\n  slug: Scalars['String']['output'];\r\n  translations: Array<ProductTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  /** Returns a paginated, sortable, filterable list of ProductVariants */\r\n  variantList: ProductVariantList;\r\n  /** Returns all ProductVariants */\r\n  variants: Array<ProductVariant>;\r\n};\r\n\r\n\r\nexport type ProductVariantListArgs = {\r\n  options?: InputMaybe<ProductVariantListOptions>;\r\n};\r\n\r\nexport type ProductFilterParameter = {\r\n  _and?: InputMaybe<Array<ProductFilterParameter>>;\r\n  _or?: InputMaybe<Array<ProductFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  facetValueId?: InputMaybe<IdOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  sku?: InputMaybe<StringOperators>;\r\n  slug?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type ProductList = PaginatedList & {\r\n  __typename?: 'ProductList';\r\n  items: Array<Product>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ProductListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ProductFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ProductSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ProductOption = Node & {\r\n  __typename?: 'ProductOption';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  group: ProductOptionGroup;\r\n  groupId: Scalars['ID']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  translations: Array<ProductOptionTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductOptionGroup = Node & {\r\n  __typename?: 'ProductOptionGroup';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  options: Array<ProductOption>;\r\n  translations: Array<ProductOptionGroupTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductOptionGroupTranslation = {\r\n  __typename?: 'ProductOptionGroupTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductOptionGroupTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type ProductOptionInUseError = ErrorResult & {\r\n  __typename?: 'ProductOptionInUseError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  optionGroupCode: Scalars['String']['output'];\r\n  productVariantCount: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ProductOptionTranslation = {\r\n  __typename?: 'ProductOptionTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductOptionTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type ProductSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  slug?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type ProductTranslation = {\r\n  __typename?: 'ProductTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  slug: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n  slug?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type ProductVariant = Node & {\r\n  __typename?: 'ProductVariant';\r\n  assets: Array<Asset>;\r\n  channels: Array<Channel>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  currencyCode: CurrencyCode;\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  enabled: Scalars['Boolean']['output'];\r\n  facetValues: Array<FacetValue>;\r\n  featuredAsset?: Maybe<Asset>;\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  options: Array<ProductOption>;\r\n  outOfStockThreshold: Scalars['Int']['output'];\r\n  price: Scalars['Money']['output'];\r\n  priceWithTax: Scalars['Money']['output'];\r\n  prices: Array<ProductVariantPrice>;\r\n  product: Product;\r\n  productId: Scalars['ID']['output'];\r\n  sku: Scalars['String']['output'];\r\n  /** @deprecated use stockLevels */\r\n  stockAllocated: Scalars['Int']['output'];\r\n  stockLevel: Scalars['String']['output'];\r\n  stockLevels: Array<StockLevel>;\r\n  stockMovements: StockMovementList;\r\n  /** @deprecated use stockLevels */\r\n  stockOnHand: Scalars['Int']['output'];\r\n  taxCategory: TaxCategory;\r\n  taxRateApplied: TaxRate;\r\n  trackInventory: GlobalFlag;\r\n  translations: Array<ProductVariantTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  useGlobalOutOfStockThreshold: Scalars['Boolean']['output'];\r\n};\r\n\r\n\r\nexport type ProductVariantStockMovementsArgs = {\r\n  options?: InputMaybe<StockMovementListOptions>;\r\n};\r\n\r\nexport type ProductVariantFilterParameter = {\r\n  _and?: InputMaybe<Array<ProductVariantFilterParameter>>;\r\n  _or?: InputMaybe<Array<ProductVariantFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  currencyCode?: InputMaybe<StringOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  facetValueId?: InputMaybe<IdOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  outOfStockThreshold?: InputMaybe<NumberOperators>;\r\n  price?: InputMaybe<NumberOperators>;\r\n  priceWithTax?: InputMaybe<NumberOperators>;\r\n  productId?: InputMaybe<IdOperators>;\r\n  sku?: InputMaybe<StringOperators>;\r\n  stockAllocated?: InputMaybe<NumberOperators>;\r\n  stockLevel?: InputMaybe<StringOperators>;\r\n  stockOnHand?: InputMaybe<NumberOperators>;\r\n  trackInventory?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n  useGlobalOutOfStockThreshold?: InputMaybe<BooleanOperators>;\r\n};\r\n\r\nexport type ProductVariantList = PaginatedList & {\r\n  __typename?: 'ProductVariantList';\r\n  items: Array<ProductVariant>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ProductVariantListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ProductVariantFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ProductVariantSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ProductVariantPrice = {\r\n  __typename?: 'ProductVariantPrice';\r\n  currencyCode: CurrencyCode;\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  price: Scalars['Money']['output'];\r\n};\r\n\r\n/**\r\n * Used to set up update the price of a ProductVariant in a particular Channel.\r\n * If the `delete` flag is `true`, the price will be deleted for the given Channel.\r\n */\r\nexport type ProductVariantPriceInput = {\r\n  currencyCode: CurrencyCode;\r\n  delete?: InputMaybe<Scalars['Boolean']['input']>;\r\n  price: Scalars['Money']['input'];\r\n};\r\n\r\nexport type ProductVariantSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  outOfStockThreshold?: InputMaybe<SortOrder>;\r\n  price?: InputMaybe<SortOrder>;\r\n  priceWithTax?: InputMaybe<SortOrder>;\r\n  productId?: InputMaybe<SortOrder>;\r\n  sku?: InputMaybe<SortOrder>;\r\n  stockAllocated?: InputMaybe<SortOrder>;\r\n  stockLevel?: InputMaybe<SortOrder>;\r\n  stockOnHand?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type ProductVariantTranslation = {\r\n  __typename?: 'ProductVariantTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProductVariantTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type Promotion = Node & {\r\n  __typename?: 'Promotion';\r\n  actions: Array<ConfigurableOperation>;\r\n  conditions: Array<ConfigurableOperation>;\r\n  couponCode?: Maybe<Scalars['String']['output']>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  enabled: Scalars['Boolean']['output'];\r\n  endsAt?: Maybe<Scalars['DateTime']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  perCustomerUsageLimit?: Maybe<Scalars['Int']['output']>;\r\n  startsAt?: Maybe<Scalars['DateTime']['output']>;\r\n  translations: Array<PromotionTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  usageLimit?: Maybe<Scalars['Int']['output']>;\r\n};\r\n\r\nexport type PromotionFilterParameter = {\r\n  _and?: InputMaybe<Array<PromotionFilterParameter>>;\r\n  _or?: InputMaybe<Array<PromotionFilterParameter>>;\r\n  couponCode?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  endsAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  perCustomerUsageLimit?: InputMaybe<NumberOperators>;\r\n  startsAt?: InputMaybe<DateOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n  usageLimit?: InputMaybe<NumberOperators>;\r\n};\r\n\r\nexport type PromotionList = PaginatedList & {\r\n  __typename?: 'PromotionList';\r\n  items: Array<Promotion>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type PromotionListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<PromotionFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<PromotionSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type PromotionSortParameter = {\r\n  couponCode?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  endsAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  perCustomerUsageLimit?: InputMaybe<SortOrder>;\r\n  startsAt?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n  usageLimit?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type PromotionTranslation = {\r\n  __typename?: 'PromotionTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type PromotionTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type Province = Node & Region & {\r\n  __typename?: 'Province';\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  enabled: Scalars['Boolean']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  parent?: Maybe<Region>;\r\n  parentId?: Maybe<Scalars['ID']['output']>;\r\n  translations: Array<RegionTranslation>;\r\n  type: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ProvinceFilterParameter = {\r\n  _and?: InputMaybe<Array<ProvinceFilterParameter>>;\r\n  _or?: InputMaybe<Array<ProvinceFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  parentId?: InputMaybe<IdOperators>;\r\n  type?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type ProvinceList = PaginatedList & {\r\n  __typename?: 'ProvinceList';\r\n  items: Array<Province>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ProvinceListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ProvinceFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ProvinceSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ProvinceSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  parentId?: InputMaybe<SortOrder>;\r\n  type?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type ProvinceTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/** Returned if the specified quantity of an OrderLine is greater than the number of items in that line */\r\nexport type QuantityTooGreatError = ErrorResult & {\r\n  __typename?: 'QuantityTooGreatError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  activeAdministrator?: Maybe<Administrator>;\r\n  activeChannel: Channel;\r\n  administrator?: Maybe<Administrator>;\r\n  administrators: AdministratorList;\r\n  /** Get a single Asset by id */\r\n  asset?: Maybe<Asset>;\r\n  /** Get a list of Assets */\r\n  assets: AssetList;\r\n  channel?: Maybe<Channel>;\r\n  channels: ChannelList;\r\n  /** Get a Collection either by id or slug. If neither id nor slug is specified, an error will result. */\r\n  collection?: Maybe<Collection>;\r\n  collectionFilters: Array<ConfigurableOperationDefinition>;\r\n  collections: CollectionList;\r\n  countries: CountryList;\r\n  country?: Maybe<Country>;\r\n  customer?: Maybe<Customer>;\r\n  customerGroup?: Maybe<CustomerGroup>;\r\n  customerGroups: CustomerGroupList;\r\n  customers: CustomerList;\r\n  /** Returns a list of eligible shipping methods for the draft Order */\r\n  eligibleShippingMethodsForDraftOrder: Array<ShippingMethodQuote>;\r\n  /** Returns all configured EntityDuplicators. */\r\n  entityDuplicators: Array<EntityDuplicatorDefinition>;\r\n  facet?: Maybe<Facet>;\r\n  facetValues: FacetValueList;\r\n  facets: FacetList;\r\n  fulfillmentHandlers: Array<ConfigurableOperationDefinition>;\r\n  globalSettings: GlobalSettings;\r\n  job?: Maybe<Job>;\r\n  jobBufferSize: Array<JobBufferSize>;\r\n  jobQueues: Array<JobQueue>;\r\n  jobs: JobList;\r\n  jobsById: Array<Job>;\r\n  me?: Maybe<CurrentUser>;\r\n  /** Get metrics for the given interval and metric types. */\r\n  metricSummary: Array<MetricSummary>;\r\n  order?: Maybe<Order>;\r\n  orders: OrderList;\r\n  paymentMethod?: Maybe<PaymentMethod>;\r\n  paymentMethodEligibilityCheckers: Array<ConfigurableOperationDefinition>;\r\n  paymentMethodHandlers: Array<ConfigurableOperationDefinition>;\r\n  paymentMethods: PaymentMethodList;\r\n  pendingSearchIndexUpdates: Scalars['Int']['output'];\r\n  /** Used for real-time previews of the contents of a Collection */\r\n  previewCollectionVariants: ProductVariantList;\r\n  /** Get a Product either by id or slug. If neither id nor slug is specified, an error will result. */\r\n  product?: Maybe<Product>;\r\n  productOptionGroup?: Maybe<ProductOptionGroup>;\r\n  productOptionGroups: Array<ProductOptionGroup>;\r\n  /** Get a ProductVariant by id */\r\n  productVariant?: Maybe<ProductVariant>;\r\n  /** List ProductVariants either all or for the specific product. */\r\n  productVariants: ProductVariantList;\r\n  /** List Products */\r\n  products: ProductList;\r\n  promotion?: Maybe<Promotion>;\r\n  promotionActions: Array<ConfigurableOperationDefinition>;\r\n  promotionConditions: Array<ConfigurableOperationDefinition>;\r\n  promotions: PromotionList;\r\n  province?: Maybe<Province>;\r\n  provinces: ProvinceList;\r\n  role?: Maybe<Role>;\r\n  roles: RoleList;\r\n  search: SearchResponse;\r\n  seller?: Maybe<Seller>;\r\n  sellers: SellerList;\r\n  shippingCalculators: Array<ConfigurableOperationDefinition>;\r\n  shippingEligibilityCheckers: Array<ConfigurableOperationDefinition>;\r\n  shippingMethod?: Maybe<ShippingMethod>;\r\n  shippingMethods: ShippingMethodList;\r\n  stockLocation?: Maybe<StockLocation>;\r\n  stockLocations: StockLocationList;\r\n  tag: Tag;\r\n  tags: TagList;\r\n  taxCategories: TaxCategoryList;\r\n  taxCategory?: Maybe<TaxCategory>;\r\n  taxRate?: Maybe<TaxRate>;\r\n  taxRates: TaxRateList;\r\n  testEligibleShippingMethods: Array<ShippingMethodQuote>;\r\n  testShippingMethod: TestShippingMethodResult;\r\n  zone?: Maybe<Zone>;\r\n  zones: ZoneList;\r\n};\r\n\r\n\r\nexport type QueryAdministratorArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryAdministratorsArgs = {\r\n  options?: InputMaybe<AdministratorListOptions>;\r\n};\r\n\r\n\r\nexport type QueryAssetArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryAssetsArgs = {\r\n  options?: InputMaybe<AssetListOptions>;\r\n};\r\n\r\n\r\nexport type QueryChannelArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryChannelsArgs = {\r\n  options?: InputMaybe<ChannelListOptions>;\r\n};\r\n\r\n\r\nexport type QueryCollectionArgs = {\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  slug?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n\r\nexport type QueryCollectionsArgs = {\r\n  options?: InputMaybe<CollectionListOptions>;\r\n};\r\n\r\n\r\nexport type QueryCountriesArgs = {\r\n  options?: InputMaybe<CountryListOptions>;\r\n};\r\n\r\n\r\nexport type QueryCountryArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryCustomerArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryCustomerGroupArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryCustomerGroupsArgs = {\r\n  options?: InputMaybe<CustomerGroupListOptions>;\r\n};\r\n\r\n\r\nexport type QueryCustomersArgs = {\r\n  options?: InputMaybe<CustomerListOptions>;\r\n};\r\n\r\n\r\nexport type QueryEligibleShippingMethodsForDraftOrderArgs = {\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryFacetArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryFacetValuesArgs = {\r\n  options?: InputMaybe<FacetValueListOptions>;\r\n};\r\n\r\n\r\nexport type QueryFacetsArgs = {\r\n  options?: InputMaybe<FacetListOptions>;\r\n};\r\n\r\n\r\nexport type QueryJobArgs = {\r\n  jobId: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryJobBufferSizeArgs = {\r\n  bufferIds?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\n\r\nexport type QueryJobsArgs = {\r\n  options?: InputMaybe<JobListOptions>;\r\n};\r\n\r\n\r\nexport type QueryJobsByIdArgs = {\r\n  jobIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type QueryMetricSummaryArgs = {\r\n  input?: InputMaybe<MetricSummaryInput>;\r\n};\r\n\r\n\r\nexport type QueryOrderArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryOrdersArgs = {\r\n  options?: InputMaybe<OrderListOptions>;\r\n};\r\n\r\n\r\nexport type QueryPaymentMethodArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryPaymentMethodsArgs = {\r\n  options?: InputMaybe<PaymentMethodListOptions>;\r\n};\r\n\r\n\r\nexport type QueryPreviewCollectionVariantsArgs = {\r\n  input: PreviewCollectionVariantsInput;\r\n  options?: InputMaybe<ProductVariantListOptions>;\r\n};\r\n\r\n\r\nexport type QueryProductArgs = {\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  slug?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n\r\nexport type QueryProductOptionGroupArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryProductOptionGroupsArgs = {\r\n  filterTerm?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n\r\nexport type QueryProductVariantArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryProductVariantsArgs = {\r\n  options?: InputMaybe<ProductVariantListOptions>;\r\n  productId?: InputMaybe<Scalars['ID']['input']>;\r\n};\r\n\r\n\r\nexport type QueryProductsArgs = {\r\n  options?: InputMaybe<ProductListOptions>;\r\n};\r\n\r\n\r\nexport type QueryPromotionArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryPromotionsArgs = {\r\n  options?: InputMaybe<PromotionListOptions>;\r\n};\r\n\r\n\r\nexport type QueryProvinceArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryProvincesArgs = {\r\n  options?: InputMaybe<ProvinceListOptions>;\r\n};\r\n\r\n\r\nexport type QueryRoleArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryRolesArgs = {\r\n  options?: InputMaybe<RoleListOptions>;\r\n};\r\n\r\n\r\nexport type QuerySearchArgs = {\r\n  input: SearchInput;\r\n};\r\n\r\n\r\nexport type QuerySellerArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QuerySellersArgs = {\r\n  options?: InputMaybe<SellerListOptions>;\r\n};\r\n\r\n\r\nexport type QueryShippingMethodArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryShippingMethodsArgs = {\r\n  options?: InputMaybe<ShippingMethodListOptions>;\r\n};\r\n\r\n\r\nexport type QueryStockLocationArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryStockLocationsArgs = {\r\n  options?: InputMaybe<StockLocationListOptions>;\r\n};\r\n\r\n\r\nexport type QueryTagArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryTagsArgs = {\r\n  options?: InputMaybe<TagListOptions>;\r\n};\r\n\r\n\r\nexport type QueryTaxCategoriesArgs = {\r\n  options?: InputMaybe<TaxCategoryListOptions>;\r\n};\r\n\r\n\r\nexport type QueryTaxCategoryArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryTaxRateArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryTaxRatesArgs = {\r\n  options?: InputMaybe<TaxRateListOptions>;\r\n};\r\n\r\n\r\nexport type QueryTestEligibleShippingMethodsArgs = {\r\n  input: TestEligibleShippingMethodsInput;\r\n};\r\n\r\n\r\nexport type QueryTestShippingMethodArgs = {\r\n  input: TestShippingMethodInput;\r\n};\r\n\r\n\r\nexport type QueryZoneArgs = {\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\n\r\nexport type QueryZonesArgs = {\r\n  options?: InputMaybe<ZoneListOptions>;\r\n};\r\n\r\nexport type Refund = Node & {\r\n  __typename?: 'Refund';\r\n  adjustment: Scalars['Money']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  items: Scalars['Money']['output'];\r\n  lines: Array<RefundLine>;\r\n  metadata?: Maybe<Scalars['JSON']['output']>;\r\n  method?: Maybe<Scalars['String']['output']>;\r\n  paymentId: Scalars['ID']['output'];\r\n  reason?: Maybe<Scalars['String']['output']>;\r\n  shipping: Scalars['Money']['output'];\r\n  state: Scalars['String']['output'];\r\n  total: Scalars['Money']['output'];\r\n  transactionId?: Maybe<Scalars['String']['output']>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\n/** Returned if `amount` is greater than the maximum un-refunded amount of the Payment */\r\nexport type RefundAmountError = ErrorResult & {\r\n  __typename?: 'RefundAmountError';\r\n  errorCode: ErrorCode;\r\n  maximumRefundable: Scalars['Int']['output'];\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\nexport type RefundLine = {\r\n  __typename?: 'RefundLine';\r\n  orderLine: OrderLine;\r\n  orderLineId: Scalars['ID']['output'];\r\n  quantity: Scalars['Int']['output'];\r\n  refund: Refund;\r\n  refundId: Scalars['ID']['output'];\r\n};\r\n\r\nexport type RefundOrderInput = {\r\n  adjustment: Scalars['Money']['input'];\r\n  /**\r\n   * If an amount is specified, this value will be used to create a Refund rather than calculating the\r\n   * amount automatically. This was added in v2.2 and will be the preferred way to specify the refund\r\n   * amount in the future. The `lines`, `shipping` and `adjustment` fields will likely be removed in a future\r\n   * version.\r\n   */\r\n  amount?: InputMaybe<Scalars['Money']['input']>;\r\n  lines: Array<OrderLineInput>;\r\n  paymentId: Scalars['ID']['input'];\r\n  reason?: InputMaybe<Scalars['String']['input']>;\r\n  shipping: Scalars['Money']['input'];\r\n};\r\n\r\nexport type RefundOrderResult = AlreadyRefundedError | MultipleOrderError | NothingToRefundError | OrderStateTransitionError | PaymentOrderMismatchError | QuantityTooGreatError | Refund | RefundAmountError | RefundOrderStateError | RefundStateTransitionError;\r\n\r\n/** Returned if an attempting to refund an Order which is not in the expected state */\r\nexport type RefundOrderStateError = ErrorResult & {\r\n  __typename?: 'RefundOrderStateError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  orderState: Scalars['String']['output'];\r\n};\r\n\r\n/**\r\n * Returned when a call to modifyOrder fails to include a refundPaymentId even\r\n * though the price has decreased as a result of the changes.\r\n */\r\nexport type RefundPaymentIdMissingError = ErrorResult & {\r\n  __typename?: 'RefundPaymentIdMissingError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n};\r\n\r\n/** Returned when there is an error in transitioning the Refund state */\r\nexport type RefundStateTransitionError = ErrorResult & {\r\n  __typename?: 'RefundStateTransitionError';\r\n  errorCode: ErrorCode;\r\n  fromState: Scalars['String']['output'];\r\n  message: Scalars['String']['output'];\r\n  toState: Scalars['String']['output'];\r\n  transitionError: Scalars['String']['output'];\r\n};\r\n\r\nexport type Region = {\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  enabled: Scalars['Boolean']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  parent?: Maybe<Region>;\r\n  parentId?: Maybe<Scalars['ID']['output']>;\r\n  translations: Array<RegionTranslation>;\r\n  type: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type RegionTranslation = {\r\n  __typename?: 'RegionTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type RelationCustomFieldConfig = CustomField & {\r\n  __typename?: 'RelationCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  entity: Scalars['String']['output'];\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  scalarFields: Array<Scalars['String']['output']>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type Release = Node & StockMovement & {\r\n  __typename?: 'Release';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type RemoveCollectionsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  collectionIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemoveFacetFromChannelResult = Facet | FacetInUseError;\r\n\r\nexport type RemoveFacetsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  facetIds: Array<Scalars['ID']['input']>;\r\n  force?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type RemoveOptionGroupFromProductResult = Product | ProductOptionInUseError;\r\n\r\nexport type RemoveOrderItemsResult = Order | OrderModificationError;\r\n\r\nexport type RemovePaymentMethodsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  paymentMethodIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemoveProductVariantsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  productVariantIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemoveProductsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  productIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemovePromotionsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  promotionIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemoveShippingMethodsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  shippingMethodIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type RemoveStockLocationsFromChannelInput = {\r\n  channelId: Scalars['ID']['input'];\r\n  stockLocationIds: Array<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type Return = Node & StockMovement & {\r\n  __typename?: 'Return';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type Role = Node & {\r\n  __typename?: 'Role';\r\n  channels: Array<Channel>;\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  permissions: Array<Permission>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type RoleFilterParameter = {\r\n  _and?: InputMaybe<Array<RoleFilterParameter>>;\r\n  _or?: InputMaybe<Array<RoleFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type RoleList = PaginatedList & {\r\n  __typename?: 'RoleList';\r\n  items: Array<Role>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type RoleListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<RoleFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<RoleSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type RoleSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type Sale = Node & StockMovement & {\r\n  __typename?: 'Sale';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type SearchInput = {\r\n  collectionId?: InputMaybe<Scalars['ID']['input']>;\r\n  collectionSlug?: InputMaybe<Scalars['String']['input']>;\r\n  facetValueFilters?: InputMaybe<Array<FacetValueFilterInput>>;\r\n  /** @deprecated Use `facetValueFilters` instead */\r\n  facetValueIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  /** @deprecated Use `facetValueFilters` instead */\r\n  facetValueOperator?: InputMaybe<LogicalOperator>;\r\n  groupByProduct?: InputMaybe<Scalars['Boolean']['input']>;\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  sort?: InputMaybe<SearchResultSortParameter>;\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n  term?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type SearchReindexResponse = {\r\n  __typename?: 'SearchReindexResponse';\r\n  success: Scalars['Boolean']['output'];\r\n};\r\n\r\nexport type SearchResponse = {\r\n  __typename?: 'SearchResponse';\r\n  collections: Array<CollectionResult>;\r\n  facetValues: Array<FacetValueResult>;\r\n  items: Array<SearchResult>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type SearchResult = {\r\n  __typename?: 'SearchResult';\r\n  /** An array of ids of the Channels in which this result appears */\r\n  channelIds: Array<Scalars['ID']['output']>;\r\n  /** An array of ids of the Collections in which this result appears */\r\n  collectionIds: Array<Scalars['ID']['output']>;\r\n  currencyCode: CurrencyCode;\r\n  description: Scalars['String']['output'];\r\n  enabled: Scalars['Boolean']['output'];\r\n  facetIds: Array<Scalars['ID']['output']>;\r\n  facetValueIds: Array<Scalars['ID']['output']>;\r\n  price: SearchResultPrice;\r\n  priceWithTax: SearchResultPrice;\r\n  productAsset?: Maybe<SearchResultAsset>;\r\n  productId: Scalars['ID']['output'];\r\n  productName: Scalars['String']['output'];\r\n  productVariantAsset?: Maybe<SearchResultAsset>;\r\n  productVariantId: Scalars['ID']['output'];\r\n  productVariantName: Scalars['String']['output'];\r\n  /** A relevance score for the result. Differs between database implementations */\r\n  score: Scalars['Float']['output'];\r\n  sku: Scalars['String']['output'];\r\n  slug: Scalars['String']['output'];\r\n};\r\n\r\nexport type SearchResultAsset = {\r\n  __typename?: 'SearchResultAsset';\r\n  focalPoint?: Maybe<Coordinate>;\r\n  id: Scalars['ID']['output'];\r\n  preview: Scalars['String']['output'];\r\n};\r\n\r\n/** The price of a search result product, either as a range or as a single price */\r\nexport type SearchResultPrice = PriceRange | SinglePrice;\r\n\r\nexport type SearchResultSortParameter = {\r\n  name?: InputMaybe<SortOrder>;\r\n  price?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type Seller = Node & {\r\n  __typename?: 'Seller';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type SellerFilterParameter = {\r\n  _and?: InputMaybe<Array<SellerFilterParameter>>;\r\n  _or?: InputMaybe<Array<SellerFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type SellerList = PaginatedList & {\r\n  __typename?: 'SellerList';\r\n  items: Array<Seller>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type SellerListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<SellerFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<SellerSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type SellerSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type ServerConfig = {\r\n  __typename?: 'ServerConfig';\r\n  /**\r\n   * This field is deprecated in v2.2 in favor of the entityCustomFields field,\r\n   * which allows custom fields to be defined on user-supplies entities.\r\n   */\r\n  customFieldConfig: CustomFields;\r\n  entityCustomFields: Array<EntityCustomFields>;\r\n  moneyStrategyPrecision: Scalars['Int']['output'];\r\n  orderProcess: Array<OrderProcessState>;\r\n  permissions: Array<PermissionDefinition>;\r\n  permittedAssetTypes: Array<Scalars['String']['output']>;\r\n};\r\n\r\nexport type SetCustomerForDraftOrderResult = EmailAddressConflictError | Order;\r\n\r\nexport type SetOrderCustomerInput = {\r\n  customerId: Scalars['ID']['input'];\r\n  note?: InputMaybe<Scalars['String']['input']>;\r\n  orderId: Scalars['ID']['input'];\r\n};\r\n\r\nexport type SetOrderShippingMethodResult = IneligibleShippingMethodError | NoActiveOrderError | Order | OrderModificationError;\r\n\r\n/** Returned if the Payment settlement fails */\r\nexport type SettlePaymentError = ErrorResult & {\r\n  __typename?: 'SettlePaymentError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String']['output'];\r\n  paymentErrorMessage: Scalars['String']['output'];\r\n};\r\n\r\nexport type SettlePaymentResult = OrderStateTransitionError | Payment | PaymentStateTransitionError | SettlePaymentError;\r\n\r\nexport type SettleRefundInput = {\r\n  id: Scalars['ID']['input'];\r\n  transactionId: Scalars['String']['input'];\r\n};\r\n\r\nexport type SettleRefundResult = Refund | RefundStateTransitionError;\r\n\r\nexport type ShippingLine = {\r\n  __typename?: 'ShippingLine';\r\n  discountedPrice: Scalars['Money']['output'];\r\n  discountedPriceWithTax: Scalars['Money']['output'];\r\n  discounts: Array<Discount>;\r\n  id: Scalars['ID']['output'];\r\n  price: Scalars['Money']['output'];\r\n  priceWithTax: Scalars['Money']['output'];\r\n  shippingMethod: ShippingMethod;\r\n};\r\n\r\nexport type ShippingMethod = Node & {\r\n  __typename?: 'ShippingMethod';\r\n  calculator: ConfigurableOperation;\r\n  checker: ConfigurableOperation;\r\n  code: Scalars['String']['output'];\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  fulfillmentHandlerCode: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  translations: Array<ShippingMethodTranslation>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ShippingMethodFilterParameter = {\r\n  _and?: InputMaybe<Array<ShippingMethodFilterParameter>>;\r\n  _or?: InputMaybe<Array<ShippingMethodFilterParameter>>;\r\n  code?: InputMaybe<StringOperators>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  fulfillmentHandlerCode?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  languageCode?: InputMaybe<StringOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type ShippingMethodList = PaginatedList & {\r\n  __typename?: 'ShippingMethodList';\r\n  items: Array<ShippingMethod>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ShippingMethodListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ShippingMethodFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ShippingMethodSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ShippingMethodQuote = {\r\n  __typename?: 'ShippingMethodQuote';\r\n  code: Scalars['String']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  /** Any optional metadata returned by the ShippingCalculator in the ShippingCalculationResult */\r\n  metadata?: Maybe<Scalars['JSON']['output']>;\r\n  name: Scalars['String']['output'];\r\n  price: Scalars['Money']['output'];\r\n  priceWithTax: Scalars['Money']['output'];\r\n};\r\n\r\nexport type ShippingMethodSortParameter = {\r\n  code?: InputMaybe<SortOrder>;\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  fulfillmentHandlerCode?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type ShippingMethodTranslation = {\r\n  __typename?: 'ShippingMethodTranslation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ShippingMethodTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/** The price value where the result has a single price */\r\nexport type SinglePrice = {\r\n  __typename?: 'SinglePrice';\r\n  value: Scalars['Money']['output'];\r\n};\r\n\r\nexport enum SortOrder {\r\n  ASC = 'ASC',\r\n  DESC = 'DESC'\r\n}\r\n\r\nexport type StockAdjustment = Node & StockMovement & {\r\n  __typename?: 'StockAdjustment';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type StockLevel = Node & {\r\n  __typename?: 'StockLevel';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  stockAllocated: Scalars['Int']['output'];\r\n  stockLocation: StockLocation;\r\n  stockLocationId: Scalars['ID']['output'];\r\n  stockOnHand: Scalars['Int']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type StockLevelInput = {\r\n  stockLocationId: Scalars['ID']['input'];\r\n  stockOnHand: Scalars['Int']['input'];\r\n};\r\n\r\nexport type StockLocation = Node & {\r\n  __typename?: 'StockLocation';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type StockLocationFilterParameter = {\r\n  _and?: InputMaybe<Array<StockLocationFilterParameter>>;\r\n  _or?: InputMaybe<Array<StockLocationFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  description?: InputMaybe<StringOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type StockLocationList = PaginatedList & {\r\n  __typename?: 'StockLocationList';\r\n  items: Array<StockLocation>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type StockLocationListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<StockLocationFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<StockLocationSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type StockLocationSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  description?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type StockMovement = {\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  productVariant: ProductVariant;\r\n  quantity: Scalars['Int']['output'];\r\n  type: StockMovementType;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type StockMovementItem = Allocation | Cancellation | Release | Return | Sale | StockAdjustment;\r\n\r\nexport type StockMovementList = {\r\n  __typename?: 'StockMovementList';\r\n  items: Array<StockMovementItem>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type StockMovementListOptions = {\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n  type?: InputMaybe<StockMovementType>;\r\n};\r\n\r\nexport enum StockMovementType {\r\n  ADJUSTMENT = 'ADJUSTMENT',\r\n  ALLOCATION = 'ALLOCATION',\r\n  CANCELLATION = 'CANCELLATION',\r\n  RELEASE = 'RELEASE',\r\n  RETURN = 'RETURN',\r\n  SALE = 'SALE'\r\n}\r\n\r\nexport type StringCustomFieldConfig = CustomField & {\r\n  __typename?: 'StringCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  length?: Maybe<Scalars['Int']['output']>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  options?: Maybe<Array<StringFieldOption>>;\r\n  pattern?: Maybe<Scalars['String']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type StringFieldOption = {\r\n  __typename?: 'StringFieldOption';\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  value: Scalars['String']['output'];\r\n};\r\n\r\n/** Operators for filtering on a list of String fields */\r\nexport type StringListOperators = {\r\n  inList: Scalars['String']['input'];\r\n};\r\n\r\n/** Operators for filtering on a String field */\r\nexport type StringOperators = {\r\n  contains?: InputMaybe<Scalars['String']['input']>;\r\n  eq?: InputMaybe<Scalars['String']['input']>;\r\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\r\n  isNull?: InputMaybe<Scalars['Boolean']['input']>;\r\n  notContains?: InputMaybe<Scalars['String']['input']>;\r\n  notEq?: InputMaybe<Scalars['String']['input']>;\r\n  notIn?: InputMaybe<Array<Scalars['String']['input']>>;\r\n  regex?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/** Indicates that an operation succeeded, where we do not want to return any more specific information. */\r\nexport type Success = {\r\n  __typename?: 'Success';\r\n  success: Scalars['Boolean']['output'];\r\n};\r\n\r\nexport type Surcharge = Node & {\r\n  __typename?: 'Surcharge';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  description: Scalars['String']['output'];\r\n  id: Scalars['ID']['output'];\r\n  price: Scalars['Money']['output'];\r\n  priceWithTax: Scalars['Money']['output'];\r\n  sku?: Maybe<Scalars['String']['output']>;\r\n  taxLines: Array<TaxLine>;\r\n  taxRate: Scalars['Float']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type SurchargeInput = {\r\n  description: Scalars['String']['input'];\r\n  price: Scalars['Money']['input'];\r\n  priceIncludesTax: Scalars['Boolean']['input'];\r\n  sku?: InputMaybe<Scalars['String']['input']>;\r\n  taxDescription?: InputMaybe<Scalars['String']['input']>;\r\n  taxRate?: InputMaybe<Scalars['Float']['input']>;\r\n};\r\n\r\nexport type Tag = Node & {\r\n  __typename?: 'Tag';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  id: Scalars['ID']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  value: Scalars['String']['output'];\r\n};\r\n\r\nexport type TagFilterParameter = {\r\n  _and?: InputMaybe<Array<TagFilterParameter>>;\r\n  _or?: InputMaybe<Array<TagFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n  value?: InputMaybe<StringOperators>;\r\n};\r\n\r\nexport type TagList = PaginatedList & {\r\n  __typename?: 'TagList';\r\n  items: Array<Tag>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type TagListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<TagFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<TagSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type TagSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n  value?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type TaxCategory = Node & {\r\n  __typename?: 'TaxCategory';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  isDefault: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type TaxCategoryFilterParameter = {\r\n  _and?: InputMaybe<Array<TaxCategoryFilterParameter>>;\r\n  _or?: InputMaybe<Array<TaxCategoryFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  isDefault?: InputMaybe<BooleanOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type TaxCategoryList = PaginatedList & {\r\n  __typename?: 'TaxCategoryList';\r\n  items: Array<TaxCategory>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type TaxCategoryListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<TaxCategoryFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<TaxCategorySortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type TaxCategorySortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type TaxLine = {\r\n  __typename?: 'TaxLine';\r\n  description: Scalars['String']['output'];\r\n  taxRate: Scalars['Float']['output'];\r\n};\r\n\r\nexport type TaxRate = Node & {\r\n  __typename?: 'TaxRate';\r\n  category: TaxCategory;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  customerGroup?: Maybe<CustomerGroup>;\r\n  enabled: Scalars['Boolean']['output'];\r\n  id: Scalars['ID']['output'];\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  value: Scalars['Float']['output'];\r\n  zone: Zone;\r\n};\r\n\r\nexport type TaxRateFilterParameter = {\r\n  _and?: InputMaybe<Array<TaxRateFilterParameter>>;\r\n  _or?: InputMaybe<Array<TaxRateFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  enabled?: InputMaybe<BooleanOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n  value?: InputMaybe<NumberOperators>;\r\n};\r\n\r\nexport type TaxRateList = PaginatedList & {\r\n  __typename?: 'TaxRateList';\r\n  items: Array<TaxRate>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type TaxRateListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<TaxRateFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<TaxRateSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type TaxRateSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n  value?: InputMaybe<SortOrder>;\r\n};\r\n\r\nexport type TestEligibleShippingMethodsInput = {\r\n  lines: Array<TestShippingMethodOrderLineInput>;\r\n  shippingAddress: CreateAddressInput;\r\n};\r\n\r\nexport type TestShippingMethodInput = {\r\n  calculator: ConfigurableOperationInput;\r\n  checker: ConfigurableOperationInput;\r\n  lines: Array<TestShippingMethodOrderLineInput>;\r\n  shippingAddress: CreateAddressInput;\r\n};\r\n\r\nexport type TestShippingMethodOrderLineInput = {\r\n  productVariantId: Scalars['ID']['input'];\r\n  quantity: Scalars['Int']['input'];\r\n};\r\n\r\nexport type TestShippingMethodQuote = {\r\n  __typename?: 'TestShippingMethodQuote';\r\n  metadata?: Maybe<Scalars['JSON']['output']>;\r\n  price: Scalars['Money']['output'];\r\n  priceWithTax: Scalars['Money']['output'];\r\n};\r\n\r\nexport type TestShippingMethodResult = {\r\n  __typename?: 'TestShippingMethodResult';\r\n  eligible: Scalars['Boolean']['output'];\r\n  quote?: Maybe<TestShippingMethodQuote>;\r\n};\r\n\r\nexport type TextCustomFieldConfig = CustomField & {\r\n  __typename?: 'TextCustomFieldConfig';\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  internal?: Maybe<Scalars['Boolean']['output']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  list: Scalars['Boolean']['output'];\r\n  name: Scalars['String']['output'];\r\n  nullable?: Maybe<Scalars['Boolean']['output']>;\r\n  readonly?: Maybe<Scalars['Boolean']['output']>;\r\n  requiresPermission?: Maybe<Array<Permission>>;\r\n  type: Scalars['String']['output'];\r\n  ui?: Maybe<Scalars['JSON']['output']>;\r\n};\r\n\r\nexport type TransitionFulfillmentToStateResult = Fulfillment | FulfillmentStateTransitionError;\r\n\r\nexport type TransitionOrderToStateResult = Order | OrderStateTransitionError;\r\n\r\nexport type TransitionPaymentToStateResult = Payment | PaymentStateTransitionError;\r\n\r\nexport type UpdateActiveAdministratorInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  emailAddress?: InputMaybe<Scalars['String']['input']>;\r\n  firstName?: InputMaybe<Scalars['String']['input']>;\r\n  lastName?: InputMaybe<Scalars['String']['input']>;\r\n  password?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\n/**\r\n * Input used to update an Address.\r\n *\r\n * The countryCode must correspond to a `code` property of a Country that has been defined in the\r\n * Vendure server. The `code` property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\r\n * If an invalid code is passed, the mutation will fail.\r\n */\r\nexport type UpdateAddressInput = {\r\n  city?: InputMaybe<Scalars['String']['input']>;\r\n  company?: InputMaybe<Scalars['String']['input']>;\r\n  countryCode?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  defaultBillingAddress?: InputMaybe<Scalars['Boolean']['input']>;\r\n  defaultShippingAddress?: InputMaybe<Scalars['Boolean']['input']>;\r\n  fullName?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  phoneNumber?: InputMaybe<Scalars['String']['input']>;\r\n  postalCode?: InputMaybe<Scalars['String']['input']>;\r\n  province?: InputMaybe<Scalars['String']['input']>;\r\n  streetLine1?: InputMaybe<Scalars['String']['input']>;\r\n  streetLine2?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateAdministratorInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  emailAddress?: InputMaybe<Scalars['String']['input']>;\r\n  firstName?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  lastName?: InputMaybe<Scalars['String']['input']>;\r\n  password?: InputMaybe<Scalars['String']['input']>;\r\n  roleIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n};\r\n\r\nexport type UpdateAssetInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  focalPoint?: InputMaybe<CoordinateInput>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n  tags?: InputMaybe<Array<Scalars['String']['input']>>;\r\n};\r\n\r\nexport type UpdateChannelInput = {\r\n  availableCurrencyCodes?: InputMaybe<Array<CurrencyCode>>;\r\n  availableLanguageCodes?: InputMaybe<Array<LanguageCode>>;\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  /** @deprecated Use defaultCurrencyCode instead */\r\n  currencyCode?: InputMaybe<CurrencyCode>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  defaultCurrencyCode?: InputMaybe<CurrencyCode>;\r\n  defaultLanguageCode?: InputMaybe<LanguageCode>;\r\n  defaultShippingZoneId?: InputMaybe<Scalars['ID']['input']>;\r\n  defaultTaxZoneId?: InputMaybe<Scalars['ID']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  outOfStockThreshold?: InputMaybe<Scalars['Int']['input']>;\r\n  pricesIncludeTax?: InputMaybe<Scalars['Boolean']['input']>;\r\n  sellerId?: InputMaybe<Scalars['ID']['input']>;\r\n  token?: InputMaybe<Scalars['String']['input']>;\r\n  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type UpdateChannelResult = Channel | LanguageNotAvailableError;\r\n\r\nexport type UpdateCollectionInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  filters?: InputMaybe<Array<ConfigurableOperationInput>>;\r\n  id: Scalars['ID']['input'];\r\n  inheritFilters?: InputMaybe<Scalars['Boolean']['input']>;\r\n  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;\r\n  parentId?: InputMaybe<Scalars['ID']['input']>;\r\n  translations?: InputMaybe<Array<UpdateCollectionTranslationInput>>;\r\n};\r\n\r\nexport type UpdateCollectionTranslationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id?: InputMaybe<Scalars['ID']['input']>;\r\n  languageCode: LanguageCode;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n  slug?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateCountryInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<CountryTranslationInput>>;\r\n};\r\n\r\nexport type UpdateCustomerGroupInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateCustomerInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  emailAddress?: InputMaybe<Scalars['String']['input']>;\r\n  firstName?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  lastName?: InputMaybe<Scalars['String']['input']>;\r\n  phoneNumber?: InputMaybe<Scalars['String']['input']>;\r\n  title?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateCustomerNoteInput = {\r\n  note: Scalars['String']['input'];\r\n  noteId: Scalars['ID']['input'];\r\n};\r\n\r\nexport type UpdateCustomerResult = Customer | EmailAddressConflictError;\r\n\r\nexport type UpdateFacetInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;\r\n  translations?: InputMaybe<Array<FacetTranslationInput>>;\r\n};\r\n\r\nexport type UpdateFacetValueInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<FacetValueTranslationInput>>;\r\n};\r\n\r\nexport type UpdateGlobalSettingsInput = {\r\n  availableLanguages?: InputMaybe<Array<LanguageCode>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  outOfStockThreshold?: InputMaybe<Scalars['Int']['input']>;\r\n  trackInventory?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type UpdateGlobalSettingsResult = ChannelDefaultLanguageError | GlobalSettings;\r\n\r\nexport type UpdateOrderAddressInput = {\r\n  city?: InputMaybe<Scalars['String']['input']>;\r\n  company?: InputMaybe<Scalars['String']['input']>;\r\n  countryCode?: InputMaybe<Scalars['String']['input']>;\r\n  fullName?: InputMaybe<Scalars['String']['input']>;\r\n  phoneNumber?: InputMaybe<Scalars['String']['input']>;\r\n  postalCode?: InputMaybe<Scalars['String']['input']>;\r\n  province?: InputMaybe<Scalars['String']['input']>;\r\n  streetLine1?: InputMaybe<Scalars['String']['input']>;\r\n  streetLine2?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateOrderInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n};\r\n\r\nexport type UpdateOrderItemsResult = InsufficientStockError | NegativeQuantityError | Order | OrderLimitError | OrderModificationError;\r\n\r\nexport type UpdateOrderNoteInput = {\r\n  isPublic?: InputMaybe<Scalars['Boolean']['input']>;\r\n  note?: InputMaybe<Scalars['String']['input']>;\r\n  noteId: Scalars['ID']['input'];\r\n};\r\n\r\nexport type UpdatePaymentMethodInput = {\r\n  checker?: InputMaybe<ConfigurableOperationInput>;\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  handler?: InputMaybe<ConfigurableOperationInput>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<PaymentMethodTranslationInput>>;\r\n};\r\n\r\nexport type UpdateProductInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  facetValueIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<ProductTranslationInput>>;\r\n};\r\n\r\nexport type UpdateProductOptionGroupInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<ProductOptionGroupTranslationInput>>;\r\n};\r\n\r\nexport type UpdateProductOptionInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<ProductOptionGroupTranslationInput>>;\r\n};\r\n\r\nexport type UpdateProductVariantInput = {\r\n  assetIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  facetValueIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  optionIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  outOfStockThreshold?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Sets the price for the ProductVariant in the Channel's default currency */\r\n  price?: InputMaybe<Scalars['Money']['input']>;\r\n  /** Allows multiple prices to be set for the ProductVariant in different currencies. */\r\n  prices?: InputMaybe<Array<ProductVariantPriceInput>>;\r\n  sku?: InputMaybe<Scalars['String']['input']>;\r\n  stockLevels?: InputMaybe<Array<StockLevelInput>>;\r\n  stockOnHand?: InputMaybe<Scalars['Int']['input']>;\r\n  taxCategoryId?: InputMaybe<Scalars['ID']['input']>;\r\n  trackInventory?: InputMaybe<GlobalFlag>;\r\n  translations?: InputMaybe<Array<ProductVariantTranslationInput>>;\r\n  useGlobalOutOfStockThreshold?: InputMaybe<Scalars['Boolean']['input']>;\r\n};\r\n\r\nexport type UpdatePromotionInput = {\r\n  actions?: InputMaybe<Array<ConfigurableOperationInput>>;\r\n  conditions?: InputMaybe<Array<ConfigurableOperationInput>>;\r\n  couponCode?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  endsAt?: InputMaybe<Scalars['DateTime']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  perCustomerUsageLimit?: InputMaybe<Scalars['Int']['input']>;\r\n  startsAt?: InputMaybe<Scalars['DateTime']['input']>;\r\n  translations?: InputMaybe<Array<PromotionTranslationInput>>;\r\n  usageLimit?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type UpdatePromotionResult = MissingConditionsError | Promotion;\r\n\r\nexport type UpdateProvinceInput = {\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations?: InputMaybe<Array<ProvinceTranslationInput>>;\r\n};\r\n\r\nexport type UpdateRoleInput = {\r\n  channelIds?: InputMaybe<Array<Scalars['ID']['input']>>;\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  permissions?: InputMaybe<Array<Permission>>;\r\n};\r\n\r\nexport type UpdateSellerInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateShippingMethodInput = {\r\n  calculator?: InputMaybe<ConfigurableOperationInput>;\r\n  checker?: InputMaybe<ConfigurableOperationInput>;\r\n  code?: InputMaybe<Scalars['String']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  fulfillmentHandler?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  translations: Array<ShippingMethodTranslationInput>;\r\n};\r\n\r\nexport type UpdateStockLocationInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  description?: InputMaybe<Scalars['String']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateTagInput = {\r\n  id: Scalars['ID']['input'];\r\n  value?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateTaxCategoryInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  isDefault?: InputMaybe<Scalars['Boolean']['input']>;\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type UpdateTaxRateInput = {\r\n  categoryId?: InputMaybe<Scalars['ID']['input']>;\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  customerGroupId?: InputMaybe<Scalars['ID']['input']>;\r\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n  value?: InputMaybe<Scalars['Float']['input']>;\r\n  zoneId?: InputMaybe<Scalars['ID']['input']>;\r\n};\r\n\r\nexport type UpdateZoneInput = {\r\n  customFields?: InputMaybe<Scalars['JSON']['input']>;\r\n  id: Scalars['ID']['input'];\r\n  name?: InputMaybe<Scalars['String']['input']>;\r\n};\r\n\r\nexport type User = Node & {\r\n  __typename?: 'User';\r\n  authenticationMethods: Array<AuthenticationMethod>;\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  identifier: Scalars['String']['output'];\r\n  lastLogin?: Maybe<Scalars['DateTime']['output']>;\r\n  roles: Array<Role>;\r\n  updatedAt: Scalars['DateTime']['output'];\r\n  verified: Scalars['Boolean']['output'];\r\n};\r\n\r\nexport type Zone = Node & {\r\n  __typename?: 'Zone';\r\n  createdAt: Scalars['DateTime']['output'];\r\n  customFields?: Maybe<Scalars['JSON']['output']>;\r\n  id: Scalars['ID']['output'];\r\n  members: Array<Region>;\r\n  name: Scalars['String']['output'];\r\n  updatedAt: Scalars['DateTime']['output'];\r\n};\r\n\r\nexport type ZoneFilterParameter = {\r\n  _and?: InputMaybe<Array<ZoneFilterParameter>>;\r\n  _or?: InputMaybe<Array<ZoneFilterParameter>>;\r\n  createdAt?: InputMaybe<DateOperators>;\r\n  id?: InputMaybe<IdOperators>;\r\n  name?: InputMaybe<StringOperators>;\r\n  updatedAt?: InputMaybe<DateOperators>;\r\n};\r\n\r\nexport type ZoneList = PaginatedList & {\r\n  __typename?: 'ZoneList';\r\n  items: Array<Zone>;\r\n  totalItems: Scalars['Int']['output'];\r\n};\r\n\r\nexport type ZoneListOptions = {\r\n  /** Allows the results to be filtered */\r\n  filter?: InputMaybe<ZoneFilterParameter>;\r\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\r\n  filterOperator?: InputMaybe<LogicalOperator>;\r\n  /** Skips the first n results, for use in pagination */\r\n  skip?: InputMaybe<Scalars['Int']['input']>;\r\n  /** Specifies which properties to sort the results by */\r\n  sort?: InputMaybe<ZoneSortParameter>;\r\n  /** Takes n results, for use in pagination */\r\n  take?: InputMaybe<Scalars['Int']['input']>;\r\n};\r\n\r\nexport type ZoneSortParameter = {\r\n  createdAt?: InputMaybe<SortOrder>;\r\n  id?: InputMaybe<SortOrder>;\r\n  name?: InputMaybe<SortOrder>;\r\n  updatedAt?: InputMaybe<SortOrder>;\r\n};\r\n"],"x_google_ignoreList":[69]}